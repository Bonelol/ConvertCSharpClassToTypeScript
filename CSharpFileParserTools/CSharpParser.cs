//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSharpParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class CSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_DOC_COMMENT=2, DELIMITED_DOC_COMMENT=3, 
		SINGLE_LINE_COMMENT=4, DELIMITED_COMMENT=5, WHITESPACES=6, SHARP=7, ABSTRACT=8, 
		ADD=9, ALIAS=10, ARGLIST=11, AS=12, ASCENDING=13, ASYNC=14, AWAIT=15, 
		BASE=16, BOOL=17, BREAK=18, BY=19, BYTE=20, CASE=21, CATCH=22, CHAR=23, 
		CHECKED=24, CLASS=25, CONST=26, CONTINUE=27, DECIMAL=28, DEFAULT=29, DELEGATE=30, 
		DESCENDING=31, DO=32, DOUBLE=33, DYNAMIC=34, ELSE=35, ENUM=36, EQUALS=37, 
		EVENT=38, EXPLICIT=39, EXTERN=40, FALSE=41, FINALLY=42, FIXED=43, FLOAT=44, 
		FOR=45, FOREACH=46, FROM=47, GET=48, GOTO=49, GROUP=50, IF=51, IMPLICIT=52, 
		IN=53, INT=54, INTERFACE=55, INTERNAL=56, INTO=57, IS=58, JOIN=59, LET=60, 
		LOCK=61, LONG=62, NAMEOF=63, NAMESPACE=64, NEW=65, NULL=66, OBJECT=67, 
		ON=68, OPERATOR=69, ORDERBY=70, OUT=71, OVERRIDE=72, PARAMS=73, PARTIAL=74, 
		PRIVATE=75, PROTECTED=76, PUBLIC=77, READONLY=78, REF=79, REMOVE=80, RETURN=81, 
		SBYTE=82, SEALED=83, SELECT=84, SET=85, SHORT=86, SIZEOF=87, STACKALLOC=88, 
		STATIC=89, STRING=90, STRUCT=91, SWITCH=92, THIS=93, THROW=94, TRUE=95, 
		TRY=96, TYPEOF=97, UINT=98, ULONG=99, UNCHECKED=100, UNSAFE=101, USHORT=102, 
		USING=103, VAR=104, VIRTUAL=105, VOID=106, VOLATILE=107, WHEN=108, WHERE=109, 
		WHILE=110, YIELD=111, IDENTIFIER=112, LITERAL_ACCESS=113, INTEGER_LITERAL=114, 
		HEX_INTEGER_LITERAL=115, REAL_LITERAL=116, CHARACTER_LITERAL=117, REGULAR_STRING=118, 
		VERBATIUM_STRING=119, INTERPOLATED_REGULAR_STRING_START=120, INTERPOLATED_VERBATIUM_STRING_START=121, 
		OPEN_BRACE=122, CLOSE_BRACE=123, OPEN_BRACKET=124, CLOSE_BRACKET=125, 
		OPEN_PARENS=126, CLOSE_PARENS=127, DOT=128, COMMA=129, COLON=130, SEMICOLON=131, 
		PLUS=132, MINUS=133, STAR=134, DIV=135, PERCENT=136, AMP=137, BITWISE_OR=138, 
		CARET=139, BANG=140, TILDE=141, ASSIGNMENT=142, LT=143, GT=144, INTERR=145, 
		DOUBLE_COLON=146, OP_COALESCING=147, OP_INC=148, OP_DEC=149, OP_AND=150, 
		OP_OR=151, OP_PTR=152, OP_EQ=153, OP_NE=154, OP_LE=155, OP_GE=156, OP_ADD_ASSIGNMENT=157, 
		OP_SUB_ASSIGNMENT=158, OP_MULT_ASSIGNMENT=159, OP_DIV_ASSIGNMENT=160, 
		OP_MOD_ASSIGNMENT=161, OP_AND_ASSIGNMENT=162, OP_OR_ASSIGNMENT=163, OP_XOR_ASSIGNMENT=164, 
		OP_LEFT_SHIFT=165, OP_LEFT_SHIFT_ASSIGNMENT=166, DOUBLE_CURLY_INSIDE=167, 
		OPEN_BRACE_INSIDE=168, REGULAR_CHAR_INSIDE=169, VERBATIUM_DOUBLE_QUOTE_INSIDE=170, 
		DOUBLE_QUOTE_INSIDE=171, REGULAR_STRING_INSIDE=172, VERBATIUM_INSIDE_STRING=173, 
		CLOSE_BRACE_INSIDE=174, FORMAT_STRING=175, DIRECTIVE_WHITESPACES=176, 
		DIGITS=177, DEFINE=178, UNDEF=179, ELIF=180, ENDIF=181, LINE=182, ERROR=183, 
		WARNING=184, REGION=185, ENDREGION=186, PRAGMA=187, DIRECTIVE_HIDDEN=188, 
		CONDITIONAL_SYMBOL=189, DIRECTIVE_NEW_LINE=190, TEXT=191, DOUBLE_CURLY_CLOSE_INSIDE=192;
	public const int
		RULE_compilation_unit = 0, RULE_namespace_or_type_name = 1, RULE_type = 2, 
		RULE_base_type = 3, RULE_simple_type = 4, RULE_numeric_type = 5, RULE_integral_type = 6, 
		RULE_floating_point_type = 7, RULE_class_type = 8, RULE_type_argument_list = 9, 
		RULE_argument_list = 10, RULE_argument = 11, RULE_expression = 12, RULE_non_assignment_expression = 13, 
		RULE_assignment = 14, RULE_assignment_operator = 15, RULE_conditional_expression = 16, 
		RULE_null_coalescing_expression = 17, RULE_conditional_or_expression = 18, 
		RULE_conditional_and_expression = 19, RULE_inclusive_or_expression = 20, 
		RULE_exclusive_or_expression = 21, RULE_and_expression = 22, RULE_equality_expression = 23, 
		RULE_relational_expression = 24, RULE_shift_expression = 25, RULE_additive_expression = 26, 
		RULE_multiplicative_expression = 27, RULE_unary_expression = 28, RULE_primary_expression = 29, 
		RULE_primary_expression_start = 30, RULE_member_access = 31, RULE_bracket_expression = 32, 
		RULE_indexer_argument = 33, RULE_predefined_type = 34, RULE_expression_list = 35, 
		RULE_object_or_collection_initializer = 36, RULE_object_initializer = 37, 
		RULE_member_initializer_list = 38, RULE_member_initializer = 39, RULE_initializer_value = 40, 
		RULE_collection_initializer = 41, RULE_element_initializer = 42, RULE_anonymous_object_initializer = 43, 
		RULE_member_declarator_list = 44, RULE_member_declarator = 45, RULE_unbound_type_name = 46, 
		RULE_generic_dimension_specifier = 47, RULE_isType = 48, RULE_lambda_expression = 49, 
		RULE_anonymous_function_signature = 50, RULE_explicit_anonymous_function_parameter_list = 51, 
		RULE_explicit_anonymous_function_parameter = 52, RULE_implicit_anonymous_function_parameter_list = 53, 
		RULE_anonymous_function_body = 54, RULE_query_expression = 55, RULE_from_clause = 56, 
		RULE_query_body = 57, RULE_query_body_clause = 58, RULE_let_clause = 59, 
		RULE_where_clause = 60, RULE_combined_join_clause = 61, RULE_orderby_clause = 62, 
		RULE_ordering = 63, RULE_select_or_group_clause = 64, RULE_query_continuation = 65, 
		RULE_statement = 66, RULE_labeled_Statement = 67, RULE_embedded_statement = 68, 
		RULE_simple_embedded_statement = 69, RULE_block = 70, RULE_local_variable_declaration = 71, 
		RULE_local_variable_type = 72, RULE_local_variable_declarator = 73, RULE_local_variable_initializer = 74, 
		RULE_local_constant_declaration = 75, RULE_if_body = 76, RULE_switch_section = 77, 
		RULE_switch_label = 78, RULE_statement_list = 79, RULE_for_initializer = 80, 
		RULE_for_iterator = 81, RULE_catch_clauses = 82, RULE_specific_catch_clause = 83, 
		RULE_general_catch_clause = 84, RULE_exception_filter = 85, RULE_finally_clause = 86, 
		RULE_resource_acquisition = 87, RULE_namespace_declaration = 88, RULE_qualified_identifier = 89, 
		RULE_namespace_body = 90, RULE_extern_alias_directives = 91, RULE_extern_alias_directive = 92, 
		RULE_using_directives = 93, RULE_using_directive = 94, RULE_namespace_member_declarations = 95, 
		RULE_namespace_member_declaration = 96, RULE_type_declaration = 97, RULE_qualified_alias_member = 98, 
		RULE_type_parameter_list = 99, RULE_type_parameter = 100, RULE_class_base = 101, 
		RULE_interface_type_list = 102, RULE_type_parameter_constraints_clauses = 103, 
		RULE_type_parameter_constraints_clause = 104, RULE_type_parameter_constraints = 105, 
		RULE_primary_constraint = 106, RULE_secondary_constraints = 107, RULE_constructor_constraint = 108, 
		RULE_class_body = 109, RULE_class_member_declarations = 110, RULE_class_member_declaration = 111, 
		RULE_all_member_modifiers = 112, RULE_all_member_modifier = 113, RULE_common_member_declaration = 114, 
		RULE_typed_member_declaration = 115, RULE_constant_declarators = 116, 
		RULE_constant_declarator = 117, RULE_variable_declarators = 118, RULE_variable_declarator = 119, 
		RULE_variable_initializer = 120, RULE_return_type = 121, RULE_member_name = 122, 
		RULE_method_body = 123, RULE_formal_parameter_list = 124, RULE_fixed_parameters = 125, 
		RULE_fixed_parameter = 126, RULE_parameter_modifier = 127, RULE_parameter_array = 128, 
		RULE_accessor_declarations = 129, RULE_get_accessor_declaration = 130, 
		RULE_set_accessor_declaration = 131, RULE_accessor_modifier = 132, RULE_accessor_body = 133, 
		RULE_event_accessor_declarations = 134, RULE_add_accessor_declaration = 135, 
		RULE_remove_accessor_declaration = 136, RULE_overloadable_operator = 137, 
		RULE_conversion_operator_declarator = 138, RULE_constructor_initializer = 139, 
		RULE_body = 140, RULE_struct_interfaces = 141, RULE_struct_body = 142, 
		RULE_struct_member_declaration = 143, RULE_array_type = 144, RULE_rank_specifier = 145, 
		RULE_array_initializer = 146, RULE_variant_type_parameter_list = 147, 
		RULE_variant_type_parameter = 148, RULE_variance_annotation = 149, RULE_interface_base = 150, 
		RULE_interface_body = 151, RULE_interface_member_declaration = 152, RULE_interface_accessors = 153, 
		RULE_enum_base = 154, RULE_enum_body = 155, RULE_enum_member_declaration = 156, 
		RULE_global_attribute_section = 157, RULE_global_attribute_target = 158, 
		RULE_attributes = 159, RULE_attribute_section = 160, RULE_attribute_target = 161, 
		RULE_attribute_list = 162, RULE_attribute = 163, RULE_attribute_argument = 164, 
		RULE_pointer_type = 165, RULE_fixed_pointer_declarators = 166, RULE_fixed_pointer_declarator = 167, 
		RULE_fixed_pointer_initializer = 168, RULE_fixed_size_buffer_declarator = 169, 
		RULE_local_variable_initializer_unsafe = 170, RULE_right_arrow = 171, 
		RULE_right_shift = 172, RULE_right_shift_assignment = 173, RULE_literal = 174, 
		RULE_boolean_literal = 175, RULE_string_literal = 176, RULE_interpolated_regular_string = 177, 
		RULE_interpolated_verbatium_string = 178, RULE_interpolated_regular_string_part = 179, 
		RULE_interpolated_verbatium_string_part = 180, RULE_interpolated_string_expression = 181, 
		RULE_keyword = 182, RULE_class_definition = 183, RULE_struct_definition = 184, 
		RULE_interface_definition = 185, RULE_enum_definition = 186, RULE_delegate_definition = 187, 
		RULE_event_declaration = 188, RULE_field_declaration = 189, RULE_property_declaration = 190, 
		RULE_constant_declaration = 191, RULE_indexer_declaration = 192, RULE_destructor_definition = 193, 
		RULE_constructor_declaration = 194, RULE_method_declaration = 195, RULE_method_member_name = 196, 
		RULE_operator_declaration = 197, RULE_arg_declaration = 198, RULE_method_invocation = 199, 
		RULE_object_creation_expression = 200, RULE_identifier = 201;
	public static readonly string[] ruleNames = {
		"compilation_unit", "namespace_or_type_name", "type", "base_type", "simple_type", 
		"numeric_type", "integral_type", "floating_point_type", "class_type", 
		"type_argument_list", "argument_list", "argument", "expression", "non_assignment_expression", 
		"assignment", "assignment_operator", "conditional_expression", "null_coalescing_expression", 
		"conditional_or_expression", "conditional_and_expression", "inclusive_or_expression", 
		"exclusive_or_expression", "and_expression", "equality_expression", "relational_expression", 
		"shift_expression", "additive_expression", "multiplicative_expression", 
		"unary_expression", "primary_expression", "primary_expression_start", 
		"member_access", "bracket_expression", "indexer_argument", "predefined_type", 
		"expression_list", "object_or_collection_initializer", "object_initializer", 
		"member_initializer_list", "member_initializer", "initializer_value", 
		"collection_initializer", "element_initializer", "anonymous_object_initializer", 
		"member_declarator_list", "member_declarator", "unbound_type_name", "generic_dimension_specifier", 
		"isType", "lambda_expression", "anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
		"explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
		"anonymous_function_body", "query_expression", "from_clause", "query_body", 
		"query_body_clause", "let_clause", "where_clause", "combined_join_clause", 
		"orderby_clause", "ordering", "select_or_group_clause", "query_continuation", 
		"statement", "labeled_Statement", "embedded_statement", "simple_embedded_statement", 
		"block", "local_variable_declaration", "local_variable_type", "local_variable_declarator", 
		"local_variable_initializer", "local_constant_declaration", "if_body", 
		"switch_section", "switch_label", "statement_list", "for_initializer", 
		"for_iterator", "catch_clauses", "specific_catch_clause", "general_catch_clause", 
		"exception_filter", "finally_clause", "resource_acquisition", "namespace_declaration", 
		"qualified_identifier", "namespace_body", "extern_alias_directives", "extern_alias_directive", 
		"using_directives", "using_directive", "namespace_member_declarations", 
		"namespace_member_declaration", "type_declaration", "qualified_alias_member", 
		"type_parameter_list", "type_parameter", "class_base", "interface_type_list", 
		"type_parameter_constraints_clauses", "type_parameter_constraints_clause", 
		"type_parameter_constraints", "primary_constraint", "secondary_constraints", 
		"constructor_constraint", "class_body", "class_member_declarations", "class_member_declaration", 
		"all_member_modifiers", "all_member_modifier", "common_member_declaration", 
		"typed_member_declaration", "constant_declarators", "constant_declarator", 
		"variable_declarators", "variable_declarator", "variable_initializer", 
		"return_type", "member_name", "method_body", "formal_parameter_list", 
		"fixed_parameters", "fixed_parameter", "parameter_modifier", "parameter_array", 
		"accessor_declarations", "get_accessor_declaration", "set_accessor_declaration", 
		"accessor_modifier", "accessor_body", "event_accessor_declarations", "add_accessor_declaration", 
		"remove_accessor_declaration", "overloadable_operator", "conversion_operator_declarator", 
		"constructor_initializer", "body", "struct_interfaces", "struct_body", 
		"struct_member_declaration", "array_type", "rank_specifier", "array_initializer", 
		"variant_type_parameter_list", "variant_type_parameter", "variance_annotation", 
		"interface_base", "interface_body", "interface_member_declaration", "interface_accessors", 
		"enum_base", "enum_body", "enum_member_declaration", "global_attribute_section", 
		"global_attribute_target", "attributes", "attribute_section", "attribute_target", 
		"attribute_list", "attribute", "attribute_argument", "pointer_type", "fixed_pointer_declarators", 
		"fixed_pointer_declarator", "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
		"local_variable_initializer_unsafe", "right_arrow", "right_shift", "right_shift_assignment", 
		"literal", "boolean_literal", "string_literal", "interpolated_regular_string", 
		"interpolated_verbatium_string", "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
		"interpolated_string_expression", "keyword", "class_definition", "struct_definition", 
		"interface_definition", "enum_definition", "delegate_definition", "event_declaration", 
		"field_declaration", "property_declaration", "constant_declaration", "indexer_declaration", 
		"destructor_definition", "constructor_declaration", "method_declaration", 
		"method_member_name", "operator_declaration", "arg_declaration", "method_invocation", 
		"object_creation_expression", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, null, null, "'#'", "'abstract'", 
		"'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", "'async'", "'await'", 
		"'base'", "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
		"'char'", "'checked'", "'class'", "'const'", "'continue'", "'decimal'", 
		"'default'", "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", 
		"'else'", "'enum'", "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
		"'finally'", "'fixed'", "'float'", "'for'", "'foreach'", "'from'", "'get'", 
		"'goto'", "'group'", "'if'", "'implicit'", "'in'", "'int'", "'interface'", 
		"'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", 
		"'nameof'", "'namespace'", "'new'", "'null'", "'object'", "'on'", "'operator'", 
		"'orderby'", "'out'", "'override'", "'params'", "'partial'", "'private'", 
		"'protected'", "'public'", "'readonly'", "'ref'", "'remove'", "'return'", 
		"'sbyte'", "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", 
		"'static'", "'string'", "'struct'", "'switch'", "'this'", "'throw'", "'true'", 
		"'try'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unsafe'", "'ushort'", 
		"'using'", "'var'", "'virtual'", "'void'", "'volatile'", "'when'", "'where'", 
		"'while'", "'yield'", null, null, null, null, null, null, null, null, 
		null, null, "'{'", "'}'", "'['", "']'", "'('", "')'", "'.'", "','", "':'", 
		"';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", 
		"'~'", "'='", "'<'", "'>'", "'?'", "'::'", "'??'", "'++'", "'--'", "'&&'", 
		"'||'", "'->'", "'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'|='", "'^='", "'<<'", "'<<='", "'{{'", null, 
		null, null, null, null, null, null, null, null, null, "'define'", "'undef'", 
		"'elif'", "'endif'", "'line'", null, null, null, null, null, "'hidden'", 
		null, null, null, "'}}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
		"SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", "SHARP", "ABSTRACT", 
		"ADD", "ALIAS", "ARGLIST", "AS", "ASCENDING", "ASYNC", "AWAIT", "BASE", 
		"BOOL", "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", "CLASS", 
		"CONST", "CONTINUE", "DECIMAL", "DEFAULT", "DELEGATE", "DESCENDING", "DO", 
		"DOUBLE", "DYNAMIC", "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
		"FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", "FROM", "GET", 
		"GOTO", "GROUP", "IF", "IMPLICIT", "IN", "INT", "INTERFACE", "INTERNAL", 
		"INTO", "IS", "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", "NEW", 
		"NULL", "OBJECT", "ON", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", "PARAMS", 
		"PARTIAL", "PRIVATE", "PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", 
		"RETURN", "SBYTE", "SEALED", "SELECT", "SET", "SHORT", "SIZEOF", "STACKALLOC", 
		"STATIC", "STRING", "STRUCT", "SWITCH", "THIS", "THROW", "TRUE", "TRY", 
		"TYPEOF", "UINT", "ULONG", "UNCHECKED", "UNSAFE", "USHORT", "USING", "VAR", 
		"VIRTUAL", "VOID", "VOLATILE", "WHEN", "WHERE", "WHILE", "YIELD", "IDENTIFIER", 
		"LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "REAL_LITERAL", 
		"CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", 
		"INTERPOLATED_VERBATIUM_STRING_START", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", "COLON", 
		"SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", 
		"CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", 
		"OP_COALESCING", "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
		"OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", 
		"OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", 
		"OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "DOUBLE_CURLY_INSIDE", 
		"OPEN_BRACE_INSIDE", "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
		"DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", 
		"CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", "DIGITS", 
		"DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", "ERROR", "WARNING", "REGION", 
		"ENDREGION", "PRAGMA", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", "DIRECTIVE_NEW_LINE", 
		"TEXT", "DOUBLE_CURLY_CLOSE_INSIDE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Compilation_unitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CSharpParser.Eof, 0); }
		public ITerminalNode BYTE_ORDER_MARK() { return GetToken(CSharpParser.BYTE_ORDER_MARK, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 404; Match(BYTE_ORDER_MARK);
				}
			}

			State = 408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 407; extern_alias_directives();
				}
				break;
			}
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 410; using_directives();
				}
			}

			State = 416;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 413; global_attribute_section();
					}
					} 
				}
				State = 418;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0)) {
				{
				State = 419; namespace_member_declarations();
				}
			}

			State = 422; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_or_type_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Namespace_or_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_or_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_or_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_or_type_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_or_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_or_type_nameContext namespace_or_type_name() {
		Namespace_or_type_nameContext _localctx = new Namespace_or_type_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace_or_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 424; identifier();
				State = 426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 425; type_argument_list();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 428; qualified_alias_member();
				}
				break;
			}
			State = 438;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 431; Match(DOT);
					State = 432; identifier();
					State = 434;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 433; type_argument_list();
						}
						break;
					}
					}
					} 
				}
				State = 440;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; base_type();
			State = 447;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 445;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INTERR:
						{
						State = 442; Match(INTERR);
						}
						break;
					case OPEN_BRACKET:
						{
						State = 443; rank_specifier();
						}
						break;
					case STAR:
						{
						State = 444; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(Context, State);
		EnterRule(_localctx, 6, RULE_base_type);
		try {
			State = 454;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 450; simple_type();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 451; class_type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 452; Match(VOID);
				State = 453; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(Context, State);
		EnterRule(_localctx, 8, RULE_simple_type);
		try {
			State = 458;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456; numeric_type();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 457; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(Context, State);
		EnterRule(_localctx, 10, RULE_numeric_type);
		try {
			State = 463;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460; integral_type();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 461; floating_point_type();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 462; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(Context, State);
		EnterRule(_localctx, 12, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (SBYTE - 82)) | (1L << (SHORT - 82)) | (1L << (UINT - 82)) | (1L << (ULONG - 82)) | (1L << (USHORT - 82)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(Context, State);
		EnterRule(_localctx, 14, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(CSharpParser.DYNAMIC, 0); }
		public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 16, RULE_class_type);
		try {
			State = 473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 469; namespace_or_type_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 470; Match(OBJECT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 471; Match(DYNAMIC);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 472; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(Context, State);
		EnterRule(_localctx, 18, RULE_type_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475; Match(LT);
			State = 476; type();
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 477; Match(COMMA);
				State = 478; type();
				}
				}
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 484; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 20, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; argument();
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 487; Match(COMMA);
				State = 488; argument();
				}
				}
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public IToken refout;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 22, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 494; identifier();
				State = 495; Match(COLON);
				}
				break;
			}
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT || _la==REF) {
				{
				State = 499;
				_localctx.refout = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OUT || _la==REF) ) {
					_localctx.refout = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 502; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		try {
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505; non_assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_assignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_non_assignment_expression);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508; lambda_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 509; query_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 510; conditional_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 28, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; unary_expression();
			State = 514; assignment_operator();
			State = 515; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Right_shift_assignmentContext right_shift_assignment() {
			return GetRuleContext<Right_shift_assignmentContext>(0);
		}
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_assignment_operator);
		try {
			State = 528;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 517; Match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 518; Match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 519; Match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 520; Match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 521; Match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 522; Match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 523; Match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 524; Match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 525; Match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 526; Match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 527; right_shift_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_conditional_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; null_coalescing_expression();
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 531; Match(INTERR);
				State = 532; expression();
				State = 533; Match(COLON);
				State = 534; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_coalescing_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_null_coalescing_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; conditional_or_expression();
			State = 541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_COALESCING) {
				{
				State = 539; Match(OP_COALESCING);
				State = 540; null_coalescing_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		public Conditional_and_expressionContext[] conditional_and_expression() {
			return GetRuleContexts<Conditional_and_expressionContext>();
		}
		public Conditional_and_expressionContext conditional_and_expression(int i) {
			return GetRuleContext<Conditional_and_expressionContext>(i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(CSharpParser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(CSharpParser.OP_OR, i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_conditional_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543; conditional_and_expression();
			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_OR) {
				{
				{
				State = 544; Match(OP_OR);
				State = 545; conditional_and_expression();
				}
				}
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext[] inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(CSharpParser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(CSharpParser.OP_AND, i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_conditional_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; inclusive_or_expression();
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_AND) {
				{
				{
				State = 552; Match(OP_AND);
				State = 553; inclusive_or_expression();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Exclusive_or_expressionContext[] exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_inclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559; exclusive_or_expression();
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 560; Match(BITWISE_OR);
				State = 561; exclusive_or_expression();
				}
				}
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_exclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; and_expression();
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 568; Match(CARET);
				State = 569; and_expression();
				}
				}
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; equality_expression();
			State = 580;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 576; Match(AMP);
					State = 577; equality_expression();
					}
					} 
				}
				State = 582;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public ITerminalNode[] OP_EQ() { return GetTokens(CSharpParser.OP_EQ); }
		public ITerminalNode OP_EQ(int i) {
			return GetToken(CSharpParser.OP_EQ, i);
		}
		public ITerminalNode[] OP_NE() { return GetTokens(CSharpParser.OP_NE); }
		public ITerminalNode OP_NE(int i) {
			return GetToken(CSharpParser.OP_NE, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; relational_expression();
			State = 588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				{
				State = 584;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 585; relational_expression();
				}
				}
				State = 590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		public ITerminalNode[] IS() { return GetTokens(CSharpParser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(CSharpParser.IS, i);
		}
		public IsTypeContext[] isType() {
			return GetRuleContexts<IsTypeContext>();
		}
		public IsTypeContext isType(int i) {
			return GetRuleContext<IsTypeContext>(i);
		}
		public ITerminalNode[] AS() { return GetTokens(CSharpParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(CSharpParser.AS, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_relational_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591; shift_expression();
			State = 600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AS || _la==IS || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (LT - 143)) | (1L << (GT - 143)) | (1L << (OP_LE - 143)) | (1L << (OP_GE - 143)))) != 0)) {
				{
				State = 598;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LT:
				case GT:
				case OP_LE:
				case OP_GE:
					{
					State = 592;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (LT - 143)) | (1L << (GT - 143)) | (1L << (OP_LE - 143)) | (1L << (OP_GE - 143)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 593; shift_expression();
					}
					break;
				case IS:
					{
					State = 594; Match(IS);
					State = 595; isType();
					}
					break;
				case AS:
					{
					State = 596; Match(AS);
					State = 597; type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		public Right_shiftContext[] right_shift() {
			return GetRuleContexts<Right_shiftContext>();
		}
		public Right_shiftContext right_shift(int i) {
			return GetRuleContext<Right_shiftContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_shift_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 603; additive_expression();
			State = 611;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 606;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OP_LEFT_SHIFT:
						{
						State = 604; Match(OP_LEFT_SHIFT);
						}
						break;
					case GT:
						{
						State = 605; right_shift();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 608; additive_expression();
					}
					} 
				}
				State = 613;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 614; multiplicative_expression();
			State = 619;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 615;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 616; multiplicative_expression();
					}
					} 
				}
				State = 621;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_multiplicative_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 622; unary_expression();
			State = 627;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 623;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (STAR - 134)) | (1L << (DIV - 134)) | (1L << (PERCENT - 134)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 624; unary_expression();
					}
					} 
				}
				State = 629;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode BANG() { return GetToken(CSharpParser.BANG, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode AWAIT() { return GetToken(CSharpParser.AWAIT, 0); }
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_unary_expression);
		try {
			State = 654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 630; primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631; Match(PLUS);
				State = 632; unary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 633; Match(MINUS);
				State = 634; unary_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 635; Match(BANG);
				State = 636; unary_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 637; Match(TILDE);
				State = 638; unary_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 639; Match(OP_INC);
				State = 640; unary_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 641; Match(OP_DEC);
				State = 642; unary_expression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 643; Match(OPEN_PARENS);
				State = 644; type();
				State = 645; Match(CLOSE_PARENS);
				State = 646; unary_expression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 648; Match(AWAIT);
				State = 649; unary_expression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 650; Match(AMP);
				State = 651; unary_expression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 652; Match(STAR);
				State = 653; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expression_startContext pe;
		public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Member_accessContext[] member_access() {
			return GetRuleContexts<Member_accessContext>();
		}
		public Member_accessContext member_access(int i) {
			return GetRuleContext<Member_accessContext>(i);
		}
		public Method_invocationContext[] method_invocation() {
			return GetRuleContexts<Method_invocationContext>();
		}
		public Method_invocationContext method_invocation(int i) {
			return GetRuleContext<Method_invocationContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_primary_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 656; _localctx.pe = primary_expression_start();
			State = 660;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 657; bracket_expression();
					}
					} 
				}
				State = 662;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			State = 679;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 669;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
					case INTERR:
						{
						State = 663; member_access();
						}
						break;
					case OPEN_PARENS:
						{
						State = 664; method_invocation();
						}
						break;
					case OP_INC:
						{
						State = 665; Match(OP_INC);
						}
						break;
					case OP_DEC:
						{
						State = 666; Match(OP_DEC);
						}
						break;
					case OP_PTR:
						{
						State = 667; Match(OP_PTR);
						State = 668; identifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 674;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 671; bracket_expression();
							}
							} 
						}
						State = 676;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
					}
					}
					} 
				}
				State = 681;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_startContext : ParserRuleContext {
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_start; } }
	 
		public Primary_expression_startContext() { }
		public virtual void CopyFrom(Primary_expression_startContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralAccessExpressionContext : Primary_expression_startContext {
		public ITerminalNode LITERAL_ACCESS() { return GetToken(CSharpParser.LITERAL_ACCESS, 0); }
		public LiteralAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteralAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteralAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultValueExpressionContext : Primary_expression_startContext {
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public DefaultValueExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BaseAccessExpressionContext : Primary_expression_startContext {
		public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public BaseAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBaseAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBaseAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SizeofExpressionContext : Primary_expression_startContext {
		public ITerminalNode SIZEOF() { return GetToken(CSharpParser.SIZEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public SizeofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSizeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSizeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionsContext : Primary_expression_startContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ParenthesisExpressionsContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisReferenceExpressionContext : Primary_expression_startContext {
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public ThisReferenceExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThisReferenceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThisReferenceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreationExpressionContext : Primary_expression_startContext {
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Object_creation_expressionContext object_creation_expression() {
			return GetRuleContext<Object_creation_expressionContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ObjectCreationExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObjectCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObjectCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousMethodExpressionContext : Primary_expression_startContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public AnonymousMethodExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousMethodExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExpressionContext : Primary_expression_startContext {
		public ITerminalNode TYPEOF() { return GetToken(CSharpParser.TYPEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Unbound_type_nameContext unbound_type_name() {
			return GetRuleContext<Unbound_type_nameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public TypeofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UncheckedExpressionContext : Primary_expression_startContext {
		public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public UncheckedExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUncheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUncheckedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUncheckedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExpressionContext : Primary_expression_startContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public SimpleNameExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : Primary_expression_startContext {
		public Predefined_typeContext predefined_type() {
			return GetRuleContext<Predefined_typeContext>(0);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public MemberAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckedExpressionContext : Primary_expression_startContext {
		public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public CheckedExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : Primary_expression_startContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameofExpressionContext : Primary_expression_startContext {
		public ITerminalNode NAMEOF() { return GetToken(CSharpParser.NAMEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public NameofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNameofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNameofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_startContext primary_expression_start() {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(Context, State);
		EnterRule(_localctx, 60, RULE_primary_expression_start);
		int _la;
		try {
			int _alt;
			State = 791;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 682; literal();
				}
				break;
			case 2:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 683; identifier();
				State = 685;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 684; type_argument_list();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ParenthesisExpressionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 687; Match(OPEN_PARENS);
				State = 688; expression();
				State = 689; Match(CLOSE_PARENS);
				}
				break;
			case 4:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 691; predefined_type();
				}
				break;
			case 5:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 692; qualified_alias_member();
				}
				break;
			case 6:
				_localctx = new LiteralAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 693; Match(LITERAL_ACCESS);
				}
				break;
			case 7:
				_localctx = new ThisReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 694; Match(THIS);
				}
				break;
			case 8:
				_localctx = new BaseAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 695; Match(BASE);
				State = 705;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 696; Match(DOT);
					State = 697; identifier();
					State = 699;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
					case 1:
						{
						State = 698; type_argument_list();
						}
						break;
					}
					}
					break;
				case OPEN_BRACKET:
					{
					State = 701; Match(OPEN_BRACKET);
					State = 702; expression_list();
					State = 703; Match(CLOSE_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				_localctx = new ObjectCreationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 707; Match(NEW);
				State = 736;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case UINT:
				case ULONG:
				case USHORT:
				case VAR:
				case VOID:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 708; type();
					State = 730;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
					case 1:
						{
						State = 709; object_creation_expression();
						}
						break;
					case 2:
						{
						State = 710; object_or_collection_initializer();
						}
						break;
					case 3:
						{
						State = 711; Match(OPEN_BRACKET);
						State = 712; expression_list();
						State = 713; Match(CLOSE_BRACKET);
						State = 717;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 714; rank_specifier();
								}
								} 
							}
							State = 719;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
						}
						State = 721;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==OPEN_BRACE) {
							{
							State = 720; array_initializer();
							}
						}

						}
						break;
					case 4:
						{
						State = 724;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 723; rank_specifier();
							}
							}
							State = 726;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==OPEN_BRACKET );
						State = 728; array_initializer();
						}
						break;
					}
					}
					break;
				case OPEN_BRACE:
					{
					State = 732; anonymous_object_initializer();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 733; rank_specifier();
					State = 734; array_initializer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				_localctx = new TypeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 738; Match(TYPEOF);
				State = 739; Match(OPEN_PARENS);
				State = 743;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 740; unbound_type_name();
					}
					break;
				case 2:
					{
					State = 741; type();
					}
					break;
				case 3:
					{
					State = 742; Match(VOID);
					}
					break;
				}
				State = 745; Match(CLOSE_PARENS);
				}
				break;
			case 11:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 746; Match(CHECKED);
				State = 747; Match(OPEN_PARENS);
				State = 748; expression();
				State = 749; Match(CLOSE_PARENS);
				}
				break;
			case 12:
				_localctx = new UncheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 751; Match(UNCHECKED);
				State = 752; Match(OPEN_PARENS);
				State = 753; expression();
				State = 754; Match(CLOSE_PARENS);
				}
				break;
			case 13:
				_localctx = new DefaultValueExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 756; Match(DEFAULT);
				State = 757; Match(OPEN_PARENS);
				State = 758; type();
				State = 759; Match(CLOSE_PARENS);
				}
				break;
			case 14:
				_localctx = new AnonymousMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASYNC) {
					{
					State = 761; Match(ASYNC);
					}
				}

				State = 764; Match(DELEGATE);
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PARENS) {
					{
					State = 765; Match(OPEN_PARENS);
					State = 767;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
						{
						State = 766; explicit_anonymous_function_parameter_list();
						}
					}

					State = 769; Match(CLOSE_PARENS);
					}
				}

				State = 772; block();
				}
				break;
			case 15:
				_localctx = new SizeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 773; Match(SIZEOF);
				State = 774; Match(OPEN_PARENS);
				State = 775; type();
				State = 776; Match(CLOSE_PARENS);
				}
				break;
			case 16:
				_localctx = new NameofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 778; Match(NAMEOF);
				State = 779; Match(OPEN_PARENS);
				State = 785;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 780; identifier();
						State = 781; Match(DOT);
						}
						} 
					}
					State = 787;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				}
				State = 788; identifier();
				State = 789; Match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 62, RULE_member_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 793; Match(INTERR);
				}
			}

			State = 796; Match(DOT);
			State = 797; identifier();
			State = 799;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 798; type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public Indexer_argumentContext[] indexer_argument() {
			return GetRuleContexts<Indexer_argumentContext>();
		}
		public Indexer_argumentContext indexer_argument(int i) {
			return GetRuleContext<Indexer_argumentContext>(i);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_bracket_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 801; Match(INTERR);
				}
			}

			State = 804; Match(OPEN_BRACKET);
			State = 805; indexer_argument();
			State = 810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 806; Match(COMMA);
				State = 807; indexer_argument();
				}
				}
				State = 812;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 813; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_argumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Indexer_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIndexer_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIndexer_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_argumentContext indexer_argument() {
		Indexer_argumentContext _localctx = new Indexer_argumentContext(Context, State);
		EnterRule(_localctx, 66, RULE_indexer_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 815; identifier();
				State = 816; Match(COLON);
				}
				break;
			}
			State = 820; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_typeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		public Predefined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPredefined_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPredefined_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefined_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_typeContext predefined_type() {
		Predefined_typeContext _localctx = new Predefined_typeContext(Context, State);
		EnterRule(_localctx, 68, RULE_predefined_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (SBYTE - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 70, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824; expression();
			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 825; Match(COMMA);
				State = 826; expression();
				}
				}
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_or_collection_initializerContext : ParserRuleContext {
		public Object_initializerContext object_initializer() {
			return GetRuleContext<Object_initializerContext>(0);
		}
		public Collection_initializerContext collection_initializer() {
			return GetRuleContext<Collection_initializerContext>(0);
		}
		public Object_or_collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_or_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObject_or_collection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObject_or_collection_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_or_collection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_or_collection_initializerContext object_or_collection_initializer() {
		Object_or_collection_initializerContext _localctx = new Object_or_collection_initializerContext(Context, State);
		EnterRule(_localctx, 72, RULE_object_or_collection_initializer);
		try {
			State = 834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 832; object_initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 833; collection_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Member_initializer_listContext member_initializer_list() {
			return GetRuleContext<Member_initializer_listContext>(0);
		}
		public Object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObject_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObject_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_initializerContext object_initializer() {
		Object_initializerContext _localctx = new Object_initializerContext(Context, State);
		EnterRule(_localctx, 74, RULE_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836; Match(OPEN_BRACE);
			State = 841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (VAR - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (OPEN_BRACKET - 68)))) != 0)) {
				{
				State = 837; member_initializer_list();
				State = 839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 838; Match(COMMA);
					}
				}

				}
			}

			State = 843; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializer_listContext : ParserRuleContext {
		public Member_initializerContext[] member_initializer() {
			return GetRuleContexts<Member_initializerContext>();
		}
		public Member_initializerContext member_initializer(int i) {
			return GetRuleContext<Member_initializerContext>(i);
		}
		public Member_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_initializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_initializer_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializer_listContext member_initializer_list() {
		Member_initializer_listContext _localctx = new Member_initializer_listContext(Context, State);
		EnterRule(_localctx, 76, RULE_member_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 845; member_initializer();
			State = 850;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 846; Match(COMMA);
					State = 847; member_initializer();
					}
					} 
				}
				State = 852;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializerContext : ParserRuleContext {
		public Initializer_valueContext initializer_value() {
			return GetRuleContext<Initializer_valueContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializerContext member_initializer() {
		Member_initializerContext _localctx = new Member_initializerContext(Context, State);
		EnterRule(_localctx, 78, RULE_member_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 853; identifier();
				}
				break;
			case OPEN_BRACKET:
				{
				State = 854; Match(OPEN_BRACKET);
				State = 855; expression();
				State = 856; Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 860; Match(ASSIGNMENT);
			State = 861; initializer_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_valueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Initializer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInitializer_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInitializer_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_valueContext initializer_value() {
		Initializer_valueContext _localctx = new Initializer_valueContext(Context, State);
		EnterRule(_localctx, 80, RULE_initializer_value);
		try {
			State = 865;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 863; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 864; object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Element_initializerContext[] element_initializer() {
			return GetRuleContexts<Element_initializerContext>();
		}
		public Element_initializerContext element_initializer(int i) {
			return GetRuleContext<Element_initializerContext>(i);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCollection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCollection_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_initializerContext collection_initializer() {
		Collection_initializerContext _localctx = new Collection_initializerContext(Context, State);
		EnterRule(_localctx, 82, RULE_collection_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 867; Match(OPEN_BRACE);
			State = 868; element_initializer();
			State = 873;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 869; Match(COMMA);
					State = 870; element_initializer();
					}
					} 
				}
				State = 875;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			State = 877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 876; Match(COMMA);
				}
			}

			State = 879; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializerContext : ParserRuleContext {
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterElement_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitElement_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializerContext element_initializer() {
		Element_initializerContext _localctx = new Element_initializerContext(Context, State);
		EnterRule(_localctx, 84, RULE_element_initializer);
		try {
			State = 886;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 881; non_assignment_expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 882; Match(OPEN_BRACE);
				State = 883; expression_list();
				State = 884; Match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Member_declarator_listContext member_declarator_list() {
			return GetRuleContext<Member_declarator_listContext>(0);
		}
		public Anonymous_object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_object_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_object_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_object_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_initializerContext anonymous_object_initializer() {
		Anonymous_object_initializerContext _localctx = new Anonymous_object_initializerContext(Context, State);
		EnterRule(_localctx, 86, RULE_anonymous_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888; Match(OPEN_BRACE);
			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0)) {
				{
				State = 889; member_declarator_list();
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 890; Match(COMMA);
					}
				}

				}
			}

			State = 895; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declarator_listContext : ParserRuleContext {
		public Member_declaratorContext[] member_declarator() {
			return GetRuleContexts<Member_declaratorContext>();
		}
		public Member_declaratorContext member_declarator(int i) {
			return GetRuleContext<Member_declaratorContext>(i);
		}
		public Member_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_declarator_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declarator_listContext member_declarator_list() {
		Member_declarator_listContext _localctx = new Member_declarator_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_member_declarator_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 897; member_declarator();
			State = 902;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 898; Match(COMMA);
					State = 899; member_declarator();
					}
					} 
				}
				State = 904;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declaratorContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declaratorContext member_declarator() {
		Member_declaratorContext _localctx = new Member_declaratorContext(Context, State);
		EnterRule(_localctx, 90, RULE_member_declarator);
		try {
			State = 910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 905; primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 906; identifier();
				State = 907; Match(ASSIGNMENT);
				State = 908; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unbound_type_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Generic_dimension_specifierContext[] generic_dimension_specifier() {
			return GetRuleContexts<Generic_dimension_specifierContext>();
		}
		public Generic_dimension_specifierContext generic_dimension_specifier(int i) {
			return GetRuleContext<Generic_dimension_specifierContext>(i);
		}
		public Unbound_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unbound_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnbound_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnbound_type_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnbound_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unbound_type_nameContext unbound_type_name() {
		Unbound_type_nameContext _localctx = new Unbound_type_nameContext(Context, State);
		EnterRule(_localctx, 92, RULE_unbound_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912; identifier();
			State = 921;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE_PARENS:
			case DOT:
			case LT:
				{
				State = 914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 913; generic_dimension_specifier();
					}
				}

				}
				break;
			case DOUBLE_COLON:
				{
				State = 916; Match(DOUBLE_COLON);
				State = 917; identifier();
				State = 919;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 918; generic_dimension_specifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 930;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 923; Match(DOT);
				State = 924; identifier();
				State = 926;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 925; generic_dimension_specifier();
					}
				}

				}
				}
				State = 932;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_dimension_specifierContext : ParserRuleContext {
		public Generic_dimension_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_dimension_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGeneric_dimension_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGeneric_dimension_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_dimension_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_dimension_specifierContext generic_dimension_specifier() {
		Generic_dimension_specifierContext _localctx = new Generic_dimension_specifierContext(Context, State);
		EnterRule(_localctx, 94, RULE_generic_dimension_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933; Match(LT);
			State = 937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 934; Match(COMMA);
				}
				}
				State = 939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 940; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public IsTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIsType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIsType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTypeContext isType() {
		IsTypeContext _localctx = new IsTypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_isType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 942; base_type();
			State = 947;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 945;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPEN_BRACKET:
						{
						State = 943; rank_specifier();
						}
						break;
					case STAR:
						{
						State = 944; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 949;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			State = 951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 950; Match(INTERR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		public Anonymous_function_signatureContext anonymous_function_signature() {
			return GetRuleContext<Anonymous_function_signatureContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public Anonymous_function_bodyContext anonymous_function_body() {
			return GetRuleContext<Anonymous_function_bodyContext>(0);
		}
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 953; Match(ASYNC);
				}
				break;
			}
			State = 956; anonymous_function_signature();
			State = 957; right_arrow();
			State = 958; anonymous_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_signatureContext anonymous_function_signature() {
		Anonymous_function_signatureContext _localctx = new Anonymous_function_signatureContext(Context, State);
		EnterRule(_localctx, 100, RULE_anonymous_function_signature);
		try {
			State = 971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 960; Match(OPEN_PARENS);
				State = 961; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 962; Match(OPEN_PARENS);
				State = 963; explicit_anonymous_function_parameter_list();
				State = 964; Match(CLOSE_PARENS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 966; Match(OPEN_PARENS);
				State = 967; implicit_anonymous_function_parameter_list();
				State = 968; Match(CLOSE_PARENS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 970; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public Explicit_anonymous_function_parameterContext[] explicit_anonymous_function_parameter() {
			return GetRuleContexts<Explicit_anonymous_function_parameterContext>();
		}
		public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Explicit_anonymous_function_parameterContext>(i);
		}
		public Explicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
		Explicit_anonymous_function_parameter_listContext _localctx = new Explicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 102, RULE_explicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973; explicit_anonymous_function_parameter();
			State = 978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 974; Match(COMMA);
				State = 975; explicit_anonymous_function_parameter();
				}
				}
				State = 980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameterContext : ParserRuleContext {
		public IToken refout;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public Explicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter() {
		Explicit_anonymous_function_parameterContext _localctx = new Explicit_anonymous_function_parameterContext(Context, State);
		EnterRule(_localctx, 104, RULE_explicit_anonymous_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT || _la==REF) {
				{
				State = 981;
				_localctx.refout = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OUT || _la==REF) ) {
					_localctx.refout = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 984; type();
			State = 985; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Implicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
		Implicit_anonymous_function_parameter_listContext _localctx = new Implicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 106, RULE_implicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987; identifier();
			State = 992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 988; Match(COMMA);
				State = 989; identifier();
				}
				}
				State = 994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_bodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Anonymous_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_bodyContext anonymous_function_body() {
		Anonymous_function_bodyContext _localctx = new Anonymous_function_bodyContext(Context, State);
		EnterRule(_localctx, 108, RULE_anonymous_function_body);
		try {
			State = 997;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 995; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 996; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_query_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 999; from_clause();
			State = 1000; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(CSharpParser.FROM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 112, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002; Match(FROM);
			State = 1004;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 1003; type();
				}
				break;
			}
			State = 1006; identifier();
			State = 1007; Match(IN);
			State = 1008; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_bodyContext : ParserRuleContext {
		public Select_or_group_clauseContext select_or_group_clause() {
			return GetRuleContext<Select_or_group_clauseContext>(0);
		}
		public Query_body_clauseContext[] query_body_clause() {
			return GetRuleContexts<Query_body_clauseContext>();
		}
		public Query_body_clauseContext query_body_clause(int i) {
			return GetRuleContext<Query_body_clauseContext>(i);
		}
		public Query_continuationContext query_continuation() {
			return GetRuleContext<Query_continuationContext>(0);
		}
		public Query_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_bodyContext query_body() {
		Query_bodyContext _localctx = new Query_bodyContext(Context, State);
		EnterRule(_localctx, 114, RULE_query_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (FROM - 47)) | (1L << (JOIN - 47)) | (1L << (LET - 47)) | (1L << (ORDERBY - 47)) | (1L << (WHERE - 47)))) != 0)) {
				{
				{
				State = 1010; query_body_clause();
				}
				}
				State = 1015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1016; select_or_group_clause();
			State = 1018;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 1017; query_continuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_body_clauseContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Let_clauseContext let_clause() {
			return GetRuleContext<Let_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Combined_join_clauseContext combined_join_clause() {
			return GetRuleContext<Combined_join_clauseContext>(0);
		}
		public Orderby_clauseContext orderby_clause() {
			return GetRuleContext<Orderby_clauseContext>(0);
		}
		public Query_body_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_body_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_body_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_body_clauseContext query_body_clause() {
		Query_body_clauseContext _localctx = new Query_body_clauseContext(Context, State);
		EnterRule(_localctx, 116, RULE_query_body_clause);
		try {
			State = 1025;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1020; from_clause();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1021; let_clause();
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1022; where_clause();
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1023; combined_join_clause();
				}
				break;
			case ORDERBY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1024; orderby_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_clauseContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(CSharpParser.LET, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Let_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLet_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLet_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_clauseContext let_clause() {
		Let_clauseContext _localctx = new Let_clauseContext(Context, State);
		EnterRule(_localctx, 118, RULE_let_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027; Match(LET);
			State = 1028; identifier();
			State = 1029; Match(ASSIGNMENT);
			State = 1030; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 120, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032; Match(WHERE);
			State = 1033; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Combined_join_clauseContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(CSharpParser.JOIN, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ON() { return GetToken(CSharpParser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CSharpParser.EQUALS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		public Combined_join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combined_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCombined_join_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCombined_join_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombined_join_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Combined_join_clauseContext combined_join_clause() {
		Combined_join_clauseContext _localctx = new Combined_join_clauseContext(Context, State);
		EnterRule(_localctx, 122, RULE_combined_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035; Match(JOIN);
			State = 1037;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 1036; type();
				}
				break;
			}
			State = 1039; identifier();
			State = 1040; Match(IN);
			State = 1041; expression();
			State = 1042; Match(ON);
			State = 1043; expression();
			State = 1044; Match(EQUALS);
			State = 1045; expression();
			State = 1048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 1046; Match(INTO);
				State = 1047; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_clauseContext : ParserRuleContext {
		public ITerminalNode ORDERBY() { return GetToken(CSharpParser.ORDERBY, 0); }
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOrderby_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOrderby_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_clauseContext orderby_clause() {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(Context, State);
		EnterRule(_localctx, 124, RULE_orderby_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1050; Match(ORDERBY);
			State = 1051; ordering();
			State = 1056;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1052; Match(COMMA);
				State = 1053; ordering();
				}
				}
				State = 1058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : ParserRuleContext {
		public IToken dir;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASCENDING() { return GetToken(CSharpParser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(CSharpParser.DESCENDING, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(Context, State);
		EnterRule(_localctx, 126, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059; expression();
			State = 1061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 1060;
				_localctx.dir = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.dir = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_group_clauseContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(CSharpParser.SELECT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GROUP() { return GetToken(CSharpParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(CSharpParser.BY, 0); }
		public Select_or_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_group_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSelect_or_group_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSelect_or_group_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_group_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_group_clauseContext select_or_group_clause() {
		Select_or_group_clauseContext _localctx = new Select_or_group_clauseContext(Context, State);
		EnterRule(_localctx, 128, RULE_select_or_group_clause);
		try {
			State = 1070;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1063; Match(SELECT);
				State = 1064; expression();
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1065; Match(GROUP);
				State = 1066; expression();
				State = 1067; Match(BY);
				State = 1068; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_continuationContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_continuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_continuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_continuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_continuation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_continuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_continuationContext query_continuation() {
		Query_continuationContext _localctx = new Query_continuationContext(Context, State);
		EnterRule(_localctx, 130, RULE_query_continuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072; Match(INTO);
			State = 1073; identifier();
			State = 1074; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public Local_constant_declarationContext local_constant_declaration() {
			return GetRuleContext<Local_constant_declarationContext>(0);
		}
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmbeddedStatementContext : StatementContext {
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public EmbeddedStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEmbeddedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEmbeddedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LabeledStatementContext : StatementContext {
		public Labeled_StatementContext labeled_Statement() {
			return GetRuleContext<Labeled_StatementContext>(0);
		}
		public LabeledStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_statement);
		try {
			State = 1084;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				_localctx = new LabeledStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1076; labeled_Statement();
				}
				break;
			case 2:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1079;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case UINT:
				case ULONG:
				case USHORT:
				case VAR:
				case VOID:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 1077; local_variable_declaration();
					}
					break;
				case CONST:
					{
					State = 1078; local_constant_declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1081; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new EmbeddedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1083; embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Labeled_StatementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Labeled_StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeled_Statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLabeled_Statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLabeled_Statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeled_Statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Labeled_StatementContext labeled_Statement() {
		Labeled_StatementContext _localctx = new Labeled_StatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_labeled_Statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086; identifier();
			State = 1087; Match(COLON);
			State = 1088; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(Context, State);
		EnterRule(_localctx, 136, RULE_embedded_statement);
		try {
			State = 1092;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1090; block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VAR:
			case WHEN:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1091; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_embedded_statementContext : ParserRuleContext {
		public Simple_embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_embedded_statement; } }
	 
		public Simple_embedded_statementContext() { }
		public virtual void CopyFrom(Simple_embedded_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyStatementContext : Simple_embedded_statementContext {
		public EmptyStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryStatementContext : Simple_embedded_statementContext {
		public ITerminalNode TRY() { return GetToken(CSharpParser.TRY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Catch_clausesContext catch_clauses() {
			return GetRuleContext<Catch_clausesContext>(0);
		}
		public Finally_clauseContext finally_clause() {
			return GetRuleContext<Finally_clauseContext>(0);
		}
		public TryStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckedStatementContext : Simple_embedded_statementContext {
		public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CheckedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCheckedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCheckedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : Simple_embedded_statementContext {
		public ITerminalNode THROW() { return GetToken(CSharpParser.THROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeStatementContext : Simple_embedded_statementContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UnsafeStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnsafeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnsafeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : Simple_embedded_statementContext {
		public ITerminalNode FOR() { return GetToken(CSharpParser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public For_initializerContext for_initializer() {
			return GetRuleContext<For_initializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_iteratorContext for_iterator() {
			return GetRuleContext<For_iteratorContext>(0);
		}
		public ForStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : Simple_embedded_statementContext {
		public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		public BreakStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : Simple_embedded_statementContext {
		public ITerminalNode IF() { return GetToken(CSharpParser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public If_bodyContext[] if_body() {
			return GetRuleContexts<If_bodyContext>();
		}
		public If_bodyContext if_body(int i) {
			return GetRuleContext<If_bodyContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(CSharpParser.ELSE, 0); }
		public IfStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : Simple_embedded_statementContext {
		public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GotoStatementContext : Simple_embedded_statementContext {
		public ITerminalNode GOTO() { return GetToken(CSharpParser.GOTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public GotoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SWITCH() { return GetToken(CSharpParser.SWITCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public SwitchStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FixedStatementContext : Simple_embedded_statementContext {
		public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
			return GetRuleContext<Fixed_pointer_declaratorsContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public FixedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : Simple_embedded_statementContext {
		public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public WhileStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoStatementContext : Simple_embedded_statementContext {
		public ITerminalNode DO() { return GetToken(CSharpParser.DO, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public DoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : Simple_embedded_statementContext {
		public ITerminalNode FOREACH() { return GetToken(CSharpParser.FOREACH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ForeachStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UncheckedStatementContext : Simple_embedded_statementContext {
		public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UncheckedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUncheckedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUncheckedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUncheckedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : Simple_embedded_statementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : Simple_embedded_statementContext {
		public ITerminalNode CONTINUE() { return GetToken(CSharpParser.CONTINUE, 0); }
		public ContinueStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingStatementContext : Simple_embedded_statementContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public Resource_acquisitionContext resource_acquisition() {
			return GetRuleContext<Resource_acquisitionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public UsingStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LockStatementContext : Simple_embedded_statementContext {
		public ITerminalNode LOCK() { return GetToken(CSharpParser.LOCK, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public LockStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YieldStatementContext : Simple_embedded_statementContext {
		public ITerminalNode YIELD() { return GetToken(CSharpParser.YIELD, 0); }
		public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		public YieldStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_embedded_statementContext simple_embedded_statement() {
		Simple_embedded_statementContext _localctx = new Simple_embedded_statementContext(Context, State);
		EnterRule(_localctx, 138, RULE_simple_embedded_statement);
		int _la;
		try {
			State = 1221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1094; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1095; expression();
				State = 1096; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1098; Match(IF);
				State = 1099; Match(OPEN_PARENS);
				State = 1100; expression();
				State = 1101; Match(CLOSE_PARENS);
				State = 1102; if_body();
				State = 1105;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 1103; Match(ELSE);
					State = 1104; if_body();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1107; Match(SWITCH);
				State = 1108; Match(OPEN_PARENS);
				State = 1109; expression();
				State = 1110; Match(CLOSE_PARENS);
				State = 1111; Match(OPEN_BRACE);
				State = 1115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 1112; switch_section();
					}
					}
					State = 1117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1118; Match(CLOSE_BRACE);
				}
				break;
			case 5:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1120; Match(WHILE);
				State = 1121; Match(OPEN_PARENS);
				State = 1122; expression();
				State = 1123; Match(CLOSE_PARENS);
				State = 1124; embedded_statement();
				}
				break;
			case 6:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1126; Match(DO);
				State = 1127; embedded_statement();
				State = 1128; Match(WHILE);
				State = 1129; Match(OPEN_PARENS);
				State = 1130; expression();
				State = 1131; Match(CLOSE_PARENS);
				State = 1132; Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1134; Match(FOR);
				State = 1135; Match(OPEN_PARENS);
				State = 1137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)))) != 0)) {
					{
					State = 1136; for_initializer();
					}
				}

				State = 1139; Match(SEMICOLON);
				State = 1141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)))) != 0)) {
					{
					State = 1140; expression();
					}
				}

				State = 1143; Match(SEMICOLON);
				State = 1145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)))) != 0)) {
					{
					State = 1144; for_iterator();
					}
				}

				State = 1147; Match(CLOSE_PARENS);
				State = 1148; embedded_statement();
				}
				break;
			case 8:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1149; Match(FOREACH);
				State = 1150; Match(OPEN_PARENS);
				State = 1151; local_variable_type();
				State = 1152; identifier();
				State = 1153; Match(IN);
				State = 1154; expression();
				State = 1155; Match(CLOSE_PARENS);
				State = 1156; embedded_statement();
				}
				break;
			case 9:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1158; Match(BREAK);
				State = 1159; Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1160; Match(CONTINUE);
				State = 1161; Match(SEMICOLON);
				}
				break;
			case 11:
				_localctx = new GotoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1162; Match(GOTO);
				State = 1167;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BY:
				case DESCENDING:
				case DYNAMIC:
				case EQUALS:
				case FROM:
				case GET:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case NAMEOF:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SELECT:
				case SET:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 1163; identifier();
					}
					break;
				case CASE:
					{
					State = 1164; Match(CASE);
					State = 1165; expression();
					}
					break;
				case DEFAULT:
					{
					State = 1166; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1169; Match(SEMICOLON);
				}
				break;
			case 12:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1170; Match(RETURN);
				State = 1172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)))) != 0)) {
					{
					State = 1171; expression();
					}
				}

				State = 1174; Match(SEMICOLON);
				}
				break;
			case 13:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1175; Match(THROW);
				State = 1177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)))) != 0)) {
					{
					State = 1176; expression();
					}
				}

				State = 1179; Match(SEMICOLON);
				}
				break;
			case 14:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1180; Match(TRY);
				State = 1181; block();
				State = 1187;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CATCH:
					{
					State = 1182; catch_clauses();
					State = 1184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FINALLY) {
						{
						State = 1183; finally_clause();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 1186; finally_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 15:
				_localctx = new CheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1189; Match(CHECKED);
				State = 1190; block();
				}
				break;
			case 16:
				_localctx = new UncheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1191; Match(UNCHECKED);
				State = 1192; block();
				}
				break;
			case 17:
				_localctx = new LockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1193; Match(LOCK);
				State = 1194; Match(OPEN_PARENS);
				State = 1195; expression();
				State = 1196; Match(CLOSE_PARENS);
				State = 1197; embedded_statement();
				}
				break;
			case 18:
				_localctx = new UsingStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1199; Match(USING);
				State = 1200; Match(OPEN_PARENS);
				State = 1201; resource_acquisition();
				State = 1202; Match(CLOSE_PARENS);
				State = 1203; embedded_statement();
				}
				break;
			case 19:
				_localctx = new YieldStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1205; Match(YIELD);
				State = 1209;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RETURN:
					{
					State = 1206; Match(RETURN);
					State = 1207; expression();
					}
					break;
				case BREAK:
					{
					State = 1208; Match(BREAK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1211; Match(SEMICOLON);
				}
				break;
			case 20:
				_localctx = new UnsafeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1212; Match(UNSAFE);
				State = 1213; block();
				}
				break;
			case 21:
				_localctx = new FixedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1214; Match(FIXED);
				State = 1215; Match(OPEN_PARENS);
				State = 1216; pointer_type();
				State = 1217; fixed_pointer_declarators();
				State = 1218; Match(CLOSE_PARENS);
				State = 1219; embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 140, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1223; Match(OPEN_BRACE);
			State = 1225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DO) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << FROM) | (1L << GET) | (1L << GOTO) | (1L << GROUP) | (1L << IF) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LOCK) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (RETURN - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (SWITCH - 65)) | (1L << (THIS - 65)) | (1L << (THROW - 65)) | (1L << (TRUE - 65)) | (1L << (TRY - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (USING - 65)) | (1L << (VAR - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (WHILE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_BRACE - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (SEMICOLON - 131)) | (1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				State = 1224; statement_list();
				}
			}

			State = 1227; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declarationContext : ParserRuleContext {
		public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		public Local_variable_declaratorContext[] local_variable_declarator() {
			return GetRuleContexts<Local_variable_declaratorContext>();
		}
		public Local_variable_declaratorContext local_variable_declarator(int i) {
			return GetRuleContext<Local_variable_declaratorContext>(i);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declarationContext local_variable_declaration() {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(Context, State);
		EnterRule(_localctx, 142, RULE_local_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1229; local_variable_type();
			State = 1230; local_variable_declarator();
			State = 1235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1231; Match(COMMA);
				State = 1232; local_variable_declarator();
				}
				}
				State = 1237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_typeContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(CSharpParser.VAR, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Local_variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_typeContext local_variable_type() {
		Local_variable_typeContext _localctx = new Local_variable_typeContext(Context, State);
		EnterRule(_localctx, 144, RULE_local_variable_type);
		try {
			State = 1240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1238; Match(VAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1239; type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Local_variable_initializerContext local_variable_initializer() {
			return GetRuleContext<Local_variable_initializerContext>(0);
		}
		public Local_variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorContext local_variable_declarator() {
		Local_variable_declaratorContext _localctx = new Local_variable_declaratorContext(Context, State);
		EnterRule(_localctx, 146, RULE_local_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1242; identifier();
			State = 1245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1243; Match(ASSIGNMENT);
				State = 1244; local_variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
			return GetRuleContext<Local_variable_initializer_unsafeContext>(0);
		}
		public Local_variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializerContext local_variable_initializer() {
		Local_variable_initializerContext _localctx = new Local_variable_initializerContext(Context, State);
		EnterRule(_localctx, 148, RULE_local_variable_initializer);
		try {
			State = 1250;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1247; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1248; array_initializer();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1249; local_variable_initializer_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_constant_declarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Local_constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_constant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_constant_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_constant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_constant_declarationContext local_constant_declaration() {
		Local_constant_declarationContext _localctx = new Local_constant_declarationContext(Context, State);
		EnterRule(_localctx, 150, RULE_local_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1252; Match(CONST);
			State = 1253; type();
			State = 1254; constant_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIf_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIf_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(Context, State);
		EnterRule(_localctx, 152, RULE_if_body);
		try {
			State = 1258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1256; block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VAR:
			case WHEN:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1257; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(Context, State);
		EnterRule(_localctx, 154, RULE_switch_section);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1260; switch_label();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1265; statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitch_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitch_label(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(Context, State);
		EnterRule(_localctx, 156, RULE_switch_label);
		try {
			State = 1273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1267; Match(CASE);
				State = 1268; expression();
				State = 1269; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1271; Match(DEFAULT);
				State = 1272; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 158, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1276;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1275; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initializerContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public For_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initializerContext for_initializer() {
		For_initializerContext _localctx = new For_initializerContext(Context, State);
		EnterRule(_localctx, 160, RULE_for_initializer);
		int _la;
		try {
			State = 1289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1280; local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1281; expression();
				State = 1286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1282; Match(COMMA);
					State = 1283; expression();
					}
					}
					State = 1288;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_iteratorContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public For_iteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_iterator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFor_iterator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFor_iterator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_iterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_iteratorContext for_iterator() {
		For_iteratorContext _localctx = new For_iteratorContext(Context, State);
		EnterRule(_localctx, 162, RULE_for_iterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1291; expression();
			State = 1296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1292; Match(COMMA);
				State = 1293; expression();
				}
				}
				State = 1298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_clausesContext : ParserRuleContext {
		public Specific_catch_clauseContext[] specific_catch_clause() {
			return GetRuleContexts<Specific_catch_clauseContext>();
		}
		public Specific_catch_clauseContext specific_catch_clause(int i) {
			return GetRuleContext<Specific_catch_clauseContext>(i);
		}
		public General_catch_clauseContext general_catch_clause() {
			return GetRuleContext<General_catch_clauseContext>(0);
		}
		public Catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCatch_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCatch_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_clausesContext catch_clauses() {
		Catch_clausesContext _localctx = new Catch_clausesContext(Context, State);
		EnterRule(_localctx, 164, RULE_catch_clauses);
		int _la;
		try {
			int _alt;
			State = 1310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1299; specific_catch_clause();
				State = 1303;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1300; specific_catch_clause();
						}
						} 
					}
					State = 1305;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
				}
				State = 1307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 1306; general_catch_clause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1309; general_catch_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public Specific_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clauseContext specific_catch_clause() {
		Specific_catch_clauseContext _localctx = new Specific_catch_clauseContext(Context, State);
		EnterRule(_localctx, 166, RULE_specific_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1312; Match(CATCH);
			State = 1313; Match(OPEN_PARENS);
			State = 1314; class_type();
			State = 1316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (VAR - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0)) {
				{
				State = 1315; identifier();
				}
			}

			State = 1318; Match(CLOSE_PARENS);
			State = 1320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1319; exception_filter();
				}
			}

			State = 1322; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public General_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGeneral_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGeneral_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_catch_clauseContext general_catch_clause() {
		General_catch_clauseContext _localctx = new General_catch_clauseContext(Context, State);
		EnterRule(_localctx, 168, RULE_general_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324; Match(CATCH);
			State = 1326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1325; exception_filter();
				}
			}

			State = 1328; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_filterContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(CSharpParser.WHEN, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Exception_filterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterException_filter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitException_filter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_filter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_filterContext exception_filter() {
		Exception_filterContext _localctx = new Exception_filterContext(Context, State);
		EnterRule(_localctx, 170, RULE_exception_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330; Match(WHEN);
			State = 1331; Match(OPEN_PARENS);
			State = 1332; expression();
			State = 1333; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_clauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(CSharpParser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFinally_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFinally_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_clauseContext finally_clause() {
		Finally_clauseContext _localctx = new Finally_clauseContext(Context, State);
		EnterRule(_localctx, 172, RULE_finally_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335; Match(FINALLY);
			State = 1336; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_acquisitionContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Resource_acquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_acquisition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterResource_acquisition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitResource_acquisition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource_acquisition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Resource_acquisitionContext resource_acquisition() {
		Resource_acquisitionContext _localctx = new Resource_acquisitionContext(Context, State);
		EnterRule(_localctx, 174, RULE_resource_acquisition);
		try {
			State = 1340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1338; local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1339; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		public Qualified_identifierContext qi;
		public ITerminalNode NAMESPACE() { return GetToken(CSharpParser.NAMESPACE, 0); }
		public Namespace_bodyContext namespace_body() {
			return GetRuleContext<Namespace_bodyContext>(0);
		}
		public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(Context, State);
		EnterRule(_localctx, 176, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342; Match(NAMESPACE);
			State = 1343; _localctx.qi = qualified_identifier();
			State = 1344; namespace_body();
			State = 1346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 1345; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_identifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQualified_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQualified_identifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_identifierContext qualified_identifier() {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(Context, State);
		EnterRule(_localctx, 178, RULE_qualified_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1348; identifier();
			State = 1353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1349; Match(DOT);
				State = 1350; identifier();
				}
				}
				State = 1355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Namespace_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_bodyContext namespace_body() {
		Namespace_bodyContext _localctx = new Namespace_bodyContext(Context, State);
		EnterRule(_localctx, 180, RULE_namespace_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1356; Match(OPEN_BRACE);
			State = 1358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				{
				State = 1357; extern_alias_directives();
				}
				break;
			}
			State = 1361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 1360; using_directives();
				}
			}

			State = 1364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0)) {
				{
				State = 1363; namespace_member_declarations();
				}
			}

			State = 1366; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directivesContext : ParserRuleContext {
		public Extern_alias_directiveContext[] extern_alias_directive() {
			return GetRuleContexts<Extern_alias_directiveContext>();
		}
		public Extern_alias_directiveContext extern_alias_directive(int i) {
			return GetRuleContext<Extern_alias_directiveContext>(i);
		}
		public Extern_alias_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directivesContext extern_alias_directives() {
		Extern_alias_directivesContext _localctx = new Extern_alias_directivesContext(Context, State);
		EnterRule(_localctx, 182, RULE_extern_alias_directives);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1369;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1368; extern_alias_directive();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1371;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directiveContext : ParserRuleContext {
		public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		public ITerminalNode ALIAS() { return GetToken(CSharpParser.ALIAS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Extern_alias_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directiveContext extern_alias_directive() {
		Extern_alias_directiveContext _localctx = new Extern_alias_directiveContext(Context, State);
		EnterRule(_localctx, 184, RULE_extern_alias_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1373; Match(EXTERN);
			State = 1374; Match(ALIAS);
			State = 1375; identifier();
			State = 1376; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directivesContext : ParserRuleContext {
		public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		public Using_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsing_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsing_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directivesContext using_directives() {
		Using_directivesContext _localctx = new Using_directivesContext(Context, State);
		EnterRule(_localctx, 186, RULE_using_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1378; using_directive();
				}
				}
				State = 1381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==USING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directiveContext : ParserRuleContext {
		public Using_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directive; } }
	 
		public Using_directiveContext() { }
		public virtual void CopyFrom(Using_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingAliasDirectiveContext : Using_directiveContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public UsingAliasDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingAliasDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingAliasDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingAliasDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingNamespaceDirectiveContext : Using_directiveContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public UsingNamespaceDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingNamespaceDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingNamespaceDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingStaticDirectiveContext : Using_directiveContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public UsingStaticDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingStaticDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingStaticDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStaticDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directiveContext using_directive() {
		Using_directiveContext _localctx = new Using_directiveContext(Context, State);
		EnterRule(_localctx, 188, RULE_using_directive);
		try {
			State = 1398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				_localctx = new UsingAliasDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1383; Match(USING);
				State = 1384; identifier();
				State = 1385; Match(ASSIGNMENT);
				State = 1386; namespace_or_type_name();
				State = 1387; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new UsingNamespaceDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1389; Match(USING);
				State = 1390; namespace_or_type_name();
				State = 1391; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new UsingStaticDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1393; Match(USING);
				State = 1394; Match(STATIC);
				State = 1395; namespace_or_type_name();
				State = 1396; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationsContext : ParserRuleContext {
		public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationsContext namespace_member_declarations() {
		Namespace_member_declarationsContext _localctx = new Namespace_member_declarationsContext(Context, State);
		EnterRule(_localctx, 190, RULE_namespace_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1400; namespace_member_declaration();
				}
				}
				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(Context, State);
		EnterRule(_localctx, 192, RULE_namespace_member_declaration);
		try {
			State = 1407;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1405; namespace_declaration();
				}
				break;
			case ABSTRACT:
			case ASYNC:
			case CLASS:
			case DELEGATE:
			case ENUM:
			case EXTERN:
			case INTERFACE:
			case INTERNAL:
			case NEW:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case SEALED:
			case STATIC:
			case STRUCT:
			case UNSAFE:
			case VIRTUAL:
			case VOLATILE:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1406; type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 194, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1409; attributes();
				}
			}

			State = 1413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOLATILE - 65)))) != 0)) {
				{
				State = 1412; all_member_modifiers();
				}
			}

			State = 1420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 1415; class_definition();
				}
				break;
			case STRUCT:
				{
				State = 1416; struct_definition();
				}
				break;
			case INTERFACE:
				{
				State = 1417; interface_definition();
				}
				break;
			case ENUM:
				{
				State = 1418; enum_definition();
				}
				break;
			case DELEGATE:
				{
				State = 1419; delegate_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_alias_memberContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Qualified_alias_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_alias_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQualified_alias_member(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQualified_alias_member(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_alias_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_alias_memberContext qualified_alias_member() {
		Qualified_alias_memberContext _localctx = new Qualified_alias_memberContext(Context, State);
		EnterRule(_localctx, 196, RULE_qualified_alias_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1422; identifier();
			State = 1423; Match(DOUBLE_COLON);
			State = 1424; identifier();
			State = 1426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1425; type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 198, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428; Match(LT);
			State = 1429; type_parameter();
			State = 1434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1430; Match(COMMA);
				State = 1431; type_parameter();
				}
				}
				State = 1436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1437; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 200, RULE_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1439; attributes();
				}
			}

			State = 1442; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_baseContext : ParserRuleContext {
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		public Class_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_baseContext class_base() {
		Class_baseContext _localctx = new Class_baseContext(Context, State);
		EnterRule(_localctx, 202, RULE_class_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1444; Match(COLON);
			State = 1445; class_type();
			State = 1450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1446; Match(COMMA);
				State = 1447; namespace_or_type_name();
				}
				}
				State = 1452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_listContext : ParserRuleContext {
		public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		public Interface_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_type_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_type_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_type_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_listContext interface_type_list() {
		Interface_type_listContext _localctx = new Interface_type_listContext(Context, State);
		EnterRule(_localctx, 204, RULE_interface_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1453; namespace_or_type_name();
			State = 1458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1454; Match(COMMA);
				State = 1455; namespace_or_type_name();
				}
				}
				State = 1460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clausesContext : ParserRuleContext {
		public Type_parameter_constraints_clauseContext[] type_parameter_constraints_clause() {
			return GetRuleContexts<Type_parameter_constraints_clauseContext>();
		}
		public Type_parameter_constraints_clauseContext type_parameter_constraints_clause(int i) {
			return GetRuleContext<Type_parameter_constraints_clauseContext>(i);
		}
		public Type_parameter_constraints_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
		Type_parameter_constraints_clausesContext _localctx = new Type_parameter_constraints_clausesContext(Context, State);
		EnterRule(_localctx, 206, RULE_type_parameter_constraints_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1461; type_parameter_constraints_clause();
				}
				}
				State = 1464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHERE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_parameter_constraintsContext type_parameter_constraints() {
			return GetRuleContext<Type_parameter_constraintsContext>(0);
		}
		public Type_parameter_constraints_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clauseContext type_parameter_constraints_clause() {
		Type_parameter_constraints_clauseContext _localctx = new Type_parameter_constraints_clauseContext(Context, State);
		EnterRule(_localctx, 208, RULE_type_parameter_constraints_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466; Match(WHERE);
			State = 1467; identifier();
			State = 1468; Match(COLON);
			State = 1469; type_parameter_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraintsContext : ParserRuleContext {
		public Constructor_constraintContext constructor_constraint() {
			return GetRuleContext<Constructor_constraintContext>(0);
		}
		public Primary_constraintContext primary_constraint() {
			return GetRuleContext<Primary_constraintContext>(0);
		}
		public Secondary_constraintsContext secondary_constraints() {
			return GetRuleContext<Secondary_constraintsContext>(0);
		}
		public Type_parameter_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraintsContext type_parameter_constraints() {
		Type_parameter_constraintsContext _localctx = new Type_parameter_constraintsContext(Context, State);
		EnterRule(_localctx, 210, RULE_type_parameter_constraints);
		int _la;
		try {
			State = 1481;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1471; constructor_constraint();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case CLASS:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case STRUCT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1472; primary_constraint();
				State = 1475;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
				case 1:
					{
					State = 1473; Match(COMMA);
					State = 1474; secondary_constraints();
					}
					break;
				}
				State = 1479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1477; Match(COMMA);
					State = 1478; constructor_constraint();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_constraintContext : ParserRuleContext {
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		public Primary_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPrimary_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPrimary_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_constraintContext primary_constraint() {
		Primary_constraintContext _localctx = new Primary_constraintContext(Context, State);
		EnterRule(_localctx, 212, RULE_primary_constraint);
		try {
			State = 1486;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1483; class_type();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1484; Match(CLASS);
				}
				break;
			case STRUCT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1485; Match(STRUCT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_constraintsContext : ParserRuleContext {
		public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		public Secondary_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSecondary_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSecondary_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondary_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_constraintsContext secondary_constraints() {
		Secondary_constraintsContext _localctx = new Secondary_constraintsContext(Context, State);
		EnterRule(_localctx, 214, RULE_secondary_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488; namespace_or_type_name();
			State = 1493;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1489; Match(COMMA);
					State = 1490; namespace_or_type_name();
					}
					} 
				}
				State = 1495;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_constraintContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Constructor_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructor_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructor_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_constraintContext constructor_constraint() {
		Constructor_constraintContext _localctx = new Constructor_constraintContext(Context, State);
		EnterRule(_localctx, 216, RULE_constructor_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1496; Match(NEW);
			State = 1497; Match(OPEN_PARENS);
			State = 1498; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Class_member_declarationsContext class_member_declarations() {
			return GetRuleContext<Class_member_declarationsContext>(0);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 218, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1500; Match(OPEN_BRACE);
			State = 1502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE) {
				{
				State = 1501; class_member_declarations();
				}
			}

			State = 1504; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationsContext : ParserRuleContext {
		public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationsContext class_member_declarations() {
		Class_member_declarationsContext _localctx = new Class_member_declarationsContext(Context, State);
		EnterRule(_localctx, 220, RULE_class_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1506; class_member_declaration();
				}
				}
				State = 1509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public Destructor_definitionContext destructor_definition() {
			return GetRuleContext<Destructor_definitionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(Context, State);
		EnterRule(_localctx, 222, RULE_class_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1511; attributes();
				}
			}

			State = 1515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1514; all_member_modifiers();
				}
				break;
			}
			State = 1519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case USHORT:
			case VAR:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 1517; common_member_declaration();
				}
				break;
			case TILDE:
				{
				State = 1518; destructor_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifiersContext : ParserRuleContext {
		public All_member_modifierContext[] all_member_modifier() {
			return GetRuleContexts<All_member_modifierContext>();
		}
		public All_member_modifierContext all_member_modifier(int i) {
			return GetRuleContext<All_member_modifierContext>(i);
		}
		public All_member_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifiersContext all_member_modifiers() {
		All_member_modifiersContext _localctx = new All_member_modifiersContext(Context, State);
		EnterRule(_localctx, 224, RULE_all_member_modifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1521; all_member_modifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharpParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharpParser.VOLATILE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharpParser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharpParser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharpParser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharpParser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		public ITerminalNode PARTIAL() { return GetToken(CSharpParser.PARTIAL, 0); }
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public All_member_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifierContext all_member_modifier() {
		All_member_modifierContext _localctx = new All_member_modifierContext(Context, State);
		EnterRule(_localctx, 226, RULE_all_member_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1526;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOLATILE - 65)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_member_declarationContext : ParserRuleContext {
		public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		public Typed_member_declarationContext typed_member_declaration() {
			return GetRuleContext<Typed_member_declarationContext>(0);
		}
		public Event_declarationContext event_declaration() {
			return GetRuleContext<Event_declarationContext>(0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return GetRuleContext<Constructor_declarationContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public Common_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCommon_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCommon_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_member_declarationContext common_member_declaration() {
		Common_member_declarationContext _localctx = new Common_member_declarationContext(Context, State);
		EnterRule(_localctx, 228, RULE_common_member_declaration);
		try {
			State = 1547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1528; constant_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1529; typed_member_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1530; event_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1531; conversion_operator_declarator();
				State = 1537;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_BRACE:
				case SEMICOLON:
					{
					State = 1532; body();
					}
					break;
				case ASSIGNMENT:
					{
					State = 1533; right_arrow();
					State = 1534; expression();
					State = 1535; Match(SEMICOLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1539; constructor_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1540; Match(VOID);
				State = 1541; method_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1542; class_definition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1543; struct_definition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1544; interface_definition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1545; enum_definition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1546; delegate_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_member_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Indexer_declarationContext indexer_declaration() {
			return GetRuleContext<Indexer_declarationContext>(0);
		}
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Property_declarationContext property_declaration() {
			return GetRuleContext<Property_declarationContext>(0);
		}
		public Operator_declarationContext operator_declaration() {
			return GetRuleContext<Operator_declarationContext>(0);
		}
		public Field_declarationContext field_declaration() {
			return GetRuleContext<Field_declarationContext>(0);
		}
		public Typed_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTyped_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTyped_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_member_declarationContext typed_member_declaration() {
		Typed_member_declarationContext _localctx = new Typed_member_declarationContext(Context, State);
		EnterRule(_localctx, 230, RULE_typed_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549; type();
			State = 1559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				{
				State = 1550; namespace_or_type_name();
				State = 1551; Match(DOT);
				State = 1552; indexer_declaration();
				}
				break;
			case 2:
				{
				State = 1554; method_declaration();
				}
				break;
			case 3:
				{
				State = 1555; property_declaration();
				}
				break;
			case 4:
				{
				State = 1556; indexer_declaration();
				}
				break;
			case 5:
				{
				State = 1557; operator_declaration();
				}
				break;
			case 6:
				{
				State = 1558; field_declaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorsContext : ParserRuleContext {
		public Constant_declaratorContext[] constant_declarator() {
			return GetRuleContexts<Constant_declaratorContext>();
		}
		public Constant_declaratorContext constant_declarator(int i) {
			return GetRuleContext<Constant_declaratorContext>(i);
		}
		public Constant_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorsContext constant_declarators() {
		Constant_declaratorsContext _localctx = new Constant_declaratorsContext(Context, State);
		EnterRule(_localctx, 232, RULE_constant_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1561; constant_declarator();
			State = 1566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1562; Match(COMMA);
				State = 1563; constant_declarator();
				}
				}
				State = 1568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorContext constant_declarator() {
		Constant_declaratorContext _localctx = new Constant_declaratorContext(Context, State);
		EnterRule(_localctx, 234, RULE_constant_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1569; identifier();
			State = 1570; Match(ASSIGNMENT);
			State = 1571; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorsContext : ParserRuleContext {
		public Variable_declaratorContext[] variable_declarator() {
			return GetRuleContexts<Variable_declaratorContext>();
		}
		public Variable_declaratorContext variable_declarator(int i) {
			return GetRuleContext<Variable_declaratorContext>(i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorsContext variable_declarators() {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(Context, State);
		EnterRule(_localctx, 236, RULE_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1573; variable_declarator();
			State = 1578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1574; Match(COMMA);
				State = 1575; variable_declarator();
				}
				}
				State = 1580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorContext variable_declarator() {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(Context, State);
		EnterRule(_localctx, 238, RULE_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581; identifier();
			State = 1584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1582; Match(ASSIGNMENT);
				State = 1583; variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 240, RULE_variable_initializer);
		try {
			State = 1588;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1586; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1587; array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 242, RULE_return_type);
		try {
			State = 1592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1590; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1591; Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(Context, State);
		EnterRule(_localctx, 244, RULE_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1594; namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(Context, State);
		EnterRule(_localctx, 246, RULE_method_body);
		try {
			State = 1598;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1596; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1597; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		public Parameter_arrayContext parameter_array() {
			return GetRuleContext<Parameter_arrayContext>(0);
		}
		public Fixed_parametersContext fixed_parameters() {
			return GetRuleContext<Fixed_parametersContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, State);
		EnterRule(_localctx, 248, RULE_formal_parameter_list);
		int _la;
		try {
			State = 1606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1600; parameter_array();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1601; fixed_parameters();
				State = 1604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1602; Match(COMMA);
					State = 1603; parameter_array();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parametersContext : ParserRuleContext {
		public Fixed_parameterContext[] fixed_parameter() {
			return GetRuleContexts<Fixed_parameterContext>();
		}
		public Fixed_parameterContext fixed_parameter(int i) {
			return GetRuleContext<Fixed_parameterContext>(i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parametersContext fixed_parameters() {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(Context, State);
		EnterRule(_localctx, 250, RULE_fixed_parameters);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1608; fixed_parameter();
			State = 1613;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1609; Match(COMMA);
					State = 1610; fixed_parameter();
					}
					} 
				}
				State = 1615;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parameterContext : ParserRuleContext {
		public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		public ITerminalNode ARGLIST() { return GetToken(CSharpParser.ARGLIST, 0); }
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parameterContext fixed_parameter() {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(Context, State);
		EnterRule(_localctx, 252, RULE_fixed_parameter);
		int _la;
		try {
			State = 1624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 1616; attributes();
					}
				}

				State = 1620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (OUT - 71)) | (1L << (REF - 71)) | (1L << (THIS - 71)))) != 0)) {
					{
					State = 1619; parameter_modifier();
					}
				}

				State = 1622; arg_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1623; Match(ARGLIST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 254, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (OUT - 71)) | (1L << (REF - 71)) | (1L << (THIS - 71)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_arrayContext : ParserRuleContext {
		public ITerminalNode PARAMS() { return GetToken(CSharpParser.PARAMS, 0); }
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParameter_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParameter_array(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_arrayContext parameter_array() {
		Parameter_arrayContext _localctx = new Parameter_arrayContext(Context, State);
		EnterRule(_localctx, 256, RULE_parameter_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1628; attributes();
				}
			}

			State = 1631; Match(PARAMS);
			State = 1632; array_type();
			State = 1633; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_declarationsContext : ParserRuleContext {
		public AttributesContext attrs;
		public Accessor_modifierContext mods;
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext set_accessor_declaration() {
			return GetRuleContext<Set_accessor_declarationContext>(0);
		}
		public Get_accessor_declarationContext get_accessor_declaration() {
			return GetRuleContext<Get_accessor_declarationContext>(0);
		}
		public Accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_declarationsContext accessor_declarations() {
		Accessor_declarationsContext _localctx = new Accessor_declarationsContext(Context, State);
		EnterRule(_localctx, 258, RULE_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1635; _localctx.attrs = attributes();
				}
			}

			State = 1639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (INTERNAL - 56)) | (1L << (PRIVATE - 56)) | (1L << (PROTECTED - 56)))) != 0)) {
				{
				State = 1638; _localctx.mods = accessor_modifier();
				}
			}

			State = 1651;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
				{
				State = 1641; Match(GET);
				State = 1642; accessor_body();
				State = 1644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTERNAL || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PRIVATE - 75)) | (1L << (PROTECTED - 75)) | (1L << (SET - 75)) | (1L << (OPEN_BRACKET - 75)))) != 0)) {
					{
					State = 1643; set_accessor_declaration();
					}
				}

				}
				break;
			case SET:
				{
				State = 1646; Match(SET);
				State = 1647; accessor_body();
				State = 1649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GET || _la==INTERNAL || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PRIVATE - 75)) | (1L << (PROTECTED - 75)) | (1L << (OPEN_BRACKET - 75)))) != 0)) {
					{
					State = 1648; get_accessor_declaration();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_accessor_declarationContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Get_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGet_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_accessor_declarationContext get_accessor_declaration() {
		Get_accessor_declarationContext _localctx = new Get_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 260, RULE_get_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1653; attributes();
				}
			}

			State = 1657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (INTERNAL - 56)) | (1L << (PRIVATE - 56)) | (1L << (PROTECTED - 56)))) != 0)) {
				{
				State = 1656; accessor_modifier();
				}
			}

			State = 1659; Match(GET);
			State = 1660; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_accessor_declarationContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSet_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_accessor_declarationContext set_accessor_declaration() {
		Set_accessor_declarationContext _localctx = new Set_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 262, RULE_set_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1662; attributes();
				}
			}

			State = 1666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (INTERNAL - 56)) | (1L << (PRIVATE - 56)) | (1L << (PROTECTED - 56)))) != 0)) {
				{
				State = 1665; accessor_modifier();
				}
			}

			State = 1668; Match(SET);
			State = 1669; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_modifierContext : ParserRuleContext {
		public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		public Accessor_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_modifierContext accessor_modifier() {
		Accessor_modifierContext _localctx = new Accessor_modifierContext(Context, State);
		EnterRule(_localctx, 264, RULE_accessor_modifier);
		try {
			State = 1678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1671; Match(PROTECTED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1672; Match(INTERNAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1673; Match(PRIVATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1674; Match(PROTECTED);
				State = 1675; Match(INTERNAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1676; Match(INTERNAL);
				State = 1677; Match(PROTECTED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Accessor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_bodyContext accessor_body() {
		Accessor_bodyContext _localctx = new Accessor_bodyContext(Context, State);
		EnterRule(_localctx, 266, RULE_accessor_body);
		try {
			State = 1682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1680; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1681; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_accessor_declarationsContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Remove_accessor_declarationContext remove_accessor_declaration() {
			return GetRuleContext<Remove_accessor_declarationContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		public Add_accessor_declarationContext add_accessor_declaration() {
			return GetRuleContext<Add_accessor_declarationContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Event_accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEvent_accessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEvent_accessor_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_accessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_accessor_declarationsContext event_accessor_declarations() {
		Event_accessor_declarationsContext _localctx = new Event_accessor_declarationsContext(Context, State);
		EnterRule(_localctx, 268, RULE_event_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1684; attributes();
				}
			}

			State = 1695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				{
				State = 1687; Match(ADD);
				State = 1688; block();
				State = 1689; remove_accessor_declaration();
				}
				break;
			case REMOVE:
				{
				State = 1691; Match(REMOVE);
				State = 1692; block();
				State = 1693; add_accessor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_accessor_declarationContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Add_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAdd_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAdd_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_accessor_declarationContext add_accessor_declaration() {
		Add_accessor_declarationContext _localctx = new Add_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 270, RULE_add_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1697; attributes();
				}
			}

			State = 1700; Match(ADD);
			State = 1701; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_accessor_declarationContext : ParserRuleContext {
		public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Remove_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRemove_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRemove_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Remove_accessor_declarationContext remove_accessor_declaration() {
		Remove_accessor_declarationContext _localctx = new Remove_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 272, RULE_remove_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1703; attributes();
				}
			}

			State = 1706; Match(REMOVE);
			State = 1707; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_operatorContext : ParserRuleContext {
		public ITerminalNode BANG() { return GetToken(CSharpParser.BANG, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		public ITerminalNode OP_EQ() { return GetToken(CSharpParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(CSharpParser.OP_NE, 0); }
		public Overloadable_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOverloadable_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOverloadable_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadable_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_operatorContext overloadable_operator() {
		Overloadable_operatorContext _localctx = new Overloadable_operatorContext(Context, State);
		EnterRule(_localctx, 274, RULE_overloadable_operator);
		try {
			State = 1731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1709; Match(PLUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1710; Match(MINUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1711; Match(BANG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1712; Match(TILDE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1713; Match(OP_INC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1714; Match(OP_DEC);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1715; Match(TRUE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1716; Match(FALSE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1717; Match(STAR);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1718; Match(DIV);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1719; Match(PERCENT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1720; Match(AMP);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1721; Match(BITWISE_OR);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1722; Match(CARET);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1723; Match(OP_LEFT_SHIFT);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1724; right_shift();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1725; Match(OP_EQ);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1726; Match(OP_NE);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1727; Match(GT);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1728; Match(LT);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1729; Match(OP_GE);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1730; Match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversion_operator_declaratorContext : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(CSharpParser.IMPLICIT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharpParser.EXPLICIT, 0); }
		public Conversion_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConversion_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConversion_operator_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion_operator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conversion_operator_declaratorContext conversion_operator_declarator() {
		Conversion_operator_declaratorContext _localctx = new Conversion_operator_declaratorContext(Context, State);
		EnterRule(_localctx, 276, RULE_conversion_operator_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733;
			_la = TokenStream.LA(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1734; Match(OPERATOR);
			State = 1735; type();
			State = 1736; Match(OPEN_PARENS);
			State = 1737; arg_declaration();
			State = 1738; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Constructor_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_initializerContext constructor_initializer() {
		Constructor_initializerContext _localctx = new Constructor_initializerContext(Context, State);
		EnterRule(_localctx, 278, RULE_constructor_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1740; Match(COLON);
			State = 1741;
			_la = TokenStream.LA(1);
			if ( !(_la==BASE || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1742; Match(OPEN_PARENS);
			State = 1744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)))) != 0)) {
				{
				State = 1743; argument_list();
				}
			}

			State = 1746; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 280, RULE_body);
		try {
			State = 1750;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1748; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1749; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_interfacesContext : ParserRuleContext {
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Struct_interfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_interfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_interfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_interfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_interfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_interfacesContext struct_interfaces() {
		Struct_interfacesContext _localctx = new Struct_interfacesContext(Context, State);
		EnterRule(_localctx, 282, RULE_struct_interfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1752; Match(COLON);
			State = 1753; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Struct_member_declarationContext[] struct_member_declaration() {
			return GetRuleContexts<Struct_member_declarationContext>();
		}
		public Struct_member_declarationContext struct_member_declaration(int i) {
			return GetRuleContext<Struct_member_declarationContext>(i);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(Context, State);
		EnterRule(_localctx, 284, RULE_struct_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755; Match(OPEN_BRACE);
			State = 1759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				{
				State = 1756; struct_member_declaration();
				}
				}
				State = 1761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1762; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declarationContext : ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Fixed_size_buffer_declaratorContext[] fixed_size_buffer_declarator() {
			return GetRuleContexts<Fixed_size_buffer_declaratorContext>();
		}
		public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator(int i) {
			return GetRuleContext<Fixed_size_buffer_declaratorContext>(i);
		}
		public Struct_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declarationContext struct_member_declaration() {
		Struct_member_declarationContext _localctx = new Struct_member_declarationContext(Context, State);
		EnterRule(_localctx, 286, RULE_struct_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1764; attributes();
				}
			}

			State = 1768;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 1767; all_member_modifiers();
				}
				break;
			}
			State = 1780;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case USHORT:
			case VAR:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 1770; common_member_declaration();
				}
				break;
			case FIXED:
				{
				State = 1771; Match(FIXED);
				State = 1772; type();
				State = 1774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1773; fixed_size_buffer_declarator();
					}
					}
					State = 1776;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (VAR - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0) );
				State = 1778; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 288, RULE_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782; base_type();
			State = 1790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 1783;
					_la = TokenStream.LA(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1788;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1789; rank_specifier();
				}
				}
				State = 1792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (OPEN_BRACKET - 124)) | (1L << (STAR - 124)) | (1L << (INTERR - 124)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifierContext : ParserRuleContext {
		public Rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRank_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRank_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRank_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifierContext rank_specifier() {
		Rank_specifierContext _localctx = new Rank_specifierContext(Context, State);
		EnterRule(_localctx, 290, RULE_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1794; Match(OPEN_BRACKET);
			State = 1798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1795; Match(COMMA);
				}
				}
				State = 1800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1801; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Variable_initializerContext[] variable_initializer() {
			return GetRuleContexts<Variable_initializerContext>();
		}
		public Variable_initializerContext variable_initializer(int i) {
			return GetRuleContext<Variable_initializerContext>(i);
		}
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArray_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArray_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(Context, State);
		EnterRule(_localctx, 292, RULE_array_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1803; Match(OPEN_BRACE);
			State = 1815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_BRACE - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)))) != 0)) {
				{
				State = 1804; variable_initializer();
				State = 1809;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1805; Match(COMMA);
						State = 1806; variable_initializer();
						}
						} 
					}
					State = 1811;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
				}
				State = 1813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1812; Match(COMMA);
					}
				}

				}
			}

			State = 1817; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameter_listContext : ParserRuleContext {
		public Variant_type_parameterContext[] variant_type_parameter() {
			return GetRuleContexts<Variant_type_parameterContext>();
		}
		public Variant_type_parameterContext variant_type_parameter(int i) {
			return GetRuleContext<Variant_type_parameterContext>(i);
		}
		public Variant_type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameter_listContext variant_type_parameter_list() {
		Variant_type_parameter_listContext _localctx = new Variant_type_parameter_listContext(Context, State);
		EnterRule(_localctx, 294, RULE_variant_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1819; Match(LT);
			State = 1820; variant_type_parameter();
			State = 1825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1821; Match(COMMA);
				State = 1822; variant_type_parameter();
				}
				}
				State = 1827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1828; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Variance_annotationContext variance_annotation() {
			return GetRuleContext<Variance_annotationContext>(0);
		}
		public Variant_type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameterContext variant_type_parameter() {
		Variant_type_parameterContext _localctx = new Variant_type_parameterContext(Context, State);
		EnterRule(_localctx, 296, RULE_variant_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1830; attributes();
				}
			}

			State = 1834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN || _la==OUT) {
				{
				State = 1833; variance_annotation();
				}
			}

			State = 1836; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variance_annotationContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public Variance_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variance_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariance_annotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariance_annotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariance_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variance_annotationContext variance_annotation() {
		Variance_annotationContext _localctx = new Variance_annotationContext(Context, State);
		EnterRule(_localctx, 298, RULE_variance_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1838;
			_la = TokenStream.LA(1);
			if ( !(_la==IN || _la==OUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_baseContext : ParserRuleContext {
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Interface_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_baseContext interface_base() {
		Interface_baseContext _localctx = new Interface_baseContext(Context, State);
		EnterRule(_localctx, 300, RULE_interface_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840; Match(COLON);
			State = 1841; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Interface_member_declarationContext[] interface_member_declaration() {
			return GetRuleContexts<Interface_member_declarationContext>();
		}
		public Interface_member_declarationContext interface_member_declaration(int i) {
			return GetRuleContext<Interface_member_declarationContext>(i);
		}
		public Interface_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_bodyContext interface_body() {
		Interface_bodyContext _localctx = new Interface_bodyContext(Context, State);
		EnterRule(_localctx, 302, RULE_interface_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1843; Match(OPEN_BRACE);
			State = 1847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << EVENT) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				{
				State = 1844; interface_member_declaration();
				}
				}
				State = 1849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1850; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationContext interface_member_declaration() {
		Interface_member_declarationContext _localctx = new Interface_member_declarationContext(Context, State);
		EnterRule(_localctx, 304, RULE_interface_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1852; attributes();
				}
			}

			State = 1856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEW) {
				{
				State = 1855; Match(NEW);
				}
			}

			State = 1914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
			case 1:
				{
				State = 1859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 1858; Match(UNSAFE);
					}
				}

				State = 1861; type();
				State = 1889;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
				case 1:
					{
					State = 1862; identifier();
					State = 1864;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 1863; type_parameter_list();
						}
					}

					State = 1866; Match(OPEN_PARENS);
					State = 1868;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
						{
						State = 1867; formal_parameter_list();
						}
					}

					State = 1870; Match(CLOSE_PARENS);
					State = 1872;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE) {
						{
						State = 1871; type_parameter_constraints_clauses();
						}
					}

					State = 1874; Match(SEMICOLON);
					}
					break;
				case 2:
					{
					State = 1876; identifier();
					State = 1877; Match(OPEN_BRACE);
					State = 1878; interface_accessors();
					State = 1879; Match(CLOSE_BRACE);
					}
					break;
				case 3:
					{
					State = 1881; Match(THIS);
					State = 1882; Match(OPEN_BRACKET);
					State = 1883; formal_parameter_list();
					State = 1884; Match(CLOSE_BRACKET);
					State = 1885; Match(OPEN_BRACE);
					State = 1886; interface_accessors();
					State = 1887; Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 1891; Match(UNSAFE);
					}
				}

				State = 1894; Match(VOID);
				State = 1895; identifier();
				State = 1897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1896; type_parameter_list();
					}
				}

				State = 1899; Match(OPEN_PARENS);
				State = 1901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
					{
					State = 1900; formal_parameter_list();
					}
				}

				State = 1903; Match(CLOSE_PARENS);
				State = 1905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 1904; type_parameter_constraints_clauses();
					}
				}

				State = 1907; Match(SEMICOLON);
				}
				break;
			case 3:
				{
				State = 1909; Match(EVENT);
				State = 1910; type();
				State = 1911; identifier();
				State = 1912; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_accessorsContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public Interface_accessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_accessors; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_accessors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_accessors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_accessors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_accessorsContext interface_accessors() {
		Interface_accessorsContext _localctx = new Interface_accessorsContext(Context, State);
		EnterRule(_localctx, 306, RULE_interface_accessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1916; attributes();
				}
			}

			State = 1937;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
				{
				State = 1919; Match(GET);
				State = 1920; Match(SEMICOLON);
				State = 1926;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SET || _la==OPEN_BRACKET) {
					{
					State = 1922;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 1921; attributes();
						}
					}

					State = 1924; Match(SET);
					State = 1925; Match(SEMICOLON);
					}
				}

				}
				break;
			case SET:
				{
				State = 1928; Match(SET);
				State = 1929; Match(SEMICOLON);
				State = 1935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GET || _la==OPEN_BRACKET) {
					{
					State = 1931;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 1930; attributes();
						}
					}

					State = 1933; Match(GET);
					State = 1934; Match(SEMICOLON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_baseContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Enum_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_baseContext enum_base() {
		Enum_baseContext _localctx = new Enum_baseContext(Context, State);
		EnterRule(_localctx, 308, RULE_enum_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1939; Match(COLON);
			State = 1940; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Enum_member_declarationContext[] enum_member_declaration() {
			return GetRuleContexts<Enum_member_declarationContext>();
		}
		public Enum_member_declarationContext enum_member_declaration(int i) {
			return GetRuleContext<Enum_member_declarationContext>(i);
		}
		public Enum_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_bodyContext enum_body() {
		Enum_bodyContext _localctx = new Enum_bodyContext(Context, State);
		EnterRule(_localctx, 310, RULE_enum_body);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942; Match(OPEN_BRACE);
			State = 1954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (VAR - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (OPEN_BRACKET - 68)))) != 0)) {
				{
				State = 1943; enum_member_declaration();
				State = 1948;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,229,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1944; Match(COMMA);
						State = 1945; enum_member_declaration();
						}
						} 
					}
					State = 1950;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,229,Context);
				}
				State = 1952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1951; Match(COMMA);
					}
				}

				}
			}

			State = 1956; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Enum_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationContext enum_member_declaration() {
		Enum_member_declarationContext _localctx = new Enum_member_declarationContext(Context, State);
		EnterRule(_localctx, 312, RULE_enum_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1959;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1958; attributes();
				}
			}

			State = 1961; identifier();
			State = 1964;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1962; Match(ASSIGNMENT);
				State = 1963; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionContext : ParserRuleContext {
		public Global_attribute_targetContext global_attribute_target() {
			return GetRuleContext<Global_attribute_targetContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Global_attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionContext global_attribute_section() {
		Global_attribute_sectionContext _localctx = new Global_attribute_sectionContext(Context, State);
		EnterRule(_localctx, 314, RULE_global_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1966; Match(OPEN_BRACKET);
			State = 1967; global_attribute_target();
			State = 1968; Match(COLON);
			State = 1969; attribute_list();
			State = 1971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1970; Match(COMMA);
				}
			}

			State = 1973; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Global_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_targetContext global_attribute_target() {
		Global_attribute_targetContext _localctx = new Global_attribute_targetContext(Context, State);
		EnterRule(_localctx, 316, RULE_global_attribute_target);
		try {
			State = 1977;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case AS:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1975; keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1976; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public Attribute_sectionContext[] attribute_section() {
			return GetRuleContexts<Attribute_sectionContext>();
		}
		public Attribute_sectionContext attribute_section(int i) {
			return GetRuleContext<Attribute_sectionContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 318, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1979; attribute_section();
				}
				}
				State = 1982;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionContext : ParserRuleContext {
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Attribute_targetContext attribute_target() {
			return GetRuleContext<Attribute_targetContext>(0);
		}
		public Attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionContext attribute_section() {
		Attribute_sectionContext _localctx = new Attribute_sectionContext(Context, State);
		EnterRule(_localctx, 320, RULE_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1984; Match(OPEN_BRACKET);
			State = 1988;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				{
				State = 1985; attribute_target();
				State = 1986; Match(COLON);
				}
				break;
			}
			State = 1990; attribute_list();
			State = 1992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1991; Match(COMMA);
				}
			}

			State = 1994; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_targetContext attribute_target() {
		Attribute_targetContext _localctx = new Attribute_targetContext(Context, State);
		EnterRule(_localctx, 322, RULE_attribute_target);
		try {
			State = 1998;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case AS:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1996; keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1997; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 324, RULE_attribute_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2000; attribute();
			State = 2005;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,240,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2001; Match(COMMA);
					State = 2002; attribute();
					}
					} 
				}
				State = 2007;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,240,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Attribute_argumentContext[] attribute_argument() {
			return GetRuleContexts<Attribute_argumentContext>();
		}
		public Attribute_argumentContext attribute_argument(int i) {
			return GetRuleContext<Attribute_argumentContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 326, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2008; namespace_or_type_name();
			State = 2021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PARENS) {
				{
				State = 2009; Match(OPEN_PARENS);
				State = 2018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)))) != 0)) {
					{
					State = 2010; attribute_argument();
					State = 2015;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2011; Match(COMMA);
						State = 2012; attribute_argument();
						}
						}
						State = 2017;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 2020; Match(CLOSE_PARENS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argumentContext attribute_argument() {
		Attribute_argumentContext _localctx = new Attribute_argumentContext(Context, State);
		EnterRule(_localctx, 328, RULE_attribute_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2026;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				{
				State = 2023; identifier();
				State = 2024; Match(COLON);
				}
				break;
			}
			State = 2028; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public Pointer_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPointer_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPointer_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_typeContext pointer_type() {
		Pointer_typeContext _localctx = new Pointer_typeContext(Context, State);
		EnterRule(_localctx, 330, RULE_pointer_type);
		int _la;
		try {
			State = 2045;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2032;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BOOL:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SBYTE:
				case SHORT:
				case UINT:
				case ULONG:
				case USHORT:
					{
					State = 2030; simple_type();
					}
					break;
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BY:
				case DESCENDING:
				case DYNAMIC:
				case EQUALS:
				case FROM:
				case GET:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SELECT:
				case SET:
				case STRING:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 2031; class_type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 2036;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPEN_BRACKET:
						{
						State = 2034; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 2035; Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2040;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2041; Match(STAR);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2043; Match(VOID);
				State = 2044; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorsContext : ParserRuleContext {
		public Fixed_pointer_declaratorContext[] fixed_pointer_declarator() {
			return GetRuleContexts<Fixed_pointer_declaratorContext>();
		}
		public Fixed_pointer_declaratorContext fixed_pointer_declarator(int i) {
			return GetRuleContext<Fixed_pointer_declaratorContext>(i);
		}
		public Fixed_pointer_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
		Fixed_pointer_declaratorsContext _localctx = new Fixed_pointer_declaratorsContext(Context, State);
		EnterRule(_localctx, 332, RULE_fixed_pointer_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2047; fixed_pointer_declarator();
			State = 2052;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2048; Match(COMMA);
				State = 2049; fixed_pointer_declarator();
				}
				}
				State = 2054;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Fixed_pointer_initializerContext fixed_pointer_initializer() {
			return GetRuleContext<Fixed_pointer_initializerContext>(0);
		}
		public Fixed_pointer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorContext fixed_pointer_declarator() {
		Fixed_pointer_declaratorContext _localctx = new Fixed_pointer_declaratorContext(Context, State);
		EnterRule(_localctx, 334, RULE_fixed_pointer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2055; identifier();
			State = 2056; Match(ASSIGNMENT);
			State = 2057; fixed_pointer_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
			return GetRuleContext<Local_variable_initializer_unsafeContext>(0);
		}
		public Fixed_pointer_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_initializerContext fixed_pointer_initializer() {
		Fixed_pointer_initializerContext _localctx = new Fixed_pointer_initializerContext(Context, State);
		EnterRule(_localctx, 336, RULE_fixed_pointer_initializer);
		try {
			State = 2064;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2060;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
				case 1:
					{
					State = 2059; Match(AMP);
					}
					break;
				}
				State = 2062; expression();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2063; local_variable_initializer_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Fixed_size_buffer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator() {
		Fixed_size_buffer_declaratorContext _localctx = new Fixed_size_buffer_declaratorContext(Context, State);
		EnterRule(_localctx, 338, RULE_fixed_size_buffer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2066; identifier();
			State = 2067; Match(OPEN_BRACKET);
			State = 2068; expression();
			State = 2069; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializer_unsafeContext : ParserRuleContext {
		public ITerminalNode STACKALLOC() { return GetToken(CSharpParser.STACKALLOC, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Local_variable_initializer_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_initializer_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
		Local_variable_initializer_unsafeContext _localctx = new Local_variable_initializer_unsafeContext(Context, State);
		EnterRule(_localctx, 340, RULE_local_variable_initializer_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2071; Match(STACKALLOC);
			State = 2072; type();
			State = 2073; Match(OPEN_BRACKET);
			State = 2074; expression();
			State = 2075; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_arrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public Right_arrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_arrow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRight_arrow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRight_arrow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_arrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_arrowContext right_arrow() {
		Right_arrowContext _localctx = new Right_arrowContext(Context, State);
		EnterRule(_localctx, 342, RULE_right_arrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2077; _localctx.first = Match(ASSIGNMENT);
			State = 2078; _localctx.second = Match(GT);
			State = 2079;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public Right_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRight_shift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRight_shift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shiftContext right_shift() {
		Right_shiftContext _localctx = new Right_shiftContext(Context, State);
		EnterRule(_localctx, 344, RULE_right_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2081; _localctx.first = Match(GT);
			State = 2082; _localctx.second = Match(GT);
			State = 2083;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shift_assignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public Right_shift_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shift_assignmentContext right_shift_assignment() {
		Right_shift_assignmentContext _localctx = new Right_shift_assignmentContext(Context, State);
		EnterRule(_localctx, 346, RULE_right_shift_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2085; _localctx.first = Match(GT);
			State = 2086; _localctx.second = Match(OP_GE);
			State = 2087;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(CSharpParser.INTEGER_LITERAL, 0); }
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(CSharpParser.HEX_INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(CSharpParser.REAL_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(CSharpParser.CHARACTER_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(CSharpParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 348, RULE_literal);
		try {
			State = 2096;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2089; boolean_literal();
				}
				break;
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2090; string_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2091; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2092; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2093; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2094; Match(CHARACTER_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2095; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 350, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2098;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		public Interpolated_regular_stringContext interpolated_regular_string() {
			return GetRuleContext<Interpolated_regular_stringContext>(0);
		}
		public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
			return GetRuleContext<Interpolated_verbatium_stringContext>(0);
		}
		public ITerminalNode REGULAR_STRING() { return GetToken(CSharpParser.REGULAR_STRING, 0); }
		public ITerminalNode VERBATIUM_STRING() { return GetToken(CSharpParser.VERBATIUM_STRING, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 352, RULE_string_literal);
		try {
			State = 2104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERPOLATED_REGULAR_STRING_START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2100; interpolated_regular_string();
				}
				break;
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2101; interpolated_verbatium_string();
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2102; Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2103; Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_stringContext : ParserRuleContext {
		public ITerminalNode INTERPOLATED_REGULAR_STRING_START() { return GetToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0); }
		public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0); }
		public Interpolated_regular_string_partContext[] interpolated_regular_string_part() {
			return GetRuleContexts<Interpolated_regular_string_partContext>();
		}
		public Interpolated_regular_string_partContext interpolated_regular_string_part(int i) {
			return GetRuleContext<Interpolated_regular_string_partContext>(i);
		}
		public Interpolated_regular_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_regular_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_stringContext interpolated_regular_string() {
		Interpolated_regular_stringContext _localctx = new Interpolated_regular_stringContext(Context, State);
		EnterRule(_localctx, 354, RULE_interpolated_regular_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2106; Match(INTERPOLATED_REGULAR_STRING_START);
			State = 2110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (DOUBLE_CURLY_INSIDE - 132)) | (1L << (REGULAR_CHAR_INSIDE - 132)) | (1L << (REGULAR_STRING_INSIDE - 132)))) != 0)) {
				{
				{
				State = 2107; interpolated_regular_string_part();
				}
				}
				State = 2112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2113; Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_stringContext : ParserRuleContext {
		public ITerminalNode INTERPOLATED_VERBATIUM_STRING_START() { return GetToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0); }
		public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0); }
		public Interpolated_verbatium_string_partContext[] interpolated_verbatium_string_part() {
			return GetRuleContexts<Interpolated_verbatium_string_partContext>();
		}
		public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part(int i) {
			return GetRuleContext<Interpolated_verbatium_string_partContext>(i);
		}
		public Interpolated_verbatium_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_verbatium_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
		Interpolated_verbatium_stringContext _localctx = new Interpolated_verbatium_stringContext(Context, State);
		EnterRule(_localctx, 356, RULE_interpolated_verbatium_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2115; Match(INTERPOLATED_VERBATIUM_STRING_START);
			State = 2119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)) | (1L << (DOUBLE_CURLY_INSIDE - 132)) | (1L << (VERBATIUM_DOUBLE_QUOTE_INSIDE - 132)) | (1L << (VERBATIUM_INSIDE_STRING - 132)))) != 0)) {
				{
				{
				State = 2116; interpolated_verbatium_string_part();
				}
				}
				State = 2121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2122; Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_string_partContext : ParserRuleContext {
		public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0); }
		public ITerminalNode REGULAR_CHAR_INSIDE() { return GetToken(CSharpParser.REGULAR_CHAR_INSIDE, 0); }
		public ITerminalNode REGULAR_STRING_INSIDE() { return GetToken(CSharpParser.REGULAR_STRING_INSIDE, 0); }
		public Interpolated_regular_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_regular_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_string_partContext interpolated_regular_string_part() {
		Interpolated_regular_string_partContext _localctx = new Interpolated_regular_string_partContext(Context, State);
		EnterRule(_localctx, 358, RULE_interpolated_regular_string_part);
		try {
			State = 2128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2124; interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2125; Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case REGULAR_CHAR_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2126; Match(REGULAR_CHAR_INSIDE);
				}
				break;
			case REGULAR_STRING_INSIDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2127; Match(REGULAR_STRING_INSIDE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_string_partContext : ParserRuleContext {
		public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0); }
		public ITerminalNode VERBATIUM_DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0); }
		public ITerminalNode VERBATIUM_INSIDE_STRING() { return GetToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0); }
		public Interpolated_verbatium_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_verbatium_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part() {
		Interpolated_verbatium_string_partContext _localctx = new Interpolated_verbatium_string_partContext(Context, State);
		EnterRule(_localctx, 360, RULE_interpolated_verbatium_string_part);
		try {
			State = 2134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2130; interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2131; Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case VERBATIUM_DOUBLE_QUOTE_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2132; Match(VERBATIUM_DOUBLE_QUOTE_INSIDE);
				}
				break;
			case VERBATIUM_INSIDE_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2133; Match(VERBATIUM_INSIDE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_string_expressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] FORMAT_STRING() { return GetTokens(CSharpParser.FORMAT_STRING); }
		public ITerminalNode FORMAT_STRING(int i) {
			return GetToken(CSharpParser.FORMAT_STRING, i);
		}
		public Interpolated_string_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_string_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_string_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_string_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_string_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_string_expressionContext interpolated_string_expression() {
		Interpolated_string_expressionContext _localctx = new Interpolated_string_expressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_interpolated_string_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2136; expression();
			State = 2141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2137; Match(COMMA);
				State = 2138; expression();
				}
				}
				State = 2143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2144; Match(COLON);
				State = 2146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2145; Match(FORMAT_STRING);
					}
					}
					State = 2148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FORMAT_STRING );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABSTRACT() { return GetToken(CSharpParser.ABSTRACT, 0); }
		public ITerminalNode AS() { return GetToken(CSharpParser.AS, 0); }
		public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		public ITerminalNode CONTINUE() { return GetToken(CSharpParser.CONTINUE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		public ITerminalNode DO() { return GetToken(CSharpParser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		public ITerminalNode ELSE() { return GetToken(CSharpParser.ELSE, 0); }
		public ITerminalNode ENUM() { return GetToken(CSharpParser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharpParser.EXPLICIT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		public ITerminalNode FINALLY() { return GetToken(CSharpParser.FINALLY, 0); }
		public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		public ITerminalNode FOR() { return GetToken(CSharpParser.FOR, 0); }
		public ITerminalNode FOREACH() { return GetToken(CSharpParser.FOREACH, 0); }
		public ITerminalNode GOTO() { return GetToken(CSharpParser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(CSharpParser.IF, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(CSharpParser.IMPLICIT, 0); }
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(CSharpParser.INTERFACE, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		public ITerminalNode IS() { return GetToken(CSharpParser.IS, 0); }
		public ITerminalNode LOCK() { return GetToken(CSharpParser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(CSharpParser.NAMESPACE, 0); }
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode NULL() { return GetToken(CSharpParser.NULL, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharpParser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(CSharpParser.PARAMS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharpParser.PUBLIC, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharpParser.SEALED, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		public ITerminalNode SIZEOF() { return GetToken(CSharpParser.SIZEOF, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(CSharpParser.STACKALLOC, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		public ITerminalNode SWITCH() { return GetToken(CSharpParser.SWITCH, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public ITerminalNode THROW() { return GetToken(CSharpParser.THROW, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		public ITerminalNode TRY() { return GetToken(CSharpParser.TRY, 0); }
		public ITerminalNode TYPEOF() { return GetToken(CSharpParser.TYPEOF, 0); }
		public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharpParser.VIRTUAL, 0); }
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharpParser.VOLATILE, 0); }
		public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 364, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2152;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << AS) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BYTE) | (1L << CASE) | (1L << CATCH) | (1L << CHAR) | (1L << CHECKED) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DO) | (1L << DOUBLE) | (1L << ELSE) | (1L << ENUM) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FALSE) | (1L << FINALLY) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << GOTO) | (1L << IF) | (1L << IMPLICIT) | (1L << IN) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << IS) | (1L << LOCK) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARAMS - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (RETURN - 64)) | (1L << (SBYTE - 64)) | (1L << (SEALED - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STACKALLOC - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (STRUCT - 64)) | (1L << (SWITCH - 64)) | (1L << (THIS - 64)) | (1L << (THROW - 64)) | (1L << (TRUE - 64)) | (1L << (TRY - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNSAFE - 64)) | (1L << (USHORT - 64)) | (1L << (USING - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOID - 64)) | (1L << (VOLATILE - 64)) | (1L << (WHILE - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(Context, State);
		EnterRule(_localctx, 366, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2154; Match(CLASS);
			State = 2155; identifier();
			State = 2157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2156; type_parameter_list();
				}
			}

			State = 2160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2159; class_base();
				}
			}

			State = 2163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2162; type_parameter_constraints_clauses();
				}
			}

			State = 2165; class_body();
			State = 2167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2166; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(Context, State);
		EnterRule(_localctx, 368, RULE_struct_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2169; Match(STRUCT);
			State = 2170; identifier();
			State = 2172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2171; type_parameter_list();
				}
			}

			State = 2175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2174; struct_interfaces();
				}
			}

			State = 2178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2177; type_parameter_constraints_clauses();
				}
			}

			State = 2180; struct_body();
			State = 2182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2181; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_definitionContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(CSharpParser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Interface_baseContext interface_base() {
			return GetRuleContext<Interface_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_definitionContext interface_definition() {
		Interface_definitionContext _localctx = new Interface_definitionContext(Context, State);
		EnterRule(_localctx, 370, RULE_interface_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2184; Match(INTERFACE);
			State = 2185; identifier();
			State = 2187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2186; variant_type_parameter_list();
				}
			}

			State = 2190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2189; interface_base();
				}
			}

			State = 2193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2192; type_parameter_constraints_clauses();
				}
			}

			State = 2195; interface_body();
			State = 2197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2196; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(CSharpParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(Context, State);
		EnterRule(_localctx, 372, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199; Match(ENUM);
			State = 2200; identifier();
			State = 2202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2201; enum_base();
				}
			}

			State = 2204; enum_body();
			State = 2206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2205; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_definitionContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Delegate_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDelegate_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDelegate_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_definitionContext delegate_definition() {
		Delegate_definitionContext _localctx = new Delegate_definitionContext(Context, State);
		EnterRule(_localctx, 374, RULE_delegate_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2208; Match(DELEGATE);
			State = 2209; return_type();
			State = 2210; identifier();
			State = 2212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2211; variant_type_parameter_list();
				}
			}

			State = 2214; Match(OPEN_PARENS);
			State = 2216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				State = 2215; formal_parameter_list();
				}
			}

			State = 2218; Match(CLOSE_PARENS);
			State = 2220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2219; type_parameter_constraints_clauses();
				}
			}

			State = 2222; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declarationContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Event_accessor_declarationsContext event_accessor_declarations() {
			return GetRuleContext<Event_accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEvent_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEvent_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_declarationContext event_declaration() {
		Event_declarationContext _localctx = new Event_declarationContext(Context, State);
		EnterRule(_localctx, 376, RULE_event_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2224; Match(EVENT);
			State = 2225; type();
			State = 2234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				{
				State = 2226; variable_declarators();
				State = 2227; Match(SEMICOLON);
				}
				break;
			case 2:
				{
				State = 2229; member_name();
				State = 2230; Match(OPEN_BRACE);
				State = 2231; event_accessor_declarations();
				State = 2232; Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 378, RULE_field_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2236; variable_declarators();
			State = 2237; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(Context, State);
		EnterRule(_localctx, 380, RULE_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2239; member_name();
			State = 2253;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				{
				State = 2240; Match(OPEN_BRACE);
				State = 2241; accessor_declarations();
				State = 2242; Match(CLOSE_BRACE);
				State = 2247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGNMENT) {
					{
					State = 2243; Match(ASSIGNMENT);
					State = 2244; variable_initializer();
					State = 2245; Match(SEMICOLON);
					}
				}

				}
				break;
			case ASSIGNMENT:
				{
				State = 2249; right_arrow();
				State = 2250; expression();
				State = 2251; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(Context, State);
		EnterRule(_localctx, 382, RULE_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2255; Match(CONST);
			State = 2256; type();
			State = 2257; constant_declarators();
			State = 2258; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declarationContext : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Indexer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIndexer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIndexer_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declarationContext indexer_declaration() {
		Indexer_declarationContext _localctx = new Indexer_declarationContext(Context, State);
		EnterRule(_localctx, 384, RULE_indexer_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2260; Match(THIS);
			State = 2261; Match(OPEN_BRACKET);
			State = 2262; formal_parameter_list();
			State = 2263; Match(CLOSE_BRACKET);
			State = 2272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				{
				State = 2264; Match(OPEN_BRACE);
				State = 2265; accessor_declarations();
				State = 2266; Match(CLOSE_BRACE);
				}
				break;
			case ASSIGNMENT:
				{
				State = 2268; right_arrow();
				State = 2269; expression();
				State = 2270; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_definitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Destructor_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDestructor_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDestructor_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_definitionContext destructor_definition() {
		Destructor_definitionContext _localctx = new Destructor_definitionContext(Context, State);
		EnterRule(_localctx, 386, RULE_destructor_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2274; Match(TILDE);
			State = 2275; identifier();
			State = 2276; Match(OPEN_PARENS);
			State = 2277; Match(CLOSE_PARENS);
			State = 2278; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(Context, State);
		EnterRule(_localctx, 388, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2280; identifier();
			State = 2281; Match(OPEN_PARENS);
			State = 2283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				State = 2282; formal_parameter_list();
				}
			}

			State = 2285; Match(CLOSE_PARENS);
			State = 2287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2286; constructor_initializer();
				}
			}

			State = 2289; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_member_nameContext method_member_name() {
			return GetRuleContext<Method_member_nameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 390, RULE_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2291; method_member_name();
			State = 2293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2292; type_parameter_list();
				}
			}

			State = 2295; Match(OPEN_PARENS);
			State = 2297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				State = 2296; formal_parameter_list();
				}
			}

			State = 2299; Match(CLOSE_PARENS);
			State = 2301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2300; type_parameter_constraints_clauses();
				}
			}

			State = 2308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 2303; method_body();
				}
				break;
			case ASSIGNMENT:
				{
				State = 2304; right_arrow();
				State = 2305; expression();
				State = 2306; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Method_member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_member_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_member_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_member_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_nameContext method_member_name() {
		Method_member_nameContext _localctx = new Method_member_nameContext(Context, State);
		EnterRule(_localctx, 392, RULE_method_member_name);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				{
				State = 2310; identifier();
				}
				break;
			case 2:
				{
				State = 2311; identifier();
				State = 2312; Match(DOUBLE_COLON);
				State = 2313; identifier();
				}
				break;
			}
			State = 2324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,290,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 2317; type_argument_list();
						}
					}

					State = 2320; Match(DOT);
					State = 2321; identifier();
					}
					} 
				}
				State = 2326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,290,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declarationContext : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		public Overloadable_operatorContext overloadable_operator() {
			return GetRuleContext<Overloadable_operatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public Arg_declarationContext[] arg_declaration() {
			return GetRuleContexts<Arg_declarationContext>();
		}
		public Arg_declarationContext arg_declaration(int i) {
			return GetRuleContext<Arg_declarationContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOperator_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOperator_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declarationContext operator_declaration() {
		Operator_declarationContext _localctx = new Operator_declarationContext(Context, State);
		EnterRule(_localctx, 394, RULE_operator_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2327; Match(OPERATOR);
			State = 2328; overloadable_operator();
			State = 2329; Match(OPEN_PARENS);
			State = 2330; arg_declaration();
			State = 2333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2331; Match(COMMA);
				State = 2332; arg_declaration();
				}
			}

			State = 2335; Match(CLOSE_PARENS);
			State = 2341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 2336; body();
				}
				break;
			case ASSIGNMENT:
				{
				State = 2337; right_arrow();
				State = 2338; expression();
				State = 2339; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Arg_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArg_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArg_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declarationContext arg_declaration() {
		Arg_declarationContext _localctx = new Arg_declarationContext(Context, State);
		EnterRule(_localctx, 396, RULE_arg_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2343; type();
			State = 2344; identifier();
			State = 2347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 2345; Match(ASSIGNMENT);
				State = 2346; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocationContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_invocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_invocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocationContext method_invocation() {
		Method_invocationContext _localctx = new Method_invocationContext(Context, State);
		EnterRule(_localctx, 398, RULE_method_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2349; Match(OPEN_PARENS);
			State = 2351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)))) != 0)) {
				{
				State = 2350; argument_list();
				}
			}

			State = 2353; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObject_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObject_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expressionContext object_creation_expression() {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(Context, State);
		EnterRule(_localctx, 400, RULE_object_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2355; Match(OPEN_PARENS);
			State = 2357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (PLUS - 132)) | (1L << (MINUS - 132)) | (1L << (STAR - 132)) | (1L << (AMP - 132)) | (1L << (BANG - 132)) | (1L << (TILDE - 132)) | (1L << (OP_INC - 132)) | (1L << (OP_DEC - 132)))) != 0)) {
				{
				State = 2356; argument_list();
				}
			}

			State = 2359; Match(CLOSE_PARENS);
			State = 2361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACE) {
				{
				State = 2360; object_or_collection_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		public ITerminalNode ALIAS() { return GetToken(CSharpParser.ALIAS, 0); }
		public ITerminalNode ARGLIST() { return GetToken(CSharpParser.ARGLIST, 0); }
		public ITerminalNode ASCENDING() { return GetToken(CSharpParser.ASCENDING, 0); }
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public ITerminalNode AWAIT() { return GetToken(CSharpParser.AWAIT, 0); }
		public ITerminalNode BY() { return GetToken(CSharpParser.BY, 0); }
		public ITerminalNode DESCENDING() { return GetToken(CSharpParser.DESCENDING, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(CSharpParser.DYNAMIC, 0); }
		public ITerminalNode EQUALS() { return GetToken(CSharpParser.EQUALS, 0); }
		public ITerminalNode FROM() { return GetToken(CSharpParser.FROM, 0); }
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public ITerminalNode GROUP() { return GetToken(CSharpParser.GROUP, 0); }
		public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		public ITerminalNode JOIN() { return GetToken(CSharpParser.JOIN, 0); }
		public ITerminalNode LET() { return GetToken(CSharpParser.LET, 0); }
		public ITerminalNode NAMEOF() { return GetToken(CSharpParser.NAMEOF, 0); }
		public ITerminalNode ON() { return GetToken(CSharpParser.ON, 0); }
		public ITerminalNode ORDERBY() { return GetToken(CSharpParser.ORDERBY, 0); }
		public ITerminalNode PARTIAL() { return GetToken(CSharpParser.PARTIAL, 0); }
		public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		public ITerminalNode SELECT() { return GetToken(CSharpParser.SELECT, 0); }
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public ITerminalNode VAR() { return GetToken(CSharpParser.VAR, 0); }
		public ITerminalNode WHEN() { return GetToken(CSharpParser.WHEN, 0); }
		public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		public ITerminalNode YIELD() { return GetToken(CSharpParser.YIELD, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 402, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2363;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (VAR - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 171: return right_arrow_sempred((Right_arrowContext)_localctx, predIndex);
		case 172: return right_shift_sempred((Right_shiftContext)_localctx, predIndex);
		case 173: return right_shift_assignment_sempred((Right_shift_assignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool right_arrow_sempred(Right_arrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_assignment_sempred(Right_shift_assignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xC2', '\x940', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x3', '\x2', '\x5', '\x2', '\x198', '\n', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x19B', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x19E', '\n', '\x2', '\x3', '\x2', '\a', '\x2', '\x1A1', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x1A4', '\v', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x1A7', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x1AD', '\n', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x1B0', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x1B5', '\n', '\x3', '\a', '\x3', '\x1B7', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\x1BA', '\v', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x1C0', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '\x1C3', '\v', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x1C9', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x1CD', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x1D2', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x1DC', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x1E2', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\x1E5', '\v', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x1EC', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\x1EF', '\v', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x1F4', '\n', '\r', '\x3', '\r', '\x5', '\r', 
		'\x1F7', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x1FD', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x202', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x213', '\n', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x21B', '\n', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x220', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x225', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\x228', '\v', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\x22D', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\x230', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\a', '\x16', '\x235', '\n', '\x16', '\f', '\x16', '\xE', '\x16', 
		'\x238', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', 
		'\x17', '\x23D', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x240', '\v', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x245', 
		'\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x248', '\v', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x24D', '\n', '\x19', 
		'\f', '\x19', '\xE', '\x19', '\x250', '\v', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\a', '\x1A', '\x259', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', 
		'\x25C', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x261', '\n', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x264', '\n', 
		'\x1B', '\f', '\x1B', '\xE', '\x1B', '\x267', '\v', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x26C', '\n', '\x1C', '\f', 
		'\x1C', '\xE', '\x1C', '\x26F', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\a', '\x1D', '\x274', '\n', '\x1D', '\f', '\x1D', '\xE', 
		'\x1D', '\x277', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x291', '\n', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\a', '\x1F', '\x295', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', 
		'\x298', '\v', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x2A0', '\n', '\x1F', 
		'\x3', '\x1F', '\a', '\x1F', '\x2A3', '\n', '\x1F', '\f', '\x1F', '\xE', 
		'\x1F', '\x2A6', '\v', '\x1F', '\a', '\x1F', '\x2A8', '\n', '\x1F', '\f', 
		'\x1F', '\xE', '\x1F', '\x2AB', '\v', '\x1F', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x5', ' ', '\x2B0', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x2BE', '\n', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x2C4', '\n', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x2CE', '\n', ' ', '\f', ' ', 
		'\xE', ' ', '\x2D1', '\v', ' ', '\x3', ' ', '\x5', ' ', '\x2D4', '\n', 
		' ', '\x3', ' ', '\x6', ' ', '\x2D7', '\n', ' ', '\r', ' ', '\xE', ' ', 
		'\x2D8', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x2DD', '\n', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x2E3', '\n', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x2EA', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x5', ' ', '\x2FD', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\x302', '\n', ' ', '\x3', ' ', '\x5', ' ', '\x305', '\n', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', 
		' ', '\x312', '\n', ' ', '\f', ' ', '\xE', ' ', '\x315', '\v', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x31A', '\n', ' ', '\x3', '!', 
		'\x5', '!', '\x31D', '\n', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', 
		'!', '\x322', '\n', '!', '\x3', '\"', '\x5', '\"', '\x325', '\n', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x32B', 
		'\n', '\"', '\f', '\"', '\xE', '\"', '\x32E', '\v', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x335', 
		'\n', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\a', '%', '\x33E', '\n', '%', '\f', '%', '\xE', 
		'%', '\x341', '\v', '%', '\x3', '&', '\x3', '&', '\x5', '&', '\x345', 
		'\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x34A', 
		'\n', '\'', '\x5', '\'', '\x34C', '\n', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x353', '\n', '(', '\f', 
		'(', '\xE', '(', '\x356', '\v', '(', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x5', ')', '\x35D', '\n', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', '*', '\x3', '*', '\x5', '*', '\x364', '\n', '*', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x36A', '\n', 
		'+', '\f', '+', '\xE', '+', '\x36D', '\v', '+', '\x3', '+', '\x5', '+', 
		'\x370', '\n', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x5', ',', '\x379', '\n', ',', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x5', '-', '\x37E', '\n', '-', '\x5', '-', '\x380', 
		'\n', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\a', '.', '\x387', '\n', '.', '\f', '.', '\xE', '.', '\x38A', '\v', '.', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', 
		'\x391', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x395', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x39A', '\n', '\x30', '\x5', '\x30', '\x39C', '\n', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x3A1', '\n', '\x30', '\a', 
		'\x30', '\x3A3', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x3A6', '\v', 
		'\x30', '\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x3AA', '\n', '\x31', 
		'\f', '\x31', '\xE', '\x31', '\x3AD', '\v', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x3B4', 
		'\n', '\x32', '\f', '\x32', '\xE', '\x32', '\x3B7', '\v', '\x32', '\x3', 
		'\x32', '\x5', '\x32', '\x3BA', '\n', '\x32', '\x3', '\x33', '\x5', '\x33', 
		'\x3BD', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x5', '\x34', '\x3CE', '\n', '\x34', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x3D3', '\n', '\x35', '\f', 
		'\x35', '\xE', '\x35', '\x3D6', '\v', '\x35', '\x3', '\x36', '\x5', '\x36', 
		'\x3D9', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\a', '\x37', '\x3E1', '\n', '\x37', 
		'\f', '\x37', '\xE', '\x37', '\x3E4', '\v', '\x37', '\x3', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x3E8', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', ':', '\x3', ':', '\x5', ':', '\x3EF', '\n', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\a', ';', 
		'\x3F6', '\n', ';', '\f', ';', '\xE', ';', '\x3F9', '\v', ';', '\x3', 
		';', '\x3', ';', '\x5', ';', '\x3FD', '\n', ';', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x404', '\n', '<', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '?', '\x3', '?', '\x5', '?', '\x410', '\n', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x41B', '\n', '?', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\a', '@', '\x421', '\n', '@', 
		'\f', '@', '\xE', '@', '\x424', '\v', '@', '\x3', '\x41', '\x3', '\x41', 
		'\x5', '\x41', '\x428', '\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', 
		'\x42', '\x431', '\n', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x43A', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x43F', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x447', '\n', 
		'\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 
		'G', '\x454', '\n', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\a', 'G', '\x45C', '\n', 'G', '\f', 'G', '\xE', 
		'G', '\x45F', '\v', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x474', '\n', 'G', '\x3', 
		'G', '\x3', 'G', '\x5', 'G', '\x478', '\n', 'G', '\x3', 'G', '\x3', 'G', 
		'\x5', 'G', '\x47C', '\n', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x492', 
		'\n', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x497', '\n', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x49C', '\n', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', 
		'\x4A3', '\n', 'G', '\x3', 'G', '\x5', 'G', '\x4A6', '\n', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x5', 'G', '\x4BC', '\n', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x5', 'G', '\x4C8', '\n', 'G', '\x3', 'H', '\x3', 
		'H', '\x5', 'H', '\x4CC', '\n', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\a', 'I', '\x4D4', '\n', 'I', '\f', 
		'I', '\xE', 'I', '\x4D7', '\v', 'I', '\x3', 'J', '\x3', 'J', '\x5', 'J', 
		'\x4DB', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x4E0', 
		'\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x4E5', '\n', 
		'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 
		'N', '\x5', 'N', '\x4ED', '\n', 'N', '\x3', 'O', '\x6', 'O', '\x4F0', 
		'\n', 'O', '\r', 'O', '\xE', 'O', '\x4F1', '\x3', 'O', '\x3', 'O', '\x3', 
		'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x5', 
		'P', '\x4FC', '\n', 'P', '\x3', 'Q', '\x6', 'Q', '\x4FF', '\n', 'Q', '\r', 
		'Q', '\xE', 'Q', '\x500', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\a', 'R', '\x507', '\n', 'R', '\f', 'R', '\xE', 'R', '\x50A', '\v', 'R', 
		'\x5', 'R', '\x50C', '\n', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\a', 
		'S', '\x511', '\n', 'S', '\f', 'S', '\xE', 'S', '\x514', '\v', 'S', '\x3', 
		'T', '\x3', 'T', '\a', 'T', '\x518', '\n', 'T', '\f', 'T', '\xE', 'T', 
		'\x51B', '\v', 'T', '\x3', 'T', '\x5', 'T', '\x51E', '\n', 'T', '\x3', 
		'T', '\x5', 'T', '\x521', '\n', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x5', 'U', '\x527', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x52B', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', 
		'\x5', 'V', '\x531', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x53F', '\n', 'Y', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x545', '\n', 'Z', '\x3', 
		'[', '\x3', '[', '\x3', '[', '\a', '[', '\x54A', '\n', '[', '\f', '[', 
		'\xE', '[', '\x54D', '\v', '[', '\x3', '\\', '\x3', '\\', '\x5', '\\', 
		'\x551', '\n', '\\', '\x3', '\\', '\x5', '\\', '\x554', '\n', '\\', '\x3', 
		'\\', '\x5', '\\', '\x557', '\n', '\\', '\x3', '\\', '\x3', '\\', '\x3', 
		']', '\x6', ']', '\x55C', '\n', ']', '\r', ']', '\xE', ']', '\x55D', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '_', '\x6', 
		'_', '\x566', '\n', '_', '\r', '_', '\xE', '_', '\x567', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x5', '`', '\x579', '\n', '`', '\x3', '\x61', '\x6', 
		'\x61', '\x57C', '\n', '\x61', '\r', '\x61', '\xE', '\x61', '\x57D', '\x3', 
		'\x62', '\x3', '\x62', '\x5', '\x62', '\x582', '\n', '\x62', '\x3', '\x63', 
		'\x5', '\x63', '\x585', '\n', '\x63', '\x3', '\x63', '\x5', '\x63', '\x588', 
		'\n', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x5', '\x63', '\x58F', '\n', '\x63', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x595', '\n', '\x64', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\a', '\x65', 
		'\x59B', '\n', '\x65', '\f', '\x65', '\xE', '\x65', '\x59E', '\v', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x5', '\x66', '\x5A3', '\n', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\a', 'g', '\x5AB', '\n', 'g', '\f', 'g', '\xE', 'g', '\x5AE', 
		'\v', 'g', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\a', 'h', '\x5B3', '\n', 
		'h', '\f', 'h', '\xE', 'h', '\x5B6', '\v', 'h', '\x3', 'i', '\x6', 'i', 
		'\x5B9', '\n', 'i', '\r', 'i', '\xE', 'i', '\x5BA', '\x3', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x5', 'k', '\x5C6', '\n', 'k', '\x3', 'k', '\x3', 'k', 
		'\x5', 'k', '\x5CA', '\n', 'k', '\x5', 'k', '\x5CC', '\n', 'k', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x5', 'l', '\x5D1', '\n', 'l', '\x3', 'm', 
		'\x3', 'm', '\x3', 'm', '\a', 'm', '\x5D6', '\n', 'm', '\f', 'm', '\xE', 
		'm', '\x5D9', '\v', 'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', 
		'\x3', 'o', '\x3', 'o', '\x5', 'o', '\x5E1', '\n', 'o', '\x3', 'o', '\x3', 
		'o', '\x3', 'p', '\x6', 'p', '\x5E6', '\n', 'p', '\r', 'p', '\xE', 'p', 
		'\x5E7', '\x3', 'q', '\x5', 'q', '\x5EB', '\n', 'q', '\x3', 'q', '\x5', 
		'q', '\x5EE', '\n', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\x5F2', 
		'\n', 'q', '\x3', 'r', '\x6', 'r', '\x5F5', '\n', 'r', '\r', 'r', '\xE', 
		'r', '\x5F6', '\x3', 's', '\x3', 's', '\x3', 't', '\x3', 't', '\x3', 't', 
		'\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', 
		'\x5', 't', '\x604', '\n', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 
		't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\x60E', 
		'\n', 't', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', 
		'\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', 
		'\x61A', '\n', 'u', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\a', 'v', '\x61F', 
		'\n', 'v', '\f', 'v', '\xE', 'v', '\x622', '\v', 'v', '\x3', 'w', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\a', 
		'x', '\x62B', '\n', 'x', '\f', 'x', '\xE', 'x', '\x62E', '\v', 'x', '\x3', 
		'y', '\x3', 'y', '\x3', 'y', '\x5', 'y', '\x633', '\n', 'y', '\x3', 'z', 
		'\x3', 'z', '\x5', 'z', '\x637', '\n', 'z', '\x3', '{', '\x3', '{', '\x5', 
		'{', '\x63B', '\n', '{', '\x3', '|', '\x3', '|', '\x3', '}', '\x3', '}', 
		'\x5', '}', '\x641', '\n', '}', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', 
		'~', '\x5', '~', '\x647', '\n', '~', '\x5', '~', '\x649', '\n', '~', '\x3', 
		'\x7F', '\x3', '\x7F', '\x3', '\x7F', '\a', '\x7F', '\x64E', '\n', '\x7F', 
		'\f', '\x7F', '\xE', '\x7F', '\x651', '\v', '\x7F', '\x3', '\x80', '\x5', 
		'\x80', '\x654', '\n', '\x80', '\x3', '\x80', '\x5', '\x80', '\x657', 
		'\n', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\x65B', '\n', 
		'\x80', '\x3', '\x81', '\x3', '\x81', '\x3', '\x82', '\x5', '\x82', '\x660', 
		'\n', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', 
		'\x3', '\x83', '\x5', '\x83', '\x667', '\n', '\x83', '\x3', '\x83', '\x5', 
		'\x83', '\x66A', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', 
		'\x5', '\x83', '\x66F', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', 
		'\x83', '\x5', '\x83', '\x674', '\n', '\x83', '\x5', '\x83', '\x676', 
		'\n', '\x83', '\x3', '\x84', '\x5', '\x84', '\x679', '\n', '\x84', '\x3', 
		'\x84', '\x5', '\x84', '\x67C', '\n', '\x84', '\x3', '\x84', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x85', '\x5', '\x85', '\x682', '\n', '\x85', '\x3', 
		'\x85', '\x5', '\x85', '\x685', '\n', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', 
		'\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\x691', '\n', 
		'\x86', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', '\x695', '\n', '\x87', 
		'\x3', '\x88', '\x5', '\x88', '\x698', '\n', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x5', '\x88', '\x6A2', '\n', '\x88', '\x3', '\x89', 
		'\x5', '\x89', '\x6A5', '\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x89', '\x3', '\x8A', '\x5', '\x8A', '\x6AB', '\n', '\x8A', '\x3', '\x8A', 
		'\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', 
		'\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', 
		'\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', 
		'\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', 
		'\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x5', '\x8B', 
		'\x6C6', '\n', '\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', 
		'\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\x6D3', '\n', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x5', '\x8E', 
		'\x6D9', '\n', '\x8E', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', 
		'\x90', '\x3', '\x90', '\a', '\x90', '\x6E0', '\n', '\x90', '\f', '\x90', 
		'\xE', '\x90', '\x6E3', '\v', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', 
		'\x91', '\x5', '\x91', '\x6E8', '\n', '\x91', '\x3', '\x91', '\x5', '\x91', 
		'\x6EB', '\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\x6', '\x91', '\x6F1', '\n', '\x91', '\r', '\x91', '\xE', '\x91', 
		'\x6F2', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\x6F7', '\n', '\x91', 
		'\x3', '\x92', '\x3', '\x92', '\a', '\x92', '\x6FB', '\n', '\x92', '\f', 
		'\x92', '\xE', '\x92', '\x6FE', '\v', '\x92', '\x3', '\x92', '\x6', '\x92', 
		'\x701', '\n', '\x92', '\r', '\x92', '\xE', '\x92', '\x702', '\x3', '\x93', 
		'\x3', '\x93', '\a', '\x93', '\x707', '\n', '\x93', '\f', '\x93', '\xE', 
		'\x93', '\x70A', '\v', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\a', '\x94', '\x712', '\n', 
		'\x94', '\f', '\x94', '\xE', '\x94', '\x715', '\v', '\x94', '\x3', '\x94', 
		'\x5', '\x94', '\x718', '\n', '\x94', '\x5', '\x94', '\x71A', '\n', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\a', '\x95', '\x722', '\n', '\x95', '\f', '\x95', '\xE', 
		'\x95', '\x725', '\v', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x96', 
		'\x5', '\x96', '\x72A', '\n', '\x96', '\x3', '\x96', '\x5', '\x96', '\x72D', 
		'\n', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x97', '\x3', '\x97', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x99', '\x3', '\x99', 
		'\a', '\x99', '\x738', '\n', '\x99', '\f', '\x99', '\xE', '\x99', '\x73B', 
		'\v', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x9A', '\x5', '\x9A', 
		'\x740', '\n', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\x743', '\n', '\x9A', 
		'\x3', '\x9A', '\x5', '\x9A', '\x746', '\n', '\x9A', '\x3', '\x9A', '\x3', 
		'\x9A', '\x3', '\x9A', '\x5', '\x9A', '\x74B', '\n', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x5', '\x9A', '\x74F', '\n', '\x9A', '\x3', '\x9A', '\x3', 
		'\x9A', '\x5', '\x9A', '\x753', '\n', '\x9A', '\x3', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\x764', '\n', 
		'\x9A', '\x3', '\x9A', '\x5', '\x9A', '\x767', '\n', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\x76C', '\n', '\x9A', '\x3', 
		'\x9A', '\x3', '\x9A', '\x5', '\x9A', '\x770', '\n', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x5', '\x9A', '\x774', '\n', '\x9A', '\x3', '\x9A', '\x3', 
		'\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', 
		'\x9A', '\x5', '\x9A', '\x77D', '\n', '\x9A', '\x3', '\x9B', '\x5', '\x9B', 
		'\x780', '\n', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', 
		'\x9B', '\x785', '\n', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', 
		'\x789', '\n', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', 
		'\x9B', '\x78E', '\n', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', 
		'\x792', '\n', '\x9B', '\x5', '\x9B', '\x794', '\n', '\x9B', '\x3', '\x9C', 
		'\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', 
		'\x3', '\x9D', '\a', '\x9D', '\x79D', '\n', '\x9D', '\f', '\x9D', '\xE', 
		'\x9D', '\x7A0', '\v', '\x9D', '\x3', '\x9D', '\x5', '\x9D', '\x7A3', 
		'\n', '\x9D', '\x5', '\x9D', '\x7A5', '\n', '\x9D', '\x3', '\x9D', '\x3', 
		'\x9D', '\x3', '\x9E', '\x5', '\x9E', '\x7AA', '\n', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x5', '\x9E', '\x7AF', '\n', '\x9E', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', 
		'\x9F', '\x7B6', '\n', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\xA0', 
		'\x3', '\xA0', '\x5', '\xA0', '\x7BC', '\n', '\xA0', '\x3', '\xA1', '\x6', 
		'\xA1', '\x7BF', '\n', '\xA1', '\r', '\xA1', '\xE', '\xA1', '\x7C0', '\x3', 
		'\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\x7C7', 
		'\n', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\x7CB', '\n', 
		'\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA3', '\x3', '\xA3', '\x5', 
		'\xA3', '\x7D1', '\n', '\xA3', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', 
		'\a', '\xA4', '\x7D6', '\n', '\xA4', '\f', '\xA4', '\xE', '\xA4', '\x7D9', 
		'\v', '\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', 
		'\x3', '\xA5', '\a', '\xA5', '\x7E0', '\n', '\xA5', '\f', '\xA5', '\xE', 
		'\xA5', '\x7E3', '\v', '\xA5', '\x5', '\xA5', '\x7E5', '\n', '\xA5', '\x3', 
		'\xA5', '\x5', '\xA5', '\x7E8', '\n', '\xA5', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x5', '\xA6', '\x7ED', '\n', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA7', '\x3', '\xA7', '\x5', '\xA7', '\x7F3', '\n', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\a', '\xA7', '\x7F7', '\n', '\xA7', '\f', 
		'\xA7', '\xE', '\xA7', '\x7FA', '\v', '\xA7', '\x3', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\x5', '\xA7', '\x800', '\n', '\xA7', '\x3', 
		'\xA8', '\x3', '\xA8', '\x3', '\xA8', '\a', '\xA8', '\x805', '\n', '\xA8', 
		'\f', '\xA8', '\xE', '\xA8', '\x808', '\v', '\xA8', '\x3', '\xA9', '\x3', 
		'\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xAA', '\x5', '\xAA', '\x80F', 
		'\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\x813', '\n', 
		'\xAA', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', 
		'\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', 
		'\xAC', '\x3', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', 
		'\xAD', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', 
		'\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xB0', '\x3', 
		'\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', 
		'\xB0', '\x5', '\xB0', '\x833', '\n', '\xB0', '\x3', '\xB1', '\x3', '\xB1', 
		'\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', 
		'\x83B', '\n', '\xB2', '\x3', '\xB3', '\x3', '\xB3', '\a', '\xB3', '\x83F', 
		'\n', '\xB3', '\f', '\xB3', '\xE', '\xB3', '\x842', '\v', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\a', '\xB4', '\x848', 
		'\n', '\xB4', '\f', '\xB4', '\xE', '\xB4', '\x84B', '\v', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB5', '\x5', '\xB5', '\x853', '\n', '\xB5', '\x3', '\xB6', '\x3', '\xB6', 
		'\x3', '\xB6', '\x3', '\xB6', '\x5', '\xB6', '\x859', '\n', '\xB6', '\x3', 
		'\xB7', '\x3', '\xB7', '\x3', '\xB7', '\a', '\xB7', '\x85E', '\n', '\xB7', 
		'\f', '\xB7', '\xE', '\xB7', '\x861', '\v', '\xB7', '\x3', '\xB7', '\x3', 
		'\xB7', '\x6', '\xB7', '\x865', '\n', '\xB7', '\r', '\xB7', '\xE', '\xB7', 
		'\x866', '\x5', '\xB7', '\x869', '\n', '\xB7', '\x3', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\x870', '\n', 
		'\xB9', '\x3', '\xB9', '\x5', '\xB9', '\x873', '\n', '\xB9', '\x3', '\xB9', 
		'\x5', '\xB9', '\x876', '\n', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', 
		'\xB9', '\x87A', '\n', '\xB9', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', 
		'\x5', '\xBA', '\x87F', '\n', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x882', 
		'\n', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x885', '\n', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x889', '\n', '\xBA', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x88E', '\n', '\xBB', '\x3', 
		'\xBB', '\x5', '\xBB', '\x891', '\n', '\xBB', '\x3', '\xBB', '\x5', '\xBB', 
		'\x894', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x898', 
		'\n', '\xBB', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', 
		'\x89D', '\n', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x8A1', 
		'\n', '\xBC', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', 
		'\x5', '\xBD', '\x8A7', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x5', 
		'\xBD', '\x8AB', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', 
		'\x8AF', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBE', '\x3', 
		'\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', 
		'\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\x8BD', 
		'\n', '\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xC0', 
		'\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', 
		'\x3', '\xC0', '\x3', '\xC0', '\x5', '\xC0', '\x8CA', '\n', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x5', '\xC0', '\x8D0', 
		'\n', '\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', 
		'\x3', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x5', '\xC2', '\x8E3', '\n', 
		'\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', 
		'\xC3', '\x3', '\xC3', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x5', 
		'\xC4', '\x8EE', '\n', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x5', '\xC4', 
		'\x8F2', '\n', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC5', '\x3', 
		'\xC5', '\x5', '\xC5', '\x8F8', '\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', 
		'\x5', '\xC5', '\x8FC', '\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', 
		'\xC5', '\x900', '\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', 
		'\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x907', '\n', '\xC5', '\x3', 
		'\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x5', 
		'\xC6', '\x90E', '\n', '\xC6', '\x3', '\xC6', '\x5', '\xC6', '\x911', 
		'\n', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\a', '\xC6', '\x915', '\n', 
		'\xC6', '\f', '\xC6', '\xE', '\xC6', '\x918', '\v', '\xC6', '\x3', '\xC7', 
		'\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', 
		'\x5', '\xC7', '\x920', '\n', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x928', 
		'\n', '\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x5', '\xC8', '\x92E', '\n', '\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x5', 
		'\xC9', '\x932', '\n', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xCA', 
		'\x3', '\xCA', '\x5', '\xCA', '\x938', '\n', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x5', '\xCA', '\x93C', '\n', '\xCA', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x2', '\x2', '\xCC', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', 
		'\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', 
		'\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', 
		'\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', 
		'\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', 
		'\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', 
		'\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', 
		'\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', 
		'\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', 
		'\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', 
		'\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x180', 
		'\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', '\x190', 
		'\x192', '\x194', '\x2', '\x14', '\n', '\x2', '\x16', '\x16', '\x19', 
		'\x19', '\x38', '\x38', '@', '@', 'T', 'T', 'X', 'X', '\x64', '\x65', 
		'h', 'h', '\x4', '\x2', '#', '#', '.', '.', '\x4', '\x2', 'I', 'I', 'Q', 
		'Q', '\x3', '\x2', '\x9B', '\x9C', '\x4', '\x2', '\x91', '\x92', '\x9D', 
		'\x9E', '\x3', '\x2', '\x86', '\x87', '\x3', '\x2', '\x88', '\x8A', '\x10', 
		'\x2', '\x13', '\x13', '\x16', '\x16', '\x19', '\x19', '\x1E', '\x1E', 
		'#', '#', '.', '.', '\x38', '\x38', '@', '@', '\x45', '\x45', 'T', 'T', 
		'X', 'X', '\\', '\\', '\x64', '\x65', 'h', 'h', '\x4', '\x2', '\xF', '\xF', 
		'!', '!', '\xE', '\x2', '\n', '\n', '\x10', '\x10', '*', '*', ':', ':', 
		'\x43', '\x43', 'J', 'J', 'L', 'P', 'U', 'U', '[', '[', 'g', 'g', 'k', 
		'k', 'm', 'm', '\x5', '\x2', 'I', 'I', 'Q', 'Q', '_', '_', '\x4', '\x2', 
		')', ')', '\x36', '\x36', '\x4', '\x2', '\x12', '\x12', '_', '_', '\x4', 
		'\x2', '\x88', '\x88', '\x93', '\x93', '\x4', '\x2', '\x37', '\x37', 'I', 
		'I', '\x4', '\x2', '+', '+', '\x61', '\x61', '\x15', '\x2', '\n', '\n', 
		'\xE', '\xE', '\x12', '\x14', '\x16', ' ', '\"', '#', '%', '&', '(', '\x30', 
		'\x33', '\x33', '\x35', ':', '<', '<', '?', '@', '\x42', '\x45', 'G', 
		'G', 'I', 'K', 'M', 'Q', 'S', 'U', 'X', 'i', 'k', 'm', 'p', 'p', '\x15', 
		'\x2', '\v', '\r', '\xF', '\x11', '\x15', '\x15', '!', '!', '$', '$', 
		'\'', '\'', '\x31', '\x32', '\x34', '\x34', ';', ';', '=', '>', '\x41', 
		'\x41', '\x46', '\x46', 'H', 'H', 'L', 'L', 'R', 'R', 'V', 'W', 'j', 'j', 
		'n', 'o', 'q', 'r', '\x2', '\xA1D', '\x2', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1BB', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x1CC', '\x3', '\x2', '\x2', '\x2', '\f', '\x1D1', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x10', '\x1D5', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x16', '\x1E8', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1FC', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x201', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x203', '\x3', '\x2', '\x2', '\x2', ' ', '\x212', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x214', '\x3', '\x2', '\x2', '\x2', '$', '\x21C', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x221', '\x3', '\x2', '\x2', '\x2', '(', '\x229', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x231', '\x3', '\x2', '\x2', '\x2', 
		',', '\x239', '\x3', '\x2', '\x2', '\x2', '.', '\x241', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x249', '\x3', '\x2', '\x2', '\x2', '\x32', '\x251', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x268', '\x3', '\x2', '\x2', '\x2', '\x38', '\x270', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x290', '\x3', '\x2', '\x2', '\x2', '<', '\x292', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x319', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x42', '\x324', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x334', '\x3', '\x2', '\x2', '\x2', '\x46', '\x338', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x33A', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x344', '\x3', '\x2', '\x2', '\x2', 'L', '\x346', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x34F', '\x3', '\x2', '\x2', '\x2', 'P', '\x35C', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x363', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x365', '\x3', '\x2', '\x2', '\x2', 'V', '\x378', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x37A', '\x3', '\x2', '\x2', '\x2', 'Z', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x390', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x392', '\x3', '\x2', '\x2', '\x2', '`', '\x3A7', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x3B0', '\x3', '\x2', '\x2', '\x2', '\x64', '\x3BC', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x3CD', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x3CF', '\x3', '\x2', '\x2', '\x2', 'j', '\x3D8', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x3DD', '\x3', '\x2', '\x2', '\x2', 'n', '\x3E7', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x3E9', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x3EC', '\x3', '\x2', '\x2', '\x2', 't', '\x3F7', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x403', '\x3', '\x2', '\x2', '\x2', 'x', '\x405', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x40A', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x40D', '\x3', '\x2', '\x2', '\x2', '~', '\x41C', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x425', '\x3', '\x2', '\x2', '\x2', '\x82', '\x430', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x432', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x43E', '\x3', '\x2', '\x2', '\x2', '\x88', '\x440', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x446', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x4C7', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x4C9', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x4CF', '\x3', '\x2', '\x2', '\x2', '\x92', '\x4DA', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x96', '\x4E4', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x4E6', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x4EC', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x4EF', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x4FB', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x4FE', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\x50B', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\x50D', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x520', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\x522', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x52E', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\x534', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\x539', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x53E', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\x540', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x546', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\x54E', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\x55B', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x55F', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\x565', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x578', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\x57B', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\x581', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x584', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\x590', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x596', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\x5A2', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x5AF', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\x5B8', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x5BC', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\x5CB', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\x5D0', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x5D2', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\x5DA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x5DE', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\x5E5', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\x5EA', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x5F4', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\x5F8', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x60D', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\x60F', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\x61B', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x623', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\x627', '\x3', '\x2', '\x2', '\x2', '\xF0', '\x62F', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\x636', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\x63A', '\x3', '\x2', '\x2', '\x2', '\xF6', '\x63C', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\x640', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x648', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\x64A', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\x65A', '\x3', '\x2', '\x2', '\x2', '\x100', '\x65C', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x65F', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x666', '\x3', '\x2', '\x2', '\x2', '\x106', '\x678', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x681', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x690', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x694', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x697', '\x3', '\x2', '\x2', '\x2', '\x110', '\x6A4', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x6AA', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x6C5', '\x3', '\x2', '\x2', '\x2', '\x116', '\x6C7', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x6CE', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x6D8', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x6DA', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x6DD', '\x3', '\x2', '\x2', '\x2', '\x120', '\x6E7', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x6F8', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x704', '\x3', '\x2', '\x2', '\x2', '\x126', '\x70D', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x71D', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x729', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x730', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x732', '\x3', '\x2', '\x2', '\x2', '\x130', '\x735', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x73F', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x77F', '\x3', '\x2', '\x2', '\x2', '\x136', '\x795', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\x798', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x7A9', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x7B0', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x7BB', '\x3', '\x2', '\x2', '\x2', '\x140', '\x7BE', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x7C2', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x7D0', '\x3', '\x2', '\x2', '\x2', '\x146', '\x7D2', '\x3', '\x2', '\x2', 
		'\x2', '\x148', '\x7DA', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x7EC', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x7FF', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x801', '\x3', '\x2', '\x2', '\x2', '\x150', '\x809', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x812', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x814', '\x3', '\x2', '\x2', '\x2', '\x156', '\x819', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x81F', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x823', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x827', '\x3', '\x2', '\x2', '\x2', 
		'\x15E', '\x832', '\x3', '\x2', '\x2', '\x2', '\x160', '\x834', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x83A', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x83C', '\x3', '\x2', '\x2', '\x2', '\x166', '\x845', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x852', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x858', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x85A', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x86A', '\x3', '\x2', '\x2', '\x2', '\x170', '\x86C', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x87B', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x88A', '\x3', '\x2', '\x2', '\x2', '\x176', '\x899', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '\x8A2', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x8B2', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x8BE', '\x3', '\x2', '\x2', '\x2', 
		'\x17E', '\x8C1', '\x3', '\x2', '\x2', '\x2', '\x180', '\x8D1', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x8D6', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x8E4', '\x3', '\x2', '\x2', '\x2', '\x186', '\x8EA', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\x8F5', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x90D', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x919', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', '\x929', '\x3', '\x2', '\x2', '\x2', '\x190', '\x92F', '\x3', 
		'\x2', '\x2', '\x2', '\x192', '\x935', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x93D', '\x3', '\x2', '\x2', '\x2', '\x196', '\x198', '\a', '\x3', '\x2', 
		'\x2', '\x197', '\x196', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x19B', '\x5', '\xB8', ']', '\x2', '\x19A', '\x199', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19E', '\x5', '\xBC', 
		'_', '\x2', '\x19D', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x19F', '\x1A1', '\x5', '\x13C', '\x9F', '\x2', '\x1A0', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\x1A1', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A2', 
		'\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A7', '\x5', '\xC0', '\x61', '\x2', 
		'\x1A6', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A9', '\a', '\x2', '\x2', '\x3', '\x1A9', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1AC', '\x5', '\x194', '\xCB', '\x2', '\x1AB', '\x1AD', 
		'\x5', '\x14', '\v', '\x2', '\x1AC', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x1B0', '\x5', '\xC6', '\x64', '\x2', '\x1AF', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1AE', '\x3', '\x2', '\x2', 
		'\x2', '\x1B0', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', 
		'\a', '\x82', '\x2', '\x2', '\x1B2', '\x1B4', '\x5', '\x194', '\xCB', 
		'\x2', '\x1B3', '\x1B5', '\x5', '\x14', '\v', '\x2', '\x1B4', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x1B7', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1BB', '\x1C1', '\x5', '\b', '\x5', '\x2', '\x1BC', 
		'\x1C0', '\a', '\x93', '\x2', '\x2', '\x1BD', '\x1C0', '\x5', '\x124', 
		'\x93', '\x2', '\x1BE', '\x1C0', '\a', '\x88', '\x2', '\x2', '\x1BF', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C3', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'\x1C1', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C9', 
		'\x5', '\n', '\x6', '\x2', '\x1C5', '\x1C9', '\x5', '\x12', '\n', '\x2', 
		'\x1C6', '\x1C7', '\a', 'l', '\x2', '\x2', '\x1C7', '\x1C9', '\a', '\x88', 
		'\x2', '\x2', '\x1C8', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C6', '\x3', '\x2', '\x2', '\x2', 
		'\x1C9', '\t', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CD', '\x5', '\f', 
		'\a', '\x2', '\x1CB', '\x1CD', '\a', '\x13', '\x2', '\x2', '\x1CC', '\x1CA', 
		'\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\v', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1D2', '\x5', '\xE', 
		'\b', '\x2', '\x1CF', '\x1D2', '\x5', '\x10', '\t', '\x2', '\x1D0', '\x1D2', 
		'\a', '\x1E', '\x2', '\x2', '\x1D1', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D0', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\r', '\x3', '\x2', '\x2', '\x2', '\x1D3', 
		'\x1D4', '\t', '\x2', '\x2', '\x2', '\x1D4', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x1D5', '\x1D6', '\t', '\x3', '\x2', '\x2', '\x1D6', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x1D7', '\x1DC', '\x5', '\x4', '\x3', '\x2', '\x1D8', 
		'\x1DC', '\a', '\x45', '\x2', '\x2', '\x1D9', '\x1DC', '\a', '$', '\x2', 
		'\x2', '\x1DA', '\x1DC', '\a', '\\', '\x2', '\x2', '\x1DB', '\x1D7', '\x3', 
		'\x2', '\x2', '\x2', '\x1DB', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DB', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\x13', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', 
		'\a', '\x91', '\x2', '\x2', '\x1DE', '\x1E3', '\x5', '\x6', '\x4', '\x2', 
		'\x1DF', '\x1E0', '\a', '\x83', '\x2', '\x2', '\x1E0', '\x1E2', '\x5', 
		'\x6', '\x4', '\x2', '\x1E1', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E1', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E6', '\x1E7', '\a', '\x92', '\x2', '\x2', '\x1E7', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\x1ED', '\x5', '\x18', '\r', '\x2', '\x1E9', 
		'\x1EA', '\a', '\x83', '\x2', '\x2', '\x1EA', '\x1EC', '\x5', '\x18', 
		'\r', '\x2', '\x1EB', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1EF', 
		'\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EB', '\x3', '\x2', '\x2', '\x2', 
		'\x1ED', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x1EF', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1F0', 
		'\x1F1', '\x5', '\x194', '\xCB', '\x2', '\x1F1', '\x1F2', '\a', '\x84', 
		'\x2', '\x2', '\x1F2', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F7', '\t', 
		'\x4', '\x2', '\x2', '\x1F6', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\x3', '\x2', '\x2', 
		'\x2', '\x1F8', '\x1F9', '\x5', '\x1A', '\xE', '\x2', '\x1F9', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FD', '\x5', '\x1E', '\x10', '\x2', 
		'\x1FB', '\x1FD', '\x5', '\x1C', '\xF', '\x2', '\x1FC', '\x1FA', '\x3', 
		'\x2', '\x2', '\x2', '\x1FC', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x202', '\x5', '\x64', '\x33', 
		'\x2', '\x1FF', '\x202', '\x5', 'p', '\x39', '\x2', '\x200', '\x202', 
		'\x5', '\"', '\x12', '\x2', '\x201', '\x1FE', '\x3', '\x2', '\x2', '\x2', 
		'\x201', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x201', '\x200', '\x3', 
		'\x2', '\x2', '\x2', '\x202', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x203', 
		'\x204', '\x5', ':', '\x1E', '\x2', '\x204', '\x205', '\x5', ' ', '\x11', 
		'\x2', '\x205', '\x206', '\x5', '\x1A', '\xE', '\x2', '\x206', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x207', '\x213', '\a', '\x90', '\x2', '\x2', 
		'\x208', '\x213', '\a', '\x9F', '\x2', '\x2', '\x209', '\x213', '\a', 
		'\xA0', '\x2', '\x2', '\x20A', '\x213', '\a', '\xA1', '\x2', '\x2', '\x20B', 
		'\x213', '\a', '\xA2', '\x2', '\x2', '\x20C', '\x213', '\a', '\xA3', '\x2', 
		'\x2', '\x20D', '\x213', '\a', '\xA4', '\x2', '\x2', '\x20E', '\x213', 
		'\a', '\xA5', '\x2', '\x2', '\x20F', '\x213', '\a', '\xA6', '\x2', '\x2', 
		'\x210', '\x213', '\a', '\xA8', '\x2', '\x2', '\x211', '\x213', '\x5', 
		'\x15C', '\xAF', '\x2', '\x212', '\x207', '\x3', '\x2', '\x2', '\x2', 
		'\x212', '\x208', '\x3', '\x2', '\x2', '\x2', '\x212', '\x209', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x212', '\x20C', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x212', '\x20E', 
		'\x3', '\x2', '\x2', '\x2', '\x212', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'\x212', '\x210', '\x3', '\x2', '\x2', '\x2', '\x212', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\x213', '!', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x21A', '\x5', '$', '\x13', '\x2', '\x215', '\x216', '\a', '\x93', '\x2', 
		'\x2', '\x216', '\x217', '\x5', '\x1A', '\xE', '\x2', '\x217', '\x218', 
		'\a', '\x84', '\x2', '\x2', '\x218', '\x219', '\x5', '\x1A', '\xE', '\x2', 
		'\x219', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\x21A', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21F', '\x5', '&', '\x14', 
		'\x2', '\x21D', '\x21E', '\a', '\x95', '\x2', '\x2', '\x21E', '\x220', 
		'\x5', '$', '\x13', '\x2', '\x21F', '\x21D', '\x3', '\x2', '\x2', '\x2', 
		'\x21F', '\x220', '\x3', '\x2', '\x2', '\x2', '\x220', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x221', '\x226', '\x5', '(', '\x15', '\x2', '\x222', '\x223', 
		'\a', '\x99', '\x2', '\x2', '\x223', '\x225', '\x5', '(', '\x15', '\x2', 
		'\x224', '\x222', '\x3', '\x2', '\x2', '\x2', '\x225', '\x228', '\x3', 
		'\x2', '\x2', '\x2', '\x226', '\x224', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x227', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x228', '\x226', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22E', 
		'\x5', '*', '\x16', '\x2', '\x22A', '\x22B', '\a', '\x98', '\x2', '\x2', 
		'\x22B', '\x22D', '\x5', '*', '\x16', '\x2', '\x22C', '\x22A', '\x3', 
		'\x2', '\x2', '\x2', '\x22D', '\x230', '\x3', '\x2', '\x2', '\x2', '\x22E', 
		'\x22C', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', '\x3', '\x2', '\x2', 
		'\x2', '\x22F', ')', '\x3', '\x2', '\x2', '\x2', '\x230', '\x22E', '\x3', 
		'\x2', '\x2', '\x2', '\x231', '\x236', '\x5', ',', '\x17', '\x2', '\x232', 
		'\x233', '\a', '\x8C', '\x2', '\x2', '\x233', '\x235', '\x5', ',', '\x17', 
		'\x2', '\x234', '\x232', '\x3', '\x2', '\x2', '\x2', '\x235', '\x238', 
		'\x3', '\x2', '\x2', '\x2', '\x236', '\x234', '\x3', '\x2', '\x2', '\x2', 
		'\x236', '\x237', '\x3', '\x2', '\x2', '\x2', '\x237', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x238', '\x236', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23E', 
		'\x5', '.', '\x18', '\x2', '\x23A', '\x23B', '\a', '\x8D', '\x2', '\x2', 
		'\x23B', '\x23D', '\x5', '.', '\x18', '\x2', '\x23C', '\x23A', '\x3', 
		'\x2', '\x2', '\x2', '\x23D', '\x240', '\x3', '\x2', '\x2', '\x2', '\x23E', 
		'\x23C', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x23F', '\x3', '\x2', '\x2', 
		'\x2', '\x23F', '-', '\x3', '\x2', '\x2', '\x2', '\x240', '\x23E', '\x3', 
		'\x2', '\x2', '\x2', '\x241', '\x246', '\x5', '\x30', '\x19', '\x2', '\x242', 
		'\x243', '\a', '\x8B', '\x2', '\x2', '\x243', '\x245', '\x5', '\x30', 
		'\x19', '\x2', '\x244', '\x242', '\x3', '\x2', '\x2', '\x2', '\x245', 
		'\x248', '\x3', '\x2', '\x2', '\x2', '\x246', '\x244', '\x3', '\x2', '\x2', 
		'\x2', '\x246', '\x247', '\x3', '\x2', '\x2', '\x2', '\x247', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x248', '\x246', '\x3', '\x2', '\x2', '\x2', '\x249', 
		'\x24E', '\x5', '\x32', '\x1A', '\x2', '\x24A', '\x24B', '\t', '\x5', 
		'\x2', '\x2', '\x24B', '\x24D', '\x5', '\x32', '\x1A', '\x2', '\x24C', 
		'\x24A', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x250', '\x3', '\x2', '\x2', 
		'\x2', '\x24E', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', 
		'\x3', '\x2', '\x2', '\x2', '\x24F', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x251', '\x25A', '\x5', 
		'\x34', '\x1B', '\x2', '\x252', '\x253', '\t', '\x6', '\x2', '\x2', '\x253', 
		'\x259', '\x5', '\x34', '\x1B', '\x2', '\x254', '\x255', '\a', '<', '\x2', 
		'\x2', '\x255', '\x259', '\x5', '\x62', '\x32', '\x2', '\x256', '\x257', 
		'\a', '\xE', '\x2', '\x2', '\x257', '\x259', '\x5', '\x6', '\x4', '\x2', 
		'\x258', '\x252', '\x3', '\x2', '\x2', '\x2', '\x258', '\x254', '\x3', 
		'\x2', '\x2', '\x2', '\x258', '\x256', '\x3', '\x2', '\x2', '\x2', '\x259', 
		'\x25C', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x258', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25A', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x265', '\x5', '\x36', '\x1C', '\x2', '\x25E', '\x261', '\a', 
		'\xA7', '\x2', '\x2', '\x25F', '\x261', '\x5', '\x15A', '\xAE', '\x2', 
		'\x260', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x260', '\x25F', '\x3', 
		'\x2', '\x2', '\x2', '\x261', '\x262', '\x3', '\x2', '\x2', '\x2', '\x262', 
		'\x264', '\x5', '\x36', '\x1C', '\x2', '\x263', '\x260', '\x3', '\x2', 
		'\x2', '\x2', '\x264', '\x267', '\x3', '\x2', '\x2', '\x2', '\x265', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x265', '\x266', '\x3', '\x2', '\x2', '\x2', 
		'\x266', '\x35', '\x3', '\x2', '\x2', '\x2', '\x267', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x268', '\x26D', '\x5', '\x38', '\x1D', '\x2', '\x269', 
		'\x26A', '\t', '\a', '\x2', '\x2', '\x26A', '\x26C', '\x5', '\x38', '\x1D', 
		'\x2', '\x26B', '\x269', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26F', 
		'\x3', '\x2', '\x2', '\x2', '\x26D', '\x26B', '\x3', '\x2', '\x2', '\x2', 
		'\x26D', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x26F', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x270', 
		'\x275', '\x5', ':', '\x1E', '\x2', '\x271', '\x272', '\t', '\b', '\x2', 
		'\x2', '\x272', '\x274', '\x5', ':', '\x1E', '\x2', '\x273', '\x271', 
		'\x3', '\x2', '\x2', '\x2', '\x274', '\x277', '\x3', '\x2', '\x2', '\x2', 
		'\x275', '\x273', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', '\x3', 
		'\x2', '\x2', '\x2', '\x276', '\x39', '\x3', '\x2', '\x2', '\x2', '\x277', 
		'\x275', '\x3', '\x2', '\x2', '\x2', '\x278', '\x291', '\x5', '<', '\x1F', 
		'\x2', '\x279', '\x27A', '\a', '\x86', '\x2', '\x2', '\x27A', '\x291', 
		'\x5', ':', '\x1E', '\x2', '\x27B', '\x27C', '\a', '\x87', '\x2', '\x2', 
		'\x27C', '\x291', '\x5', ':', '\x1E', '\x2', '\x27D', '\x27E', '\a', '\x8E', 
		'\x2', '\x2', '\x27E', '\x291', '\x5', ':', '\x1E', '\x2', '\x27F', '\x280', 
		'\a', '\x8F', '\x2', '\x2', '\x280', '\x291', '\x5', ':', '\x1E', '\x2', 
		'\x281', '\x282', '\a', '\x96', '\x2', '\x2', '\x282', '\x291', '\x5', 
		':', '\x1E', '\x2', '\x283', '\x284', '\a', '\x97', '\x2', '\x2', '\x284', 
		'\x291', '\x5', ':', '\x1E', '\x2', '\x285', '\x286', '\a', '\x80', '\x2', 
		'\x2', '\x286', '\x287', '\x5', '\x6', '\x4', '\x2', '\x287', '\x288', 
		'\a', '\x81', '\x2', '\x2', '\x288', '\x289', '\x5', ':', '\x1E', '\x2', 
		'\x289', '\x291', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x28B', '\a', 
		'\x11', '\x2', '\x2', '\x28B', '\x291', '\x5', ':', '\x1E', '\x2', '\x28C', 
		'\x28D', '\a', '\x8B', '\x2', '\x2', '\x28D', '\x291', '\x5', ':', '\x1E', 
		'\x2', '\x28E', '\x28F', '\a', '\x88', '\x2', '\x2', '\x28F', '\x291', 
		'\x5', ':', '\x1E', '\x2', '\x290', '\x278', '\x3', '\x2', '\x2', '\x2', 
		'\x290', '\x279', '\x3', '\x2', '\x2', '\x2', '\x290', '\x27B', '\x3', 
		'\x2', '\x2', '\x2', '\x290', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x290', 
		'\x27F', '\x3', '\x2', '\x2', '\x2', '\x290', '\x281', '\x3', '\x2', '\x2', 
		'\x2', '\x290', '\x283', '\x3', '\x2', '\x2', '\x2', '\x290', '\x285', 
		'\x3', '\x2', '\x2', '\x2', '\x290', '\x28A', '\x3', '\x2', '\x2', '\x2', 
		'\x290', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x290', '\x28E', '\x3', 
		'\x2', '\x2', '\x2', '\x291', ';', '\x3', '\x2', '\x2', '\x2', '\x292', 
		'\x296', '\x5', '>', ' ', '\x2', '\x293', '\x295', '\x5', '\x42', '\"', 
		'\x2', '\x294', '\x293', '\x3', '\x2', '\x2', '\x2', '\x295', '\x298', 
		'\x3', '\x2', '\x2', '\x2', '\x296', '\x294', '\x3', '\x2', '\x2', '\x2', 
		'\x296', '\x297', '\x3', '\x2', '\x2', '\x2', '\x297', '\x2A9', '\x3', 
		'\x2', '\x2', '\x2', '\x298', '\x296', '\x3', '\x2', '\x2', '\x2', '\x299', 
		'\x2A0', '\x5', '@', '!', '\x2', '\x29A', '\x2A0', '\x5', '\x190', '\xC9', 
		'\x2', '\x29B', '\x2A0', '\a', '\x96', '\x2', '\x2', '\x29C', '\x2A0', 
		'\a', '\x97', '\x2', '\x2', '\x29D', '\x29E', '\a', '\x9A', '\x2', '\x2', 
		'\x29E', '\x2A0', '\x5', '\x194', '\xCB', '\x2', '\x29F', '\x299', '\x3', 
		'\x2', '\x2', '\x2', '\x29F', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29F', 
		'\x29B', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x29C', '\x3', '\x2', '\x2', 
		'\x2', '\x29F', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A4', 
		'\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A3', '\x5', '\x42', '\"', '\x2', 
		'\x2A2', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A6', '\x3', 
		'\x2', '\x2', '\x2', '\x2A4', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A4', 
		'\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A8', '\x3', '\x2', '\x2', 
		'\x2', '\x2A6', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x29F', 
		'\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2AB', '\x3', '\x2', '\x2', '\x2', 
		'\x2A9', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\x3', 
		'\x2', '\x2', '\x2', '\x2AA', '=', '\x3', '\x2', '\x2', '\x2', '\x2AB', 
		'\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x31A', '\x5', '\x15E', 
		'\xB0', '\x2', '\x2AD', '\x2AF', '\x5', '\x194', '\xCB', '\x2', '\x2AE', 
		'\x2B0', '\x5', '\x14', '\v', '\x2', '\x2AF', '\x2AE', '\x3', '\x2', '\x2', 
		'\x2', '\x2AF', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x31A', 
		'\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\a', '\x80', '\x2', '\x2', 
		'\x2B2', '\x2B3', '\x5', '\x1A', '\xE', '\x2', '\x2B3', '\x2B4', '\a', 
		'\x81', '\x2', '\x2', '\x2B4', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x2B5', 
		'\x31A', '\x5', '\x46', '$', '\x2', '\x2B6', '\x31A', '\x5', '\xC6', '\x64', 
		'\x2', '\x2B7', '\x31A', '\a', 's', '\x2', '\x2', '\x2B8', '\x31A', '\a', 
		'_', '\x2', '\x2', '\x2B9', '\x2C3', '\a', '\x12', '\x2', '\x2', '\x2BA', 
		'\x2BB', '\a', '\x82', '\x2', '\x2', '\x2BB', '\x2BD', '\x5', '\x194', 
		'\xCB', '\x2', '\x2BC', '\x2BE', '\x5', '\x14', '\v', '\x2', '\x2BD', 
		'\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BE', '\x3', '\x2', '\x2', 
		'\x2', '\x2BE', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C0', 
		'\a', '~', '\x2', '\x2', '\x2C0', '\x2C1', '\x5', 'H', '%', '\x2', '\x2C1', 
		'\x2C2', '\a', '\x7F', '\x2', '\x2', '\x2C2', '\x2C4', '\x3', '\x2', '\x2', 
		'\x2', '\x2C3', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2BF', 
		'\x3', '\x2', '\x2', '\x2', '\x2C4', '\x31A', '\x3', '\x2', '\x2', '\x2', 
		'\x2C5', '\x2E2', '\a', '\x43', '\x2', '\x2', '\x2C6', '\x2DC', '\x5', 
		'\x6', '\x4', '\x2', '\x2C7', '\x2DD', '\x5', '\x192', '\xCA', '\x2', 
		'\x2C8', '\x2DD', '\x5', 'J', '&', '\x2', '\x2C9', '\x2CA', '\a', '~', 
		'\x2', '\x2', '\x2CA', '\x2CB', '\x5', 'H', '%', '\x2', '\x2CB', '\x2CF', 
		'\a', '\x7F', '\x2', '\x2', '\x2CC', '\x2CE', '\x5', '\x124', '\x93', 
		'\x2', '\x2CD', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2D1', 
		'\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2CD', '\x3', '\x2', '\x2', '\x2', 
		'\x2CF', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D3', '\x3', 
		'\x2', '\x2', '\x2', '\x2D1', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2D2', 
		'\x2D4', '\x5', '\x126', '\x94', '\x2', '\x2D3', '\x2D2', '\x3', '\x2', 
		'\x2', '\x2', '\x2D3', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2DD', 
		'\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D7', '\x5', '\x124', '\x93', 
		'\x2', '\x2D6', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D8', 
		'\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D6', '\x3', '\x2', '\x2', '\x2', 
		'\x2D8', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DA', '\x3', 
		'\x2', '\x2', '\x2', '\x2DA', '\x2DB', '\x5', '\x126', '\x94', '\x2', 
		'\x2DB', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2C7', '\x3', 
		'\x2', '\x2', '\x2', '\x2DC', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2DC', 
		'\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2D6', '\x3', '\x2', '\x2', 
		'\x2', '\x2DD', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2E3', 
		'\x5', 'X', '-', '\x2', '\x2DF', '\x2E0', '\x5', '\x124', '\x93', '\x2', 
		'\x2E0', '\x2E1', '\x5', '\x126', '\x94', '\x2', '\x2E1', '\x2E3', '\x3', 
		'\x2', '\x2', '\x2', '\x2E2', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2E2', 
		'\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2DF', '\x3', '\x2', '\x2', 
		'\x2', '\x2E3', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E5', 
		'\a', '\x63', '\x2', '\x2', '\x2E5', '\x2E9', '\a', '\x80', '\x2', '\x2', 
		'\x2E6', '\x2EA', '\x5', '^', '\x30', '\x2', '\x2E7', '\x2EA', '\x5', 
		'\x6', '\x4', '\x2', '\x2E8', '\x2EA', '\a', 'l', '\x2', '\x2', '\x2E9', 
		'\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2E7', '\x3', '\x2', '\x2', 
		'\x2', '\x2E9', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EB', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x31A', '\a', '\x81', '\x2', '\x2', 
		'\x2EC', '\x2ED', '\a', '\x1A', '\x2', '\x2', '\x2ED', '\x2EE', '\a', 
		'\x80', '\x2', '\x2', '\x2EE', '\x2EF', '\x5', '\x1A', '\xE', '\x2', '\x2EF', 
		'\x2F0', '\a', '\x81', '\x2', '\x2', '\x2F0', '\x31A', '\x3', '\x2', '\x2', 
		'\x2', '\x2F1', '\x2F2', '\a', '\x66', '\x2', '\x2', '\x2F2', '\x2F3', 
		'\a', '\x80', '\x2', '\x2', '\x2F3', '\x2F4', '\x5', '\x1A', '\xE', '\x2', 
		'\x2F4', '\x2F5', '\a', '\x81', '\x2', '\x2', '\x2F5', '\x31A', '\x3', 
		'\x2', '\x2', '\x2', '\x2F6', '\x2F7', '\a', '\x1F', '\x2', '\x2', '\x2F7', 
		'\x2F8', '\a', '\x80', '\x2', '\x2', '\x2F8', '\x2F9', '\x5', '\x6', '\x4', 
		'\x2', '\x2F9', '\x2FA', '\a', '\x81', '\x2', '\x2', '\x2FA', '\x31A', 
		'\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2FD', '\a', '\x10', '\x2', '\x2', 
		'\x2FC', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2FD', '\x3', 
		'\x2', '\x2', '\x2', '\x2FD', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x2FE', 
		'\x304', '\a', ' ', '\x2', '\x2', '\x2FF', '\x301', '\a', '\x80', '\x2', 
		'\x2', '\x300', '\x302', '\x5', 'h', '\x35', '\x2', '\x301', '\x300', 
		'\x3', '\x2', '\x2', '\x2', '\x301', '\x302', '\x3', '\x2', '\x2', '\x2', 
		'\x302', '\x303', '\x3', '\x2', '\x2', '\x2', '\x303', '\x305', '\a', 
		'\x81', '\x2', '\x2', '\x304', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x304', 
		'\x305', '\x3', '\x2', '\x2', '\x2', '\x305', '\x306', '\x3', '\x2', '\x2', 
		'\x2', '\x306', '\x31A', '\x5', '\x8E', 'H', '\x2', '\x307', '\x308', 
		'\a', 'Y', '\x2', '\x2', '\x308', '\x309', '\a', '\x80', '\x2', '\x2', 
		'\x309', '\x30A', '\x5', '\x6', '\x4', '\x2', '\x30A', '\x30B', '\a', 
		'\x81', '\x2', '\x2', '\x30B', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x30C', 
		'\x30D', '\a', '\x41', '\x2', '\x2', '\x30D', '\x313', '\a', '\x80', '\x2', 
		'\x2', '\x30E', '\x30F', '\x5', '\x194', '\xCB', '\x2', '\x30F', '\x310', 
		'\a', '\x82', '\x2', '\x2', '\x310', '\x312', '\x3', '\x2', '\x2', '\x2', 
		'\x311', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x312', '\x315', '\x3', 
		'\x2', '\x2', '\x2', '\x313', '\x311', '\x3', '\x2', '\x2', '\x2', '\x313', 
		'\x314', '\x3', '\x2', '\x2', '\x2', '\x314', '\x316', '\x3', '\x2', '\x2', 
		'\x2', '\x315', '\x313', '\x3', '\x2', '\x2', '\x2', '\x316', '\x317', 
		'\x5', '\x194', '\xCB', '\x2', '\x317', '\x318', '\a', '\x81', '\x2', 
		'\x2', '\x318', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x319', '\x2AC', 
		'\x3', '\x2', '\x2', '\x2', '\x319', '\x2AD', '\x3', '\x2', '\x2', '\x2', 
		'\x319', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x319', '\x2B5', '\x3', 
		'\x2', '\x2', '\x2', '\x319', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x319', 
		'\x2B7', '\x3', '\x2', '\x2', '\x2', '\x319', '\x2B8', '\x3', '\x2', '\x2', 
		'\x2', '\x319', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x319', '\x2C5', 
		'\x3', '\x2', '\x2', '\x2', '\x319', '\x2E4', '\x3', '\x2', '\x2', '\x2', 
		'\x319', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x319', '\x2F1', '\x3', 
		'\x2', '\x2', '\x2', '\x319', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x319', 
		'\x2FC', '\x3', '\x2', '\x2', '\x2', '\x319', '\x307', '\x3', '\x2', '\x2', 
		'\x2', '\x319', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x31A', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x31B', '\x31D', '\a', '\x93', '\x2', '\x2', '\x31C', 
		'\x31B', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31D', '\x3', '\x2', '\x2', 
		'\x2', '\x31D', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', 
		'\a', '\x82', '\x2', '\x2', '\x31F', '\x321', '\x5', '\x194', '\xCB', 
		'\x2', '\x320', '\x322', '\x5', '\x14', '\v', '\x2', '\x321', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x321', '\x322', '\x3', '\x2', '\x2', '\x2', 
		'\x322', '\x41', '\x3', '\x2', '\x2', '\x2', '\x323', '\x325', '\a', '\x93', 
		'\x2', '\x2', '\x324', '\x323', '\x3', '\x2', '\x2', '\x2', '\x324', '\x325', 
		'\x3', '\x2', '\x2', '\x2', '\x325', '\x326', '\x3', '\x2', '\x2', '\x2', 
		'\x326', '\x327', '\a', '~', '\x2', '\x2', '\x327', '\x32C', '\x5', '\x44', 
		'#', '\x2', '\x328', '\x329', '\a', '\x83', '\x2', '\x2', '\x329', '\x32B', 
		'\x5', '\x44', '#', '\x2', '\x32A', '\x328', '\x3', '\x2', '\x2', '\x2', 
		'\x32B', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x32C', '\x32A', '\x3', 
		'\x2', '\x2', '\x2', '\x32C', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x32D', 
		'\x32F', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x32C', '\x3', '\x2', '\x2', 
		'\x2', '\x32F', '\x330', '\a', '\x7F', '\x2', '\x2', '\x330', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x331', '\x332', '\x5', '\x194', '\xCB', 
		'\x2', '\x332', '\x333', '\a', '\x84', '\x2', '\x2', '\x333', '\x335', 
		'\x3', '\x2', '\x2', '\x2', '\x334', '\x331', '\x3', '\x2', '\x2', '\x2', 
		'\x334', '\x335', '\x3', '\x2', '\x2', '\x2', '\x335', '\x336', '\x3', 
		'\x2', '\x2', '\x2', '\x336', '\x337', '\x5', '\x1A', '\xE', '\x2', '\x337', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x338', '\x339', '\t', '\t', '\x2', 
		'\x2', '\x339', 'G', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x33F', '\x5', 
		'\x1A', '\xE', '\x2', '\x33B', '\x33C', '\a', '\x83', '\x2', '\x2', '\x33C', 
		'\x33E', '\x5', '\x1A', '\xE', '\x2', '\x33D', '\x33B', '\x3', '\x2', 
		'\x2', '\x2', '\x33E', '\x341', '\x3', '\x2', '\x2', '\x2', '\x33F', '\x33D', 
		'\x3', '\x2', '\x2', '\x2', '\x33F', '\x340', '\x3', '\x2', '\x2', '\x2', 
		'\x340', 'I', '\x3', '\x2', '\x2', '\x2', '\x341', '\x33F', '\x3', '\x2', 
		'\x2', '\x2', '\x342', '\x345', '\x5', 'L', '\'', '\x2', '\x343', '\x345', 
		'\x5', 'T', '+', '\x2', '\x344', '\x342', '\x3', '\x2', '\x2', '\x2', 
		'\x344', '\x343', '\x3', '\x2', '\x2', '\x2', '\x345', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x346', '\x34B', '\a', '|', '\x2', '\x2', '\x347', '\x349', 
		'\x5', 'N', '(', '\x2', '\x348', '\x34A', '\a', '\x83', '\x2', '\x2', 
		'\x349', '\x348', '\x3', '\x2', '\x2', '\x2', '\x349', '\x34A', '\x3', 
		'\x2', '\x2', '\x2', '\x34A', '\x34C', '\x3', '\x2', '\x2', '\x2', '\x34B', 
		'\x347', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x34C', '\x3', '\x2', '\x2', 
		'\x2', '\x34C', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34E', 
		'\a', '}', '\x2', '\x2', '\x34E', 'M', '\x3', '\x2', '\x2', '\x2', '\x34F', 
		'\x354', '\x5', 'P', ')', '\x2', '\x350', '\x351', '\a', '\x83', '\x2', 
		'\x2', '\x351', '\x353', '\x5', 'P', ')', '\x2', '\x352', '\x350', '\x3', 
		'\x2', '\x2', '\x2', '\x353', '\x356', '\x3', '\x2', '\x2', '\x2', '\x354', 
		'\x352', '\x3', '\x2', '\x2', '\x2', '\x354', '\x355', '\x3', '\x2', '\x2', 
		'\x2', '\x355', 'O', '\x3', '\x2', '\x2', '\x2', '\x356', '\x354', '\x3', 
		'\x2', '\x2', '\x2', '\x357', '\x35D', '\x5', '\x194', '\xCB', '\x2', 
		'\x358', '\x359', '\a', '~', '\x2', '\x2', '\x359', '\x35A', '\x5', '\x1A', 
		'\xE', '\x2', '\x35A', '\x35B', '\a', '\x7F', '\x2', '\x2', '\x35B', '\x35D', 
		'\x3', '\x2', '\x2', '\x2', '\x35C', '\x357', '\x3', '\x2', '\x2', '\x2', 
		'\x35C', '\x358', '\x3', '\x2', '\x2', '\x2', '\x35D', '\x35E', '\x3', 
		'\x2', '\x2', '\x2', '\x35E', '\x35F', '\a', '\x90', '\x2', '\x2', '\x35F', 
		'\x360', '\x5', 'R', '*', '\x2', '\x360', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x361', '\x364', '\x5', '\x1A', '\xE', '\x2', '\x362', '\x364', '\x5', 
		'J', '&', '\x2', '\x363', '\x361', '\x3', '\x2', '\x2', '\x2', '\x363', 
		'\x362', '\x3', '\x2', '\x2', '\x2', '\x364', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x365', '\x366', '\a', '|', '\x2', '\x2', '\x366', '\x36B', '\x5', 
		'V', ',', '\x2', '\x367', '\x368', '\a', '\x83', '\x2', '\x2', '\x368', 
		'\x36A', '\x5', 'V', ',', '\x2', '\x369', '\x367', '\x3', '\x2', '\x2', 
		'\x2', '\x36A', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36B', '\x369', 
		'\x3', '\x2', '\x2', '\x2', '\x36B', '\x36C', '\x3', '\x2', '\x2', '\x2', 
		'\x36C', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x36B', '\x3', 
		'\x2', '\x2', '\x2', '\x36E', '\x370', '\a', '\x83', '\x2', '\x2', '\x36F', 
		'\x36E', '\x3', '\x2', '\x2', '\x2', '\x36F', '\x370', '\x3', '\x2', '\x2', 
		'\x2', '\x370', '\x371', '\x3', '\x2', '\x2', '\x2', '\x371', '\x372', 
		'\a', '}', '\x2', '\x2', '\x372', 'U', '\x3', '\x2', '\x2', '\x2', '\x373', 
		'\x379', '\x5', '\x1C', '\xF', '\x2', '\x374', '\x375', '\a', '|', '\x2', 
		'\x2', '\x375', '\x376', '\x5', 'H', '%', '\x2', '\x376', '\x377', '\a', 
		'}', '\x2', '\x2', '\x377', '\x379', '\x3', '\x2', '\x2', '\x2', '\x378', 
		'\x373', '\x3', '\x2', '\x2', '\x2', '\x378', '\x374', '\x3', '\x2', '\x2', 
		'\x2', '\x379', 'W', '\x3', '\x2', '\x2', '\x2', '\x37A', '\x37F', '\a', 
		'|', '\x2', '\x2', '\x37B', '\x37D', '\x5', 'Z', '.', '\x2', '\x37C', 
		'\x37E', '\a', '\x83', '\x2', '\x2', '\x37D', '\x37C', '\x3', '\x2', '\x2', 
		'\x2', '\x37D', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x380', 
		'\x3', '\x2', '\x2', '\x2', '\x37F', '\x37B', '\x3', '\x2', '\x2', '\x2', 
		'\x37F', '\x380', '\x3', '\x2', '\x2', '\x2', '\x380', '\x381', '\x3', 
		'\x2', '\x2', '\x2', '\x381', '\x382', '\a', '}', '\x2', '\x2', '\x382', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x383', '\x388', '\x5', '\\', '/', '\x2', 
		'\x384', '\x385', '\a', '\x83', '\x2', '\x2', '\x385', '\x387', '\x5', 
		'\\', '/', '\x2', '\x386', '\x384', '\x3', '\x2', '\x2', '\x2', '\x387', 
		'\x38A', '\x3', '\x2', '\x2', '\x2', '\x388', '\x386', '\x3', '\x2', '\x2', 
		'\x2', '\x388', '\x389', '\x3', '\x2', '\x2', '\x2', '\x389', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x38A', '\x388', '\x3', '\x2', '\x2', '\x2', '\x38B', 
		'\x391', '\x5', '<', '\x1F', '\x2', '\x38C', '\x38D', '\x5', '\x194', 
		'\xCB', '\x2', '\x38D', '\x38E', '\a', '\x90', '\x2', '\x2', '\x38E', 
		'\x38F', '\x5', '\x1A', '\xE', '\x2', '\x38F', '\x391', '\x3', '\x2', 
		'\x2', '\x2', '\x390', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x390', '\x38C', 
		'\x3', '\x2', '\x2', '\x2', '\x391', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x392', '\x39B', '\x5', '\x194', '\xCB', '\x2', '\x393', '\x395', '\x5', 
		'`', '\x31', '\x2', '\x394', '\x393', '\x3', '\x2', '\x2', '\x2', '\x394', 
		'\x395', '\x3', '\x2', '\x2', '\x2', '\x395', '\x39C', '\x3', '\x2', '\x2', 
		'\x2', '\x396', '\x397', '\a', '\x94', '\x2', '\x2', '\x397', '\x399', 
		'\x5', '\x194', '\xCB', '\x2', '\x398', '\x39A', '\x5', '`', '\x31', '\x2', 
		'\x399', '\x398', '\x3', '\x2', '\x2', '\x2', '\x399', '\x39A', '\x3', 
		'\x2', '\x2', '\x2', '\x39A', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39B', 
		'\x394', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x396', '\x3', '\x2', '\x2', 
		'\x2', '\x39C', '\x3A4', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x39E', 
		'\a', '\x82', '\x2', '\x2', '\x39E', '\x3A0', '\x5', '\x194', '\xCB', 
		'\x2', '\x39F', '\x3A1', '\x5', '`', '\x31', '\x2', '\x3A0', '\x39F', 
		'\x3', '\x2', '\x2', '\x2', '\x3A0', '\x3A1', '\x3', '\x2', '\x2', '\x2', 
		'\x3A1', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x39D', '\x3', 
		'\x2', '\x2', '\x2', '\x3A3', '\x3A6', '\x3', '\x2', '\x2', '\x2', '\x3A4', 
		'\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x3A5', '\x3', '\x2', '\x2', 
		'\x2', '\x3A5', '_', '\x3', '\x2', '\x2', '\x2', '\x3A6', '\x3A4', '\x3', 
		'\x2', '\x2', '\x2', '\x3A7', '\x3AB', '\a', '\x91', '\x2', '\x2', '\x3A8', 
		'\x3AA', '\a', '\x83', '\x2', '\x2', '\x3A9', '\x3A8', '\x3', '\x2', '\x2', 
		'\x2', '\x3AA', '\x3AD', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3A9', 
		'\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3AC', '\x3', '\x2', '\x2', '\x2', 
		'\x3AC', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3AB', '\x3', 
		'\x2', '\x2', '\x2', '\x3AE', '\x3AF', '\a', '\x92', '\x2', '\x2', '\x3AF', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3B5', '\x5', '\b', '\x5', 
		'\x2', '\x3B1', '\x3B4', '\x5', '\x124', '\x93', '\x2', '\x3B2', '\x3B4', 
		'\a', '\x88', '\x2', '\x2', '\x3B3', '\x3B1', '\x3', '\x2', '\x2', '\x2', 
		'\x3B3', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B7', '\x3', 
		'\x2', '\x2', '\x2', '\x3B5', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B5', 
		'\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B9', '\x3', '\x2', '\x2', 
		'\x2', '\x3B7', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3BA', 
		'\a', '\x93', '\x2', '\x2', '\x3B9', '\x3B8', '\x3', '\x2', '\x2', '\x2', 
		'\x3B9', '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x3BB', '\x3BD', '\a', '\x10', '\x2', '\x2', '\x3BC', 
		'\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3BD', '\x3', '\x2', '\x2', 
		'\x2', '\x3BD', '\x3BE', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3BF', 
		'\x5', '\x66', '\x34', '\x2', '\x3BF', '\x3C0', '\x5', '\x158', '\xAD', 
		'\x2', '\x3C0', '\x3C1', '\x5', 'n', '\x38', '\x2', '\x3C1', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x3C2', '\x3C3', '\a', '\x80', '\x2', '\x2', '\x3C3', 
		'\x3CE', '\a', '\x81', '\x2', '\x2', '\x3C4', '\x3C5', '\a', '\x80', '\x2', 
		'\x2', '\x3C5', '\x3C6', '\x5', 'h', '\x35', '\x2', '\x3C6', '\x3C7', 
		'\a', '\x81', '\x2', '\x2', '\x3C7', '\x3CE', '\x3', '\x2', '\x2', '\x2', 
		'\x3C8', '\x3C9', '\a', '\x80', '\x2', '\x2', '\x3C9', '\x3CA', '\x5', 
		'l', '\x37', '\x2', '\x3CA', '\x3CB', '\a', '\x81', '\x2', '\x2', '\x3CB', 
		'\x3CE', '\x3', '\x2', '\x2', '\x2', '\x3CC', '\x3CE', '\x5', '\x194', 
		'\xCB', '\x2', '\x3CD', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3CD', 
		'\x3C4', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3C8', '\x3', '\x2', '\x2', 
		'\x2', '\x3CD', '\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3CE', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x3CF', '\x3D4', '\x5', 'j', '\x36', '\x2', '\x3D0', 
		'\x3D1', '\a', '\x83', '\x2', '\x2', '\x3D1', '\x3D3', '\x5', 'j', '\x36', 
		'\x2', '\x3D2', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D6', 
		'\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D2', '\x3', '\x2', '\x2', '\x2', 
		'\x3D4', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D5', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x3D6', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3D9', 
		'\t', '\x4', '\x2', '\x2', '\x3D8', '\x3D7', '\x3', '\x2', '\x2', '\x2', 
		'\x3D8', '\x3D9', '\x3', '\x2', '\x2', '\x2', '\x3D9', '\x3DA', '\x3', 
		'\x2', '\x2', '\x2', '\x3DA', '\x3DB', '\x5', '\x6', '\x4', '\x2', '\x3DB', 
		'\x3DC', '\x5', '\x194', '\xCB', '\x2', '\x3DC', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x3DD', '\x3E2', '\x5', '\x194', '\xCB', '\x2', '\x3DE', '\x3DF', 
		'\a', '\x83', '\x2', '\x2', '\x3DF', '\x3E1', '\x5', '\x194', '\xCB', 
		'\x2', '\x3E0', '\x3DE', '\x3', '\x2', '\x2', '\x2', '\x3E1', '\x3E4', 
		'\x3', '\x2', '\x2', '\x2', '\x3E2', '\x3E0', '\x3', '\x2', '\x2', '\x2', 
		'\x3E2', '\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3E3', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x3E4', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E8', 
		'\x5', '\x1A', '\xE', '\x2', '\x3E6', '\x3E8', '\x5', '\x8E', 'H', '\x2', 
		'\x3E7', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E7', '\x3E6', '\x3', 
		'\x2', '\x2', '\x2', '\x3E8', 'o', '\x3', '\x2', '\x2', '\x2', '\x3E9', 
		'\x3EA', '\x5', 'r', ':', '\x2', '\x3EA', '\x3EB', '\x5', 't', ';', '\x2', 
		'\x3EB', 'q', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3EE', '\a', '\x31', 
		'\x2', '\x2', '\x3ED', '\x3EF', '\x5', '\x6', '\x4', '\x2', '\x3EE', '\x3ED', 
		'\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EF', '\x3', '\x2', '\x2', '\x2', 
		'\x3EF', '\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3F1', '\x5', 
		'\x194', '\xCB', '\x2', '\x3F1', '\x3F2', '\a', '\x37', '\x2', '\x2', 
		'\x3F2', '\x3F3', '\x5', '\x1A', '\xE', '\x2', '\x3F3', 's', '\x3', '\x2', 
		'\x2', '\x2', '\x3F4', '\x3F6', '\x5', 'v', '<', '\x2', '\x3F5', '\x3F4', 
		'\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F9', '\x3', '\x2', '\x2', '\x2', 
		'\x3F7', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3F7', '\x3F8', '\x3', 
		'\x2', '\x2', '\x2', '\x3F8', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3F9', 
		'\x3F7', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3FC', '\x5', '\x82', 
		'\x42', '\x2', '\x3FB', '\x3FD', '\x5', '\x84', '\x43', '\x2', '\x3FC', 
		'\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\x3', '\x2', '\x2', 
		'\x2', '\x3FD', 'u', '\x3', '\x2', '\x2', '\x2', '\x3FE', '\x404', '\x5', 
		'r', ':', '\x2', '\x3FF', '\x404', '\x5', 'x', '=', '\x2', '\x400', '\x404', 
		'\x5', 'z', '>', '\x2', '\x401', '\x404', '\x5', '|', '?', '\x2', '\x402', 
		'\x404', '\x5', '~', '@', '\x2', '\x403', '\x3FE', '\x3', '\x2', '\x2', 
		'\x2', '\x403', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x403', '\x400', 
		'\x3', '\x2', '\x2', '\x2', '\x403', '\x401', '\x3', '\x2', '\x2', '\x2', 
		'\x403', '\x402', '\x3', '\x2', '\x2', '\x2', '\x404', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x405', '\x406', '\a', '>', '\x2', '\x2', '\x406', '\x407', 
		'\x5', '\x194', '\xCB', '\x2', '\x407', '\x408', '\a', '\x90', '\x2', 
		'\x2', '\x408', '\x409', '\x5', '\x1A', '\xE', '\x2', '\x409', 'y', '\x3', 
		'\x2', '\x2', '\x2', '\x40A', '\x40B', '\a', 'o', '\x2', '\x2', '\x40B', 
		'\x40C', '\x5', '\x1A', '\xE', '\x2', '\x40C', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x40D', '\x40F', '\a', '=', '\x2', '\x2', '\x40E', '\x410', '\x5', 
		'\x6', '\x4', '\x2', '\x40F', '\x40E', '\x3', '\x2', '\x2', '\x2', '\x40F', 
		'\x410', '\x3', '\x2', '\x2', '\x2', '\x410', '\x411', '\x3', '\x2', '\x2', 
		'\x2', '\x411', '\x412', '\x5', '\x194', '\xCB', '\x2', '\x412', '\x413', 
		'\a', '\x37', '\x2', '\x2', '\x413', '\x414', '\x5', '\x1A', '\xE', '\x2', 
		'\x414', '\x415', '\a', '\x46', '\x2', '\x2', '\x415', '\x416', '\x5', 
		'\x1A', '\xE', '\x2', '\x416', '\x417', '\a', '\'', '\x2', '\x2', '\x417', 
		'\x41A', '\x5', '\x1A', '\xE', '\x2', '\x418', '\x419', '\a', ';', '\x2', 
		'\x2', '\x419', '\x41B', '\x5', '\x194', '\xCB', '\x2', '\x41A', '\x418', 
		'\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', '\x3', '\x2', '\x2', '\x2', 
		'\x41B', '}', '\x3', '\x2', '\x2', '\x2', '\x41C', '\x41D', '\a', 'H', 
		'\x2', '\x2', '\x41D', '\x422', '\x5', '\x80', '\x41', '\x2', '\x41E', 
		'\x41F', '\a', '\x83', '\x2', '\x2', '\x41F', '\x421', '\x5', '\x80', 
		'\x41', '\x2', '\x420', '\x41E', '\x3', '\x2', '\x2', '\x2', '\x421', 
		'\x424', '\x3', '\x2', '\x2', '\x2', '\x422', '\x420', '\x3', '\x2', '\x2', 
		'\x2', '\x422', '\x423', '\x3', '\x2', '\x2', '\x2', '\x423', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x422', '\x3', '\x2', '\x2', '\x2', 
		'\x425', '\x427', '\x5', '\x1A', '\xE', '\x2', '\x426', '\x428', '\t', 
		'\n', '\x2', '\x2', '\x427', '\x426', '\x3', '\x2', '\x2', '\x2', '\x427', 
		'\x428', '\x3', '\x2', '\x2', '\x2', '\x428', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x429', '\x42A', '\a', 'V', '\x2', '\x2', '\x42A', '\x431', '\x5', 
		'\x1A', '\xE', '\x2', '\x42B', '\x42C', '\a', '\x34', '\x2', '\x2', '\x42C', 
		'\x42D', '\x5', '\x1A', '\xE', '\x2', '\x42D', '\x42E', '\a', '\x15', 
		'\x2', '\x2', '\x42E', '\x42F', '\x5', '\x1A', '\xE', '\x2', '\x42F', 
		'\x431', '\x3', '\x2', '\x2', '\x2', '\x430', '\x429', '\x3', '\x2', '\x2', 
		'\x2', '\x430', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x431', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x432', '\x433', '\a', ';', '\x2', '\x2', 
		'\x433', '\x434', '\x5', '\x194', '\xCB', '\x2', '\x434', '\x435', '\x5', 
		't', ';', '\x2', '\x435', '\x85', '\x3', '\x2', '\x2', '\x2', '\x436', 
		'\x43F', '\x5', '\x88', '\x45', '\x2', '\x437', '\x43A', '\x5', '\x90', 
		'I', '\x2', '\x438', '\x43A', '\x5', '\x98', 'M', '\x2', '\x439', '\x437', 
		'\x3', '\x2', '\x2', '\x2', '\x439', '\x438', '\x3', '\x2', '\x2', '\x2', 
		'\x43A', '\x43B', '\x3', '\x2', '\x2', '\x2', '\x43B', '\x43C', '\a', 
		'\x85', '\x2', '\x2', '\x43C', '\x43F', '\x3', '\x2', '\x2', '\x2', '\x43D', 
		'\x43F', '\x5', '\x8A', '\x46', '\x2', '\x43E', '\x436', '\x3', '\x2', 
		'\x2', '\x2', '\x43E', '\x439', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x43D', 
		'\x3', '\x2', '\x2', '\x2', '\x43F', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x440', '\x441', '\x5', '\x194', '\xCB', '\x2', '\x441', '\x442', '\a', 
		'\x84', '\x2', '\x2', '\x442', '\x443', '\x5', '\x86', '\x44', '\x2', 
		'\x443', '\x89', '\x3', '\x2', '\x2', '\x2', '\x444', '\x447', '\x5', 
		'\x8E', 'H', '\x2', '\x445', '\x447', '\x5', '\x8C', 'G', '\x2', '\x446', 
		'\x444', '\x3', '\x2', '\x2', '\x2', '\x446', '\x445', '\x3', '\x2', '\x2', 
		'\x2', '\x447', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x448', '\x4C8', 
		'\a', '\x85', '\x2', '\x2', '\x449', '\x44A', '\x5', '\x1A', '\xE', '\x2', 
		'\x44A', '\x44B', '\a', '\x85', '\x2', '\x2', '\x44B', '\x4C8', '\x3', 
		'\x2', '\x2', '\x2', '\x44C', '\x44D', '\a', '\x35', '\x2', '\x2', '\x44D', 
		'\x44E', '\a', '\x80', '\x2', '\x2', '\x44E', '\x44F', '\x5', '\x1A', 
		'\xE', '\x2', '\x44F', '\x450', '\a', '\x81', '\x2', '\x2', '\x450', '\x453', 
		'\x5', '\x9A', 'N', '\x2', '\x451', '\x452', '\a', '%', '\x2', '\x2', 
		'\x452', '\x454', '\x5', '\x9A', 'N', '\x2', '\x453', '\x451', '\x3', 
		'\x2', '\x2', '\x2', '\x453', '\x454', '\x3', '\x2', '\x2', '\x2', '\x454', 
		'\x4C8', '\x3', '\x2', '\x2', '\x2', '\x455', '\x456', '\a', '^', '\x2', 
		'\x2', '\x456', '\x457', '\a', '\x80', '\x2', '\x2', '\x457', '\x458', 
		'\x5', '\x1A', '\xE', '\x2', '\x458', '\x459', '\a', '\x81', '\x2', '\x2', 
		'\x459', '\x45D', '\a', '|', '\x2', '\x2', '\x45A', '\x45C', '\x5', '\x9C', 
		'O', '\x2', '\x45B', '\x45A', '\x3', '\x2', '\x2', '\x2', '\x45C', '\x45F', 
		'\x3', '\x2', '\x2', '\x2', '\x45D', '\x45B', '\x3', '\x2', '\x2', '\x2', 
		'\x45D', '\x45E', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x460', '\x3', 
		'\x2', '\x2', '\x2', '\x45F', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x460', 
		'\x461', '\a', '}', '\x2', '\x2', '\x461', '\x4C8', '\x3', '\x2', '\x2', 
		'\x2', '\x462', '\x463', '\a', 'p', '\x2', '\x2', '\x463', '\x464', '\a', 
		'\x80', '\x2', '\x2', '\x464', '\x465', '\x5', '\x1A', '\xE', '\x2', '\x465', 
		'\x466', '\a', '\x81', '\x2', '\x2', '\x466', '\x467', '\x5', '\x8A', 
		'\x46', '\x2', '\x467', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x468', 
		'\x469', '\a', '\"', '\x2', '\x2', '\x469', '\x46A', '\x5', '\x8A', '\x46', 
		'\x2', '\x46A', '\x46B', '\a', 'p', '\x2', '\x2', '\x46B', '\x46C', '\a', 
		'\x80', '\x2', '\x2', '\x46C', '\x46D', '\x5', '\x1A', '\xE', '\x2', '\x46D', 
		'\x46E', '\a', '\x81', '\x2', '\x2', '\x46E', '\x46F', '\a', '\x85', '\x2', 
		'\x2', '\x46F', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x470', '\x471', 
		'\a', '/', '\x2', '\x2', '\x471', '\x473', '\a', '\x80', '\x2', '\x2', 
		'\x472', '\x474', '\x5', '\xA2', 'R', '\x2', '\x473', '\x472', '\x3', 
		'\x2', '\x2', '\x2', '\x473', '\x474', '\x3', '\x2', '\x2', '\x2', '\x474', 
		'\x475', '\x3', '\x2', '\x2', '\x2', '\x475', '\x477', '\a', '\x85', '\x2', 
		'\x2', '\x476', '\x478', '\x5', '\x1A', '\xE', '\x2', '\x477', '\x476', 
		'\x3', '\x2', '\x2', '\x2', '\x477', '\x478', '\x3', '\x2', '\x2', '\x2', 
		'\x478', '\x479', '\x3', '\x2', '\x2', '\x2', '\x479', '\x47B', '\a', 
		'\x85', '\x2', '\x2', '\x47A', '\x47C', '\x5', '\xA4', 'S', '\x2', '\x47B', 
		'\x47A', '\x3', '\x2', '\x2', '\x2', '\x47B', '\x47C', '\x3', '\x2', '\x2', 
		'\x2', '\x47C', '\x47D', '\x3', '\x2', '\x2', '\x2', '\x47D', '\x47E', 
		'\a', '\x81', '\x2', '\x2', '\x47E', '\x4C8', '\x5', '\x8A', '\x46', '\x2', 
		'\x47F', '\x480', '\a', '\x30', '\x2', '\x2', '\x480', '\x481', '\a', 
		'\x80', '\x2', '\x2', '\x481', '\x482', '\x5', '\x92', 'J', '\x2', '\x482', 
		'\x483', '\x5', '\x194', '\xCB', '\x2', '\x483', '\x484', '\a', '\x37', 
		'\x2', '\x2', '\x484', '\x485', '\x5', '\x1A', '\xE', '\x2', '\x485', 
		'\x486', '\a', '\x81', '\x2', '\x2', '\x486', '\x487', '\x5', '\x8A', 
		'\x46', '\x2', '\x487', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x488', 
		'\x489', '\a', '\x14', '\x2', '\x2', '\x489', '\x4C8', '\a', '\x85', '\x2', 
		'\x2', '\x48A', '\x48B', '\a', '\x1D', '\x2', '\x2', '\x48B', '\x4C8', 
		'\a', '\x85', '\x2', '\x2', '\x48C', '\x491', '\a', '\x33', '\x2', '\x2', 
		'\x48D', '\x492', '\x5', '\x194', '\xCB', '\x2', '\x48E', '\x48F', '\a', 
		'\x17', '\x2', '\x2', '\x48F', '\x492', '\x5', '\x1A', '\xE', '\x2', '\x490', 
		'\x492', '\a', '\x1F', '\x2', '\x2', '\x491', '\x48D', '\x3', '\x2', '\x2', 
		'\x2', '\x491', '\x48E', '\x3', '\x2', '\x2', '\x2', '\x491', '\x490', 
		'\x3', '\x2', '\x2', '\x2', '\x492', '\x493', '\x3', '\x2', '\x2', '\x2', 
		'\x493', '\x4C8', '\a', '\x85', '\x2', '\x2', '\x494', '\x496', '\a', 
		'S', '\x2', '\x2', '\x495', '\x497', '\x5', '\x1A', '\xE', '\x2', '\x496', 
		'\x495', '\x3', '\x2', '\x2', '\x2', '\x496', '\x497', '\x3', '\x2', '\x2', 
		'\x2', '\x497', '\x498', '\x3', '\x2', '\x2', '\x2', '\x498', '\x4C8', 
		'\a', '\x85', '\x2', '\x2', '\x499', '\x49B', '\a', '`', '\x2', '\x2', 
		'\x49A', '\x49C', '\x5', '\x1A', '\xE', '\x2', '\x49B', '\x49A', '\x3', 
		'\x2', '\x2', '\x2', '\x49B', '\x49C', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\x49D', '\x3', '\x2', '\x2', '\x2', '\x49D', '\x4C8', '\a', '\x85', '\x2', 
		'\x2', '\x49E', '\x49F', '\a', '\x62', '\x2', '\x2', '\x49F', '\x4A5', 
		'\x5', '\x8E', 'H', '\x2', '\x4A0', '\x4A2', '\x5', '\xA6', 'T', '\x2', 
		'\x4A1', '\x4A3', '\x5', '\xAE', 'X', '\x2', '\x4A2', '\x4A1', '\x3', 
		'\x2', '\x2', '\x2', '\x4A2', '\x4A3', '\x3', '\x2', '\x2', '\x2', '\x4A3', 
		'\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x4A6', '\x5', '\xAE', 
		'X', '\x2', '\x4A5', '\x4A0', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A4', 
		'\x3', '\x2', '\x2', '\x2', '\x4A6', '\x4C8', '\x3', '\x2', '\x2', '\x2', 
		'\x4A7', '\x4A8', '\a', '\x1A', '\x2', '\x2', '\x4A8', '\x4C8', '\x5', 
		'\x8E', 'H', '\x2', '\x4A9', '\x4AA', '\a', '\x66', '\x2', '\x2', '\x4AA', 
		'\x4C8', '\x5', '\x8E', 'H', '\x2', '\x4AB', '\x4AC', '\a', '?', '\x2', 
		'\x2', '\x4AC', '\x4AD', '\a', '\x80', '\x2', '\x2', '\x4AD', '\x4AE', 
		'\x5', '\x1A', '\xE', '\x2', '\x4AE', '\x4AF', '\a', '\x81', '\x2', '\x2', 
		'\x4AF', '\x4B0', '\x5', '\x8A', '\x46', '\x2', '\x4B0', '\x4C8', '\x3', 
		'\x2', '\x2', '\x2', '\x4B1', '\x4B2', '\a', 'i', '\x2', '\x2', '\x4B2', 
		'\x4B3', '\a', '\x80', '\x2', '\x2', '\x4B3', '\x4B4', '\x5', '\xB0', 
		'Y', '\x2', '\x4B4', '\x4B5', '\a', '\x81', '\x2', '\x2', '\x4B5', '\x4B6', 
		'\x5', '\x8A', '\x46', '\x2', '\x4B6', '\x4C8', '\x3', '\x2', '\x2', '\x2', 
		'\x4B7', '\x4BB', '\a', 'q', '\x2', '\x2', '\x4B8', '\x4B9', '\a', 'S', 
		'\x2', '\x2', '\x4B9', '\x4BC', '\x5', '\x1A', '\xE', '\x2', '\x4BA', 
		'\x4BC', '\a', '\x14', '\x2', '\x2', '\x4BB', '\x4B8', '\x3', '\x2', '\x2', 
		'\x2', '\x4BB', '\x4BA', '\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4BD', 
		'\x3', '\x2', '\x2', '\x2', '\x4BD', '\x4C8', '\a', '\x85', '\x2', '\x2', 
		'\x4BE', '\x4BF', '\a', 'g', '\x2', '\x2', '\x4BF', '\x4C8', '\x5', '\x8E', 
		'H', '\x2', '\x4C0', '\x4C1', '\a', '-', '\x2', '\x2', '\x4C1', '\x4C2', 
		'\a', '\x80', '\x2', '\x2', '\x4C2', '\x4C3', '\x5', '\x14C', '\xA7', 
		'\x2', '\x4C3', '\x4C4', '\x5', '\x14E', '\xA8', '\x2', '\x4C4', '\x4C5', 
		'\a', '\x81', '\x2', '\x2', '\x4C5', '\x4C6', '\x5', '\x8A', '\x46', '\x2', 
		'\x4C6', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x448', '\x3', 
		'\x2', '\x2', '\x2', '\x4C7', '\x449', '\x3', '\x2', '\x2', '\x2', '\x4C7', 
		'\x44C', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x455', '\x3', '\x2', '\x2', 
		'\x2', '\x4C7', '\x462', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x468', 
		'\x3', '\x2', '\x2', '\x2', '\x4C7', '\x470', '\x3', '\x2', '\x2', '\x2', 
		'\x4C7', '\x47F', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x488', '\x3', 
		'\x2', '\x2', '\x2', '\x4C7', '\x48A', '\x3', '\x2', '\x2', '\x2', '\x4C7', 
		'\x48C', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x494', '\x3', '\x2', '\x2', 
		'\x2', '\x4C7', '\x499', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x49E', 
		'\x3', '\x2', '\x2', '\x2', '\x4C7', '\x4A7', '\x3', '\x2', '\x2', '\x2', 
		'\x4C7', '\x4A9', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x4AB', '\x3', 
		'\x2', '\x2', '\x2', '\x4C7', '\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4C7', 
		'\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x4BE', '\x3', '\x2', '\x2', 
		'\x2', '\x4C7', '\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4C8', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4CB', '\a', '|', '\x2', '\x2', 
		'\x4CA', '\x4CC', '\x5', '\xA0', 'Q', '\x2', '\x4CB', '\x4CA', '\x3', 
		'\x2', '\x2', '\x2', '\x4CB', '\x4CC', '\x3', '\x2', '\x2', '\x2', '\x4CC', 
		'\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4CE', '\a', '}', '\x2', 
		'\x2', '\x4CE', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D0', 
		'\x5', '\x92', 'J', '\x2', '\x4D0', '\x4D5', '\x5', '\x94', 'K', '\x2', 
		'\x4D1', '\x4D2', '\a', '\x83', '\x2', '\x2', '\x4D2', '\x4D4', '\x5', 
		'\x94', 'K', '\x2', '\x4D3', '\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4D4', 
		'\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4D5', '\x4D3', '\x3', '\x2', '\x2', 
		'\x2', '\x4D5', '\x4D6', '\x3', '\x2', '\x2', '\x2', '\x4D6', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x4D7', '\x4D5', '\x3', '\x2', '\x2', '\x2', 
		'\x4D8', '\x4DB', '\a', 'j', '\x2', '\x2', '\x4D9', '\x4DB', '\x5', '\x6', 
		'\x4', '\x2', '\x4DA', '\x4D8', '\x3', '\x2', '\x2', '\x2', '\x4DA', '\x4D9', 
		'\x3', '\x2', '\x2', '\x2', '\x4DB', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x4DC', '\x4DF', '\x5', '\x194', '\xCB', '\x2', '\x4DD', '\x4DE', '\a', 
		'\x90', '\x2', '\x2', '\x4DE', '\x4E0', '\x5', '\x96', 'L', '\x2', '\x4DF', 
		'\x4DD', '\x3', '\x2', '\x2', '\x2', '\x4DF', '\x4E0', '\x3', '\x2', '\x2', 
		'\x2', '\x4E0', '\x95', '\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4E5', 
		'\x5', '\x1A', '\xE', '\x2', '\x4E2', '\x4E5', '\x5', '\x126', '\x94', 
		'\x2', '\x4E3', '\x4E5', '\x5', '\x156', '\xAC', '\x2', '\x4E4', '\x4E1', 
		'\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4E2', '\x3', '\x2', '\x2', '\x2', 
		'\x4E4', '\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x4E6', '\x4E7', '\a', '\x1C', '\x2', '\x2', '\x4E7', 
		'\x4E8', '\x5', '\x6', '\x4', '\x2', '\x4E8', '\x4E9', '\x5', '\xEA', 
		'v', '\x2', '\x4E9', '\x99', '\x3', '\x2', '\x2', '\x2', '\x4EA', '\x4ED', 
		'\x5', '\x8E', 'H', '\x2', '\x4EB', '\x4ED', '\x5', '\x8C', 'G', '\x2', 
		'\x4EC', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4EB', '\x3', 
		'\x2', '\x2', '\x2', '\x4ED', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x4EE', 
		'\x4F0', '\x5', '\x9E', 'P', '\x2', '\x4EF', '\x4EE', '\x3', '\x2', '\x2', 
		'\x2', '\x4F0', '\x4F1', '\x3', '\x2', '\x2', '\x2', '\x4F1', '\x4EF', 
		'\x3', '\x2', '\x2', '\x2', '\x4F1', '\x4F2', '\x3', '\x2', '\x2', '\x2', 
		'\x4F2', '\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4F3', '\x4F4', '\x5', 
		'\xA0', 'Q', '\x2', '\x4F4', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x4F5', 
		'\x4F6', '\a', '\x17', '\x2', '\x2', '\x4F6', '\x4F7', '\x5', '\x1A', 
		'\xE', '\x2', '\x4F7', '\x4F8', '\a', '\x84', '\x2', '\x2', '\x4F8', '\x4FC', 
		'\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4FA', '\a', '\x1F', '\x2', '\x2', 
		'\x4FA', '\x4FC', '\a', '\x84', '\x2', '\x2', '\x4FB', '\x4F5', '\x3', 
		'\x2', '\x2', '\x2', '\x4FB', '\x4F9', '\x3', '\x2', '\x2', '\x2', '\x4FC', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x4FD', '\x4FF', '\x5', '\x86', '\x44', 
		'\x2', '\x4FE', '\x4FD', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x500', 
		'\x3', '\x2', '\x2', '\x2', '\x500', '\x4FE', '\x3', '\x2', '\x2', '\x2', 
		'\x500', '\x501', '\x3', '\x2', '\x2', '\x2', '\x501', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x502', '\x50C', '\x5', '\x90', 'I', '\x2', '\x503', 
		'\x508', '\x5', '\x1A', '\xE', '\x2', '\x504', '\x505', '\a', '\x83', 
		'\x2', '\x2', '\x505', '\x507', '\x5', '\x1A', '\xE', '\x2', '\x506', 
		'\x504', '\x3', '\x2', '\x2', '\x2', '\x507', '\x50A', '\x3', '\x2', '\x2', 
		'\x2', '\x508', '\x506', '\x3', '\x2', '\x2', '\x2', '\x508', '\x509', 
		'\x3', '\x2', '\x2', '\x2', '\x509', '\x50C', '\x3', '\x2', '\x2', '\x2', 
		'\x50A', '\x508', '\x3', '\x2', '\x2', '\x2', '\x50B', '\x502', '\x3', 
		'\x2', '\x2', '\x2', '\x50B', '\x503', '\x3', '\x2', '\x2', '\x2', '\x50C', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x50D', '\x512', '\x5', '\x1A', '\xE', 
		'\x2', '\x50E', '\x50F', '\a', '\x83', '\x2', '\x2', '\x50F', '\x511', 
		'\x5', '\x1A', '\xE', '\x2', '\x510', '\x50E', '\x3', '\x2', '\x2', '\x2', 
		'\x511', '\x514', '\x3', '\x2', '\x2', '\x2', '\x512', '\x510', '\x3', 
		'\x2', '\x2', '\x2', '\x512', '\x513', '\x3', '\x2', '\x2', '\x2', '\x513', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\x514', '\x512', '\x3', '\x2', '\x2', 
		'\x2', '\x515', '\x519', '\x5', '\xA8', 'U', '\x2', '\x516', '\x518', 
		'\x5', '\xA8', 'U', '\x2', '\x517', '\x516', '\x3', '\x2', '\x2', '\x2', 
		'\x518', '\x51B', '\x3', '\x2', '\x2', '\x2', '\x519', '\x517', '\x3', 
		'\x2', '\x2', '\x2', '\x519', '\x51A', '\x3', '\x2', '\x2', '\x2', '\x51A', 
		'\x51D', '\x3', '\x2', '\x2', '\x2', '\x51B', '\x519', '\x3', '\x2', '\x2', 
		'\x2', '\x51C', '\x51E', '\x5', '\xAA', 'V', '\x2', '\x51D', '\x51C', 
		'\x3', '\x2', '\x2', '\x2', '\x51D', '\x51E', '\x3', '\x2', '\x2', '\x2', 
		'\x51E', '\x521', '\x3', '\x2', '\x2', '\x2', '\x51F', '\x521', '\x5', 
		'\xAA', 'V', '\x2', '\x520', '\x515', '\x3', '\x2', '\x2', '\x2', '\x520', 
		'\x51F', '\x3', '\x2', '\x2', '\x2', '\x521', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\x522', '\x523', '\a', '\x18', '\x2', '\x2', '\x523', '\x524', 
		'\a', '\x80', '\x2', '\x2', '\x524', '\x526', '\x5', '\x12', '\n', '\x2', 
		'\x525', '\x527', '\x5', '\x194', '\xCB', '\x2', '\x526', '\x525', '\x3', 
		'\x2', '\x2', '\x2', '\x526', '\x527', '\x3', '\x2', '\x2', '\x2', '\x527', 
		'\x528', '\x3', '\x2', '\x2', '\x2', '\x528', '\x52A', '\a', '\x81', '\x2', 
		'\x2', '\x529', '\x52B', '\x5', '\xAC', 'W', '\x2', '\x52A', '\x529', 
		'\x3', '\x2', '\x2', '\x2', '\x52A', '\x52B', '\x3', '\x2', '\x2', '\x2', 
		'\x52B', '\x52C', '\x3', '\x2', '\x2', '\x2', '\x52C', '\x52D', '\x5', 
		'\x8E', 'H', '\x2', '\x52D', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x52E', 
		'\x530', '\a', '\x18', '\x2', '\x2', '\x52F', '\x531', '\x5', '\xAC', 
		'W', '\x2', '\x530', '\x52F', '\x3', '\x2', '\x2', '\x2', '\x530', '\x531', 
		'\x3', '\x2', '\x2', '\x2', '\x531', '\x532', '\x3', '\x2', '\x2', '\x2', 
		'\x532', '\x533', '\x5', '\x8E', 'H', '\x2', '\x533', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\x534', '\x535', '\a', 'n', '\x2', '\x2', '\x535', '\x536', 
		'\a', '\x80', '\x2', '\x2', '\x536', '\x537', '\x5', '\x1A', '\xE', '\x2', 
		'\x537', '\x538', '\a', '\x81', '\x2', '\x2', '\x538', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\x539', '\x53A', '\a', ',', '\x2', '\x2', '\x53A', 
		'\x53B', '\x5', '\x8E', 'H', '\x2', '\x53B', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x53C', '\x53F', '\x5', '\x90', 'I', '\x2', '\x53D', '\x53F', 
		'\x5', '\x1A', '\xE', '\x2', '\x53E', '\x53C', '\x3', '\x2', '\x2', '\x2', 
		'\x53E', '\x53D', '\x3', '\x2', '\x2', '\x2', '\x53F', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\x540', '\x541', '\a', '\x42', '\x2', '\x2', '\x541', 
		'\x542', '\x5', '\xB4', '[', '\x2', '\x542', '\x544', '\x5', '\xB6', '\\', 
		'\x2', '\x543', '\x545', '\a', '\x85', '\x2', '\x2', '\x544', '\x543', 
		'\x3', '\x2', '\x2', '\x2', '\x544', '\x545', '\x3', '\x2', '\x2', '\x2', 
		'\x545', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x546', '\x54B', '\x5', 
		'\x194', '\xCB', '\x2', '\x547', '\x548', '\a', '\x82', '\x2', '\x2', 
		'\x548', '\x54A', '\x5', '\x194', '\xCB', '\x2', '\x549', '\x547', '\x3', 
		'\x2', '\x2', '\x2', '\x54A', '\x54D', '\x3', '\x2', '\x2', '\x2', '\x54B', 
		'\x549', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x54C', '\x3', '\x2', '\x2', 
		'\x2', '\x54C', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x54D', '\x54B', 
		'\x3', '\x2', '\x2', '\x2', '\x54E', '\x550', '\a', '|', '\x2', '\x2', 
		'\x54F', '\x551', '\x5', '\xB8', ']', '\x2', '\x550', '\x54F', '\x3', 
		'\x2', '\x2', '\x2', '\x550', '\x551', '\x3', '\x2', '\x2', '\x2', '\x551', 
		'\x553', '\x3', '\x2', '\x2', '\x2', '\x552', '\x554', '\x5', '\xBC', 
		'_', '\x2', '\x553', '\x552', '\x3', '\x2', '\x2', '\x2', '\x553', '\x554', 
		'\x3', '\x2', '\x2', '\x2', '\x554', '\x556', '\x3', '\x2', '\x2', '\x2', 
		'\x555', '\x557', '\x5', '\xC0', '\x61', '\x2', '\x556', '\x555', '\x3', 
		'\x2', '\x2', '\x2', '\x556', '\x557', '\x3', '\x2', '\x2', '\x2', '\x557', 
		'\x558', '\x3', '\x2', '\x2', '\x2', '\x558', '\x559', '\a', '}', '\x2', 
		'\x2', '\x559', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x55A', '\x55C', 
		'\x5', '\xBA', '^', '\x2', '\x55B', '\x55A', '\x3', '\x2', '\x2', '\x2', 
		'\x55C', '\x55D', '\x3', '\x2', '\x2', '\x2', '\x55D', '\x55B', '\x3', 
		'\x2', '\x2', '\x2', '\x55D', '\x55E', '\x3', '\x2', '\x2', '\x2', '\x55E', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\x55F', '\x560', '\a', '*', '\x2', 
		'\x2', '\x560', '\x561', '\a', '\f', '\x2', '\x2', '\x561', '\x562', '\x5', 
		'\x194', '\xCB', '\x2', '\x562', '\x563', '\a', '\x85', '\x2', '\x2', 
		'\x563', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x564', '\x566', '\x5', 
		'\xBE', '`', '\x2', '\x565', '\x564', '\x3', '\x2', '\x2', '\x2', '\x566', 
		'\x567', '\x3', '\x2', '\x2', '\x2', '\x567', '\x565', '\x3', '\x2', '\x2', 
		'\x2', '\x567', '\x568', '\x3', '\x2', '\x2', '\x2', '\x568', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\x569', '\x56A', '\a', 'i', '\x2', '\x2', 
		'\x56A', '\x56B', '\x5', '\x194', '\xCB', '\x2', '\x56B', '\x56C', '\a', 
		'\x90', '\x2', '\x2', '\x56C', '\x56D', '\x5', '\x4', '\x3', '\x2', '\x56D', 
		'\x56E', '\a', '\x85', '\x2', '\x2', '\x56E', '\x579', '\x3', '\x2', '\x2', 
		'\x2', '\x56F', '\x570', '\a', 'i', '\x2', '\x2', '\x570', '\x571', '\x5', 
		'\x4', '\x3', '\x2', '\x571', '\x572', '\a', '\x85', '\x2', '\x2', '\x572', 
		'\x579', '\x3', '\x2', '\x2', '\x2', '\x573', '\x574', '\a', 'i', '\x2', 
		'\x2', '\x574', '\x575', '\a', '[', '\x2', '\x2', '\x575', '\x576', '\x5', 
		'\x4', '\x3', '\x2', '\x576', '\x577', '\a', '\x85', '\x2', '\x2', '\x577', 
		'\x579', '\x3', '\x2', '\x2', '\x2', '\x578', '\x569', '\x3', '\x2', '\x2', 
		'\x2', '\x578', '\x56F', '\x3', '\x2', '\x2', '\x2', '\x578', '\x573', 
		'\x3', '\x2', '\x2', '\x2', '\x579', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\x57A', '\x57C', '\x5', '\xC2', '\x62', '\x2', '\x57B', '\x57A', '\x3', 
		'\x2', '\x2', '\x2', '\x57C', '\x57D', '\x3', '\x2', '\x2', '\x2', '\x57D', 
		'\x57B', '\x3', '\x2', '\x2', '\x2', '\x57D', '\x57E', '\x3', '\x2', '\x2', 
		'\x2', '\x57E', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x57F', '\x582', 
		'\x5', '\xB2', 'Z', '\x2', '\x580', '\x582', '\x5', '\xC4', '\x63', '\x2', 
		'\x581', '\x57F', '\x3', '\x2', '\x2', '\x2', '\x581', '\x580', '\x3', 
		'\x2', '\x2', '\x2', '\x582', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x583', 
		'\x585', '\x5', '\x140', '\xA1', '\x2', '\x584', '\x583', '\x3', '\x2', 
		'\x2', '\x2', '\x584', '\x585', '\x3', '\x2', '\x2', '\x2', '\x585', '\x587', 
		'\x3', '\x2', '\x2', '\x2', '\x586', '\x588', '\x5', '\xE2', 'r', '\x2', 
		'\x587', '\x586', '\x3', '\x2', '\x2', '\x2', '\x587', '\x588', '\x3', 
		'\x2', '\x2', '\x2', '\x588', '\x58E', '\x3', '\x2', '\x2', '\x2', '\x589', 
		'\x58F', '\x5', '\x170', '\xB9', '\x2', '\x58A', '\x58F', '\x5', '\x172', 
		'\xBA', '\x2', '\x58B', '\x58F', '\x5', '\x174', '\xBB', '\x2', '\x58C', 
		'\x58F', '\x5', '\x176', '\xBC', '\x2', '\x58D', '\x58F', '\x5', '\x178', 
		'\xBD', '\x2', '\x58E', '\x589', '\x3', '\x2', '\x2', '\x2', '\x58E', 
		'\x58A', '\x3', '\x2', '\x2', '\x2', '\x58E', '\x58B', '\x3', '\x2', '\x2', 
		'\x2', '\x58E', '\x58C', '\x3', '\x2', '\x2', '\x2', '\x58E', '\x58D', 
		'\x3', '\x2', '\x2', '\x2', '\x58F', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\x590', '\x591', '\x5', '\x194', '\xCB', '\x2', '\x591', '\x592', '\a', 
		'\x94', '\x2', '\x2', '\x592', '\x594', '\x5', '\x194', '\xCB', '\x2', 
		'\x593', '\x595', '\x5', '\x14', '\v', '\x2', '\x594', '\x593', '\x3', 
		'\x2', '\x2', '\x2', '\x594', '\x595', '\x3', '\x2', '\x2', '\x2', '\x595', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\x596', '\x597', '\a', '\x91', '\x2', 
		'\x2', '\x597', '\x59C', '\x5', '\xCA', '\x66', '\x2', '\x598', '\x599', 
		'\a', '\x83', '\x2', '\x2', '\x599', '\x59B', '\x5', '\xCA', '\x66', '\x2', 
		'\x59A', '\x598', '\x3', '\x2', '\x2', '\x2', '\x59B', '\x59E', '\x3', 
		'\x2', '\x2', '\x2', '\x59C', '\x59A', '\x3', '\x2', '\x2', '\x2', '\x59C', 
		'\x59D', '\x3', '\x2', '\x2', '\x2', '\x59D', '\x59F', '\x3', '\x2', '\x2', 
		'\x2', '\x59E', '\x59C', '\x3', '\x2', '\x2', '\x2', '\x59F', '\x5A0', 
		'\a', '\x92', '\x2', '\x2', '\x5A0', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\x5A1', '\x5A3', '\x5', '\x140', '\xA1', '\x2', '\x5A2', '\x5A1', '\x3', 
		'\x2', '\x2', '\x2', '\x5A2', '\x5A3', '\x3', '\x2', '\x2', '\x2', '\x5A3', 
		'\x5A4', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x5A5', '\x5', '\x194', 
		'\xCB', '\x2', '\x5A5', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5A7', 
		'\a', '\x84', '\x2', '\x2', '\x5A7', '\x5AC', '\x5', '\x12', '\n', '\x2', 
		'\x5A8', '\x5A9', '\a', '\x83', '\x2', '\x2', '\x5A9', '\x5AB', '\x5', 
		'\x4', '\x3', '\x2', '\x5AA', '\x5A8', '\x3', '\x2', '\x2', '\x2', '\x5AB', 
		'\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5AC', '\x5AA', '\x3', '\x2', '\x2', 
		'\x2', '\x5AC', '\x5AD', '\x3', '\x2', '\x2', '\x2', '\x5AD', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\x5AE', '\x5AC', '\x3', '\x2', '\x2', '\x2', 
		'\x5AF', '\x5B4', '\x5', '\x4', '\x3', '\x2', '\x5B0', '\x5B1', '\a', 
		'\x83', '\x2', '\x2', '\x5B1', '\x5B3', '\x5', '\x4', '\x3', '\x2', '\x5B2', 
		'\x5B0', '\x3', '\x2', '\x2', '\x2', '\x5B3', '\x5B6', '\x3', '\x2', '\x2', 
		'\x2', '\x5B4', '\x5B2', '\x3', '\x2', '\x2', '\x2', '\x5B4', '\x5B5', 
		'\x3', '\x2', '\x2', '\x2', '\x5B5', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\x5B6', '\x5B4', '\x3', '\x2', '\x2', '\x2', '\x5B7', '\x5B9', '\x5', 
		'\xD2', 'j', '\x2', '\x5B8', '\x5B7', '\x3', '\x2', '\x2', '\x2', '\x5B9', 
		'\x5BA', '\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5B8', '\x3', '\x2', '\x2', 
		'\x2', '\x5BA', '\x5BB', '\x3', '\x2', '\x2', '\x2', '\x5BB', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5BD', '\a', 'o', '\x2', '\x2', 
		'\x5BD', '\x5BE', '\x5', '\x194', '\xCB', '\x2', '\x5BE', '\x5BF', '\a', 
		'\x84', '\x2', '\x2', '\x5BF', '\x5C0', '\x5', '\xD4', 'k', '\x2', '\x5C0', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5CC', '\x5', '\xDA', 'n', 
		'\x2', '\x5C2', '\x5C5', '\x5', '\xD6', 'l', '\x2', '\x5C3', '\x5C4', 
		'\a', '\x83', '\x2', '\x2', '\x5C4', '\x5C6', '\x5', '\xD8', 'm', '\x2', 
		'\x5C5', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5C5', '\x5C6', '\x3', 
		'\x2', '\x2', '\x2', '\x5C6', '\x5C9', '\x3', '\x2', '\x2', '\x2', '\x5C7', 
		'\x5C8', '\a', '\x83', '\x2', '\x2', '\x5C8', '\x5CA', '\x5', '\xDA', 
		'n', '\x2', '\x5C9', '\x5C7', '\x3', '\x2', '\x2', '\x2', '\x5C9', '\x5CA', 
		'\x3', '\x2', '\x2', '\x2', '\x5CA', '\x5CC', '\x3', '\x2', '\x2', '\x2', 
		'\x5CB', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5C2', '\x3', 
		'\x2', '\x2', '\x2', '\x5CC', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x5CD', 
		'\x5D1', '\x5', '\x12', '\n', '\x2', '\x5CE', '\x5D1', '\a', '\x1B', '\x2', 
		'\x2', '\x5CF', '\x5D1', '\a', ']', '\x2', '\x2', '\x5D0', '\x5CD', '\x3', 
		'\x2', '\x2', '\x2', '\x5D0', '\x5CE', '\x3', '\x2', '\x2', '\x2', '\x5D0', 
		'\x5CF', '\x3', '\x2', '\x2', '\x2', '\x5D1', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\x5D2', '\x5D7', '\x5', '\x4', '\x3', '\x2', '\x5D3', '\x5D4', 
		'\a', '\x83', '\x2', '\x2', '\x5D4', '\x5D6', '\x5', '\x4', '\x3', '\x2', 
		'\x5D5', '\x5D3', '\x3', '\x2', '\x2', '\x2', '\x5D6', '\x5D9', '\x3', 
		'\x2', '\x2', '\x2', '\x5D7', '\x5D5', '\x3', '\x2', '\x2', '\x2', '\x5D7', 
		'\x5D8', '\x3', '\x2', '\x2', '\x2', '\x5D8', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\x5D9', '\x5D7', '\x3', '\x2', '\x2', '\x2', '\x5DA', '\x5DB', 
		'\a', '\x43', '\x2', '\x2', '\x5DB', '\x5DC', '\a', '\x80', '\x2', '\x2', 
		'\x5DC', '\x5DD', '\a', '\x81', '\x2', '\x2', '\x5DD', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\x5DE', '\x5E0', '\a', '|', '\x2', '\x2', '\x5DF', 
		'\x5E1', '\x5', '\xDE', 'p', '\x2', '\x5E0', '\x5DF', '\x3', '\x2', '\x2', 
		'\x2', '\x5E0', '\x5E1', '\x3', '\x2', '\x2', '\x2', '\x5E1', '\x5E2', 
		'\x3', '\x2', '\x2', '\x2', '\x5E2', '\x5E3', '\a', '}', '\x2', '\x2', 
		'\x5E3', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5E6', '\x5', 
		'\xE0', 'q', '\x2', '\x5E5', '\x5E4', '\x3', '\x2', '\x2', '\x2', '\x5E6', 
		'\x5E7', '\x3', '\x2', '\x2', '\x2', '\x5E7', '\x5E5', '\x3', '\x2', '\x2', 
		'\x2', '\x5E7', '\x5E8', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5EB', '\x5', '\x140', '\xA1', 
		'\x2', '\x5EA', '\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5EA', '\x5EB', 
		'\x3', '\x2', '\x2', '\x2', '\x5EB', '\x5ED', '\x3', '\x2', '\x2', '\x2', 
		'\x5EC', '\x5EE', '\x5', '\xE2', 'r', '\x2', '\x5ED', '\x5EC', '\x3', 
		'\x2', '\x2', '\x2', '\x5ED', '\x5EE', '\x3', '\x2', '\x2', '\x2', '\x5EE', 
		'\x5F1', '\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5F2', '\x5', '\xE6', 
		't', '\x2', '\x5F0', '\x5F2', '\x5', '\x184', '\xC3', '\x2', '\x5F1', 
		'\x5EF', '\x3', '\x2', '\x2', '\x2', '\x5F1', '\x5F0', '\x3', '\x2', '\x2', 
		'\x2', '\x5F2', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x5F3', '\x5F5', 
		'\x5', '\xE4', 's', '\x2', '\x5F4', '\x5F3', '\x3', '\x2', '\x2', '\x2', 
		'\x5F5', '\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5F4', '\x3', 
		'\x2', '\x2', '\x2', '\x5F6', '\x5F7', '\x3', '\x2', '\x2', '\x2', '\x5F7', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\x5F8', '\x5F9', '\t', '\v', '\x2', 
		'\x2', '\x5F9', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x5FA', '\x60E', 
		'\x5', '\x180', '\xC1', '\x2', '\x5FB', '\x60E', '\x5', '\xE8', 'u', '\x2', 
		'\x5FC', '\x60E', '\x5', '\x17A', '\xBE', '\x2', '\x5FD', '\x603', '\x5', 
		'\x116', '\x8C', '\x2', '\x5FE', '\x604', '\x5', '\x11A', '\x8E', '\x2', 
		'\x5FF', '\x600', '\x5', '\x158', '\xAD', '\x2', '\x600', '\x601', '\x5', 
		'\x1A', '\xE', '\x2', '\x601', '\x602', '\a', '\x85', '\x2', '\x2', '\x602', 
		'\x604', '\x3', '\x2', '\x2', '\x2', '\x603', '\x5FE', '\x3', '\x2', '\x2', 
		'\x2', '\x603', '\x5FF', '\x3', '\x2', '\x2', '\x2', '\x604', '\x60E', 
		'\x3', '\x2', '\x2', '\x2', '\x605', '\x60E', '\x5', '\x186', '\xC4', 
		'\x2', '\x606', '\x607', '\a', 'l', '\x2', '\x2', '\x607', '\x60E', '\x5', 
		'\x188', '\xC5', '\x2', '\x608', '\x60E', '\x5', '\x170', '\xB9', '\x2', 
		'\x609', '\x60E', '\x5', '\x172', '\xBA', '\x2', '\x60A', '\x60E', '\x5', 
		'\x174', '\xBB', '\x2', '\x60B', '\x60E', '\x5', '\x176', '\xBC', '\x2', 
		'\x60C', '\x60E', '\x5', '\x178', '\xBD', '\x2', '\x60D', '\x5FA', '\x3', 
		'\x2', '\x2', '\x2', '\x60D', '\x5FB', '\x3', '\x2', '\x2', '\x2', '\x60D', 
		'\x5FC', '\x3', '\x2', '\x2', '\x2', '\x60D', '\x5FD', '\x3', '\x2', '\x2', 
		'\x2', '\x60D', '\x605', '\x3', '\x2', '\x2', '\x2', '\x60D', '\x606', 
		'\x3', '\x2', '\x2', '\x2', '\x60D', '\x608', '\x3', '\x2', '\x2', '\x2', 
		'\x60D', '\x609', '\x3', '\x2', '\x2', '\x2', '\x60D', '\x60A', '\x3', 
		'\x2', '\x2', '\x2', '\x60D', '\x60B', '\x3', '\x2', '\x2', '\x2', '\x60D', 
		'\x60C', '\x3', '\x2', '\x2', '\x2', '\x60E', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\x60F', '\x619', '\x5', '\x6', '\x4', '\x2', '\x610', '\x611', 
		'\x5', '\x4', '\x3', '\x2', '\x611', '\x612', '\a', '\x82', '\x2', '\x2', 
		'\x612', '\x613', '\x5', '\x182', '\xC2', '\x2', '\x613', '\x61A', '\x3', 
		'\x2', '\x2', '\x2', '\x614', '\x61A', '\x5', '\x188', '\xC5', '\x2', 
		'\x615', '\x61A', '\x5', '\x17E', '\xC0', '\x2', '\x616', '\x61A', '\x5', 
		'\x182', '\xC2', '\x2', '\x617', '\x61A', '\x5', '\x18C', '\xC7', '\x2', 
		'\x618', '\x61A', '\x5', '\x17C', '\xBF', '\x2', '\x619', '\x610', '\x3', 
		'\x2', '\x2', '\x2', '\x619', '\x614', '\x3', '\x2', '\x2', '\x2', '\x619', 
		'\x615', '\x3', '\x2', '\x2', '\x2', '\x619', '\x616', '\x3', '\x2', '\x2', 
		'\x2', '\x619', '\x617', '\x3', '\x2', '\x2', '\x2', '\x619', '\x618', 
		'\x3', '\x2', '\x2', '\x2', '\x61A', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\x61B', '\x620', '\x5', '\xEC', 'w', '\x2', '\x61C', '\x61D', '\a', '\x83', 
		'\x2', '\x2', '\x61D', '\x61F', '\x5', '\xEC', 'w', '\x2', '\x61E', '\x61C', 
		'\x3', '\x2', '\x2', '\x2', '\x61F', '\x622', '\x3', '\x2', '\x2', '\x2', 
		'\x620', '\x61E', '\x3', '\x2', '\x2', '\x2', '\x620', '\x621', '\x3', 
		'\x2', '\x2', '\x2', '\x621', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x622', 
		'\x620', '\x3', '\x2', '\x2', '\x2', '\x623', '\x624', '\x5', '\x194', 
		'\xCB', '\x2', '\x624', '\x625', '\a', '\x90', '\x2', '\x2', '\x625', 
		'\x626', '\x5', '\x1A', '\xE', '\x2', '\x626', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\x627', '\x62C', '\x5', '\xF0', 'y', '\x2', '\x628', '\x629', 
		'\a', '\x83', '\x2', '\x2', '\x629', '\x62B', '\x5', '\xF0', 'y', '\x2', 
		'\x62A', '\x628', '\x3', '\x2', '\x2', '\x2', '\x62B', '\x62E', '\x3', 
		'\x2', '\x2', '\x2', '\x62C', '\x62A', '\x3', '\x2', '\x2', '\x2', '\x62C', 
		'\x62D', '\x3', '\x2', '\x2', '\x2', '\x62D', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\x62E', '\x62C', '\x3', '\x2', '\x2', '\x2', '\x62F', '\x632', 
		'\x5', '\x194', '\xCB', '\x2', '\x630', '\x631', '\a', '\x90', '\x2', 
		'\x2', '\x631', '\x633', '\x5', '\xF2', 'z', '\x2', '\x632', '\x630', 
		'\x3', '\x2', '\x2', '\x2', '\x632', '\x633', '\x3', '\x2', '\x2', '\x2', 
		'\x633', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x634', '\x637', '\x5', 
		'\x1A', '\xE', '\x2', '\x635', '\x637', '\x5', '\x126', '\x94', '\x2', 
		'\x636', '\x634', '\x3', '\x2', '\x2', '\x2', '\x636', '\x635', '\x3', 
		'\x2', '\x2', '\x2', '\x637', '\xF3', '\x3', '\x2', '\x2', '\x2', '\x638', 
		'\x63B', '\x5', '\x6', '\x4', '\x2', '\x639', '\x63B', '\a', 'l', '\x2', 
		'\x2', '\x63A', '\x638', '\x3', '\x2', '\x2', '\x2', '\x63A', '\x639', 
		'\x3', '\x2', '\x2', '\x2', '\x63B', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\x63C', '\x63D', '\x5', '\x4', '\x3', '\x2', '\x63D', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\x63E', '\x641', '\x5', '\x8E', 'H', '\x2', '\x63F', 
		'\x641', '\a', '\x85', '\x2', '\x2', '\x640', '\x63E', '\x3', '\x2', '\x2', 
		'\x2', '\x640', '\x63F', '\x3', '\x2', '\x2', '\x2', '\x641', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\x642', '\x649', '\x5', '\x102', '\x82', 
		'\x2', '\x643', '\x646', '\x5', '\xFC', '\x7F', '\x2', '\x644', '\x645', 
		'\a', '\x83', '\x2', '\x2', '\x645', '\x647', '\x5', '\x102', '\x82', 
		'\x2', '\x646', '\x644', '\x3', '\x2', '\x2', '\x2', '\x646', '\x647', 
		'\x3', '\x2', '\x2', '\x2', '\x647', '\x649', '\x3', '\x2', '\x2', '\x2', 
		'\x648', '\x642', '\x3', '\x2', '\x2', '\x2', '\x648', '\x643', '\x3', 
		'\x2', '\x2', '\x2', '\x649', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x64A', 
		'\x64F', '\x5', '\xFE', '\x80', '\x2', '\x64B', '\x64C', '\a', '\x83', 
		'\x2', '\x2', '\x64C', '\x64E', '\x5', '\xFE', '\x80', '\x2', '\x64D', 
		'\x64B', '\x3', '\x2', '\x2', '\x2', '\x64E', '\x651', '\x3', '\x2', '\x2', 
		'\x2', '\x64F', '\x64D', '\x3', '\x2', '\x2', '\x2', '\x64F', '\x650', 
		'\x3', '\x2', '\x2', '\x2', '\x650', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\x651', '\x64F', '\x3', '\x2', '\x2', '\x2', '\x652', '\x654', '\x5', 
		'\x140', '\xA1', '\x2', '\x653', '\x652', '\x3', '\x2', '\x2', '\x2', 
		'\x653', '\x654', '\x3', '\x2', '\x2', '\x2', '\x654', '\x656', '\x3', 
		'\x2', '\x2', '\x2', '\x655', '\x657', '\x5', '\x100', '\x81', '\x2', 
		'\x656', '\x655', '\x3', '\x2', '\x2', '\x2', '\x656', '\x657', '\x3', 
		'\x2', '\x2', '\x2', '\x657', '\x658', '\x3', '\x2', '\x2', '\x2', '\x658', 
		'\x65B', '\x5', '\x18E', '\xC8', '\x2', '\x659', '\x65B', '\a', '\r', 
		'\x2', '\x2', '\x65A', '\x653', '\x3', '\x2', '\x2', '\x2', '\x65A', '\x659', 
		'\x3', '\x2', '\x2', '\x2', '\x65B', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\x65C', '\x65D', '\t', '\f', '\x2', '\x2', '\x65D', '\x101', '\x3', '\x2', 
		'\x2', '\x2', '\x65E', '\x660', '\x5', '\x140', '\xA1', '\x2', '\x65F', 
		'\x65E', '\x3', '\x2', '\x2', '\x2', '\x65F', '\x660', '\x3', '\x2', '\x2', 
		'\x2', '\x660', '\x661', '\x3', '\x2', '\x2', '\x2', '\x661', '\x662', 
		'\a', 'K', '\x2', '\x2', '\x662', '\x663', '\x5', '\x122', '\x92', '\x2', 
		'\x663', '\x664', '\x5', '\x194', '\xCB', '\x2', '\x664', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x665', '\x667', '\x5', '\x140', '\xA1', '\x2', 
		'\x666', '\x665', '\x3', '\x2', '\x2', '\x2', '\x666', '\x667', '\x3', 
		'\x2', '\x2', '\x2', '\x667', '\x669', '\x3', '\x2', '\x2', '\x2', '\x668', 
		'\x66A', '\x5', '\x10A', '\x86', '\x2', '\x669', '\x668', '\x3', '\x2', 
		'\x2', '\x2', '\x669', '\x66A', '\x3', '\x2', '\x2', '\x2', '\x66A', '\x675', 
		'\x3', '\x2', '\x2', '\x2', '\x66B', '\x66C', '\a', '\x32', '\x2', '\x2', 
		'\x66C', '\x66E', '\x5', '\x10C', '\x87', '\x2', '\x66D', '\x66F', '\x5', 
		'\x108', '\x85', '\x2', '\x66E', '\x66D', '\x3', '\x2', '\x2', '\x2', 
		'\x66E', '\x66F', '\x3', '\x2', '\x2', '\x2', '\x66F', '\x676', '\x3', 
		'\x2', '\x2', '\x2', '\x670', '\x671', '\a', 'W', '\x2', '\x2', '\x671', 
		'\x673', '\x5', '\x10C', '\x87', '\x2', '\x672', '\x674', '\x5', '\x106', 
		'\x84', '\x2', '\x673', '\x672', '\x3', '\x2', '\x2', '\x2', '\x673', 
		'\x674', '\x3', '\x2', '\x2', '\x2', '\x674', '\x676', '\x3', '\x2', '\x2', 
		'\x2', '\x675', '\x66B', '\x3', '\x2', '\x2', '\x2', '\x675', '\x670', 
		'\x3', '\x2', '\x2', '\x2', '\x676', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x677', '\x679', '\x5', '\x140', '\xA1', '\x2', '\x678', '\x677', '\x3', 
		'\x2', '\x2', '\x2', '\x678', '\x679', '\x3', '\x2', '\x2', '\x2', '\x679', 
		'\x67B', '\x3', '\x2', '\x2', '\x2', '\x67A', '\x67C', '\x5', '\x10A', 
		'\x86', '\x2', '\x67B', '\x67A', '\x3', '\x2', '\x2', '\x2', '\x67B', 
		'\x67C', '\x3', '\x2', '\x2', '\x2', '\x67C', '\x67D', '\x3', '\x2', '\x2', 
		'\x2', '\x67D', '\x67E', '\a', '\x32', '\x2', '\x2', '\x67E', '\x67F', 
		'\x5', '\x10C', '\x87', '\x2', '\x67F', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x680', '\x682', '\x5', '\x140', '\xA1', '\x2', '\x681', '\x680', 
		'\x3', '\x2', '\x2', '\x2', '\x681', '\x682', '\x3', '\x2', '\x2', '\x2', 
		'\x682', '\x684', '\x3', '\x2', '\x2', '\x2', '\x683', '\x685', '\x5', 
		'\x10A', '\x86', '\x2', '\x684', '\x683', '\x3', '\x2', '\x2', '\x2', 
		'\x684', '\x685', '\x3', '\x2', '\x2', '\x2', '\x685', '\x686', '\x3', 
		'\x2', '\x2', '\x2', '\x686', '\x687', '\a', 'W', '\x2', '\x2', '\x687', 
		'\x688', '\x5', '\x10C', '\x87', '\x2', '\x688', '\x109', '\x3', '\x2', 
		'\x2', '\x2', '\x689', '\x691', '\a', 'N', '\x2', '\x2', '\x68A', '\x691', 
		'\a', ':', '\x2', '\x2', '\x68B', '\x691', '\a', 'M', '\x2', '\x2', '\x68C', 
		'\x68D', '\a', 'N', '\x2', '\x2', '\x68D', '\x691', '\a', ':', '\x2', 
		'\x2', '\x68E', '\x68F', '\a', ':', '\x2', '\x2', '\x68F', '\x691', '\a', 
		'N', '\x2', '\x2', '\x690', '\x689', '\x3', '\x2', '\x2', '\x2', '\x690', 
		'\x68A', '\x3', '\x2', '\x2', '\x2', '\x690', '\x68B', '\x3', '\x2', '\x2', 
		'\x2', '\x690', '\x68C', '\x3', '\x2', '\x2', '\x2', '\x690', '\x68E', 
		'\x3', '\x2', '\x2', '\x2', '\x691', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x692', '\x695', '\x5', '\x8E', 'H', '\x2', '\x693', '\x695', '\a', '\x85', 
		'\x2', '\x2', '\x694', '\x692', '\x3', '\x2', '\x2', '\x2', '\x694', '\x693', 
		'\x3', '\x2', '\x2', '\x2', '\x695', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x696', '\x698', '\x5', '\x140', '\xA1', '\x2', '\x697', '\x696', '\x3', 
		'\x2', '\x2', '\x2', '\x697', '\x698', '\x3', '\x2', '\x2', '\x2', '\x698', 
		'\x6A1', '\x3', '\x2', '\x2', '\x2', '\x699', '\x69A', '\a', '\v', '\x2', 
		'\x2', '\x69A', '\x69B', '\x5', '\x8E', 'H', '\x2', '\x69B', '\x69C', 
		'\x5', '\x112', '\x8A', '\x2', '\x69C', '\x6A2', '\x3', '\x2', '\x2', 
		'\x2', '\x69D', '\x69E', '\a', 'R', '\x2', '\x2', '\x69E', '\x69F', '\x5', 
		'\x8E', 'H', '\x2', '\x69F', '\x6A0', '\x5', '\x110', '\x89', '\x2', '\x6A0', 
		'\x6A2', '\x3', '\x2', '\x2', '\x2', '\x6A1', '\x699', '\x3', '\x2', '\x2', 
		'\x2', '\x6A1', '\x69D', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x6A3', '\x6A5', '\x5', '\x140', '\xA1', 
		'\x2', '\x6A4', '\x6A3', '\x3', '\x2', '\x2', '\x2', '\x6A4', '\x6A5', 
		'\x3', '\x2', '\x2', '\x2', '\x6A5', '\x6A6', '\x3', '\x2', '\x2', '\x2', 
		'\x6A6', '\x6A7', '\a', '\v', '\x2', '\x2', '\x6A7', '\x6A8', '\x5', '\x8E', 
		'H', '\x2', '\x6A8', '\x111', '\x3', '\x2', '\x2', '\x2', '\x6A9', '\x6AB', 
		'\x5', '\x140', '\xA1', '\x2', '\x6AA', '\x6A9', '\x3', '\x2', '\x2', 
		'\x2', '\x6AA', '\x6AB', '\x3', '\x2', '\x2', '\x2', '\x6AB', '\x6AC', 
		'\x3', '\x2', '\x2', '\x2', '\x6AC', '\x6AD', '\a', 'R', '\x2', '\x2', 
		'\x6AD', '\x6AE', '\x5', '\x8E', 'H', '\x2', '\x6AE', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x6AF', '\x6C6', '\a', '\x86', '\x2', '\x2', '\x6B0', 
		'\x6C6', '\a', '\x87', '\x2', '\x2', '\x6B1', '\x6C6', '\a', '\x8E', '\x2', 
		'\x2', '\x6B2', '\x6C6', '\a', '\x8F', '\x2', '\x2', '\x6B3', '\x6C6', 
		'\a', '\x96', '\x2', '\x2', '\x6B4', '\x6C6', '\a', '\x97', '\x2', '\x2', 
		'\x6B5', '\x6C6', '\a', '\x61', '\x2', '\x2', '\x6B6', '\x6C6', '\a', 
		'+', '\x2', '\x2', '\x6B7', '\x6C6', '\a', '\x88', '\x2', '\x2', '\x6B8', 
		'\x6C6', '\a', '\x89', '\x2', '\x2', '\x6B9', '\x6C6', '\a', '\x8A', '\x2', 
		'\x2', '\x6BA', '\x6C6', '\a', '\x8B', '\x2', '\x2', '\x6BB', '\x6C6', 
		'\a', '\x8C', '\x2', '\x2', '\x6BC', '\x6C6', '\a', '\x8D', '\x2', '\x2', 
		'\x6BD', '\x6C6', '\a', '\xA7', '\x2', '\x2', '\x6BE', '\x6C6', '\x5', 
		'\x15A', '\xAE', '\x2', '\x6BF', '\x6C6', '\a', '\x9B', '\x2', '\x2', 
		'\x6C0', '\x6C6', '\a', '\x9C', '\x2', '\x2', '\x6C1', '\x6C6', '\a', 
		'\x92', '\x2', '\x2', '\x6C2', '\x6C6', '\a', '\x91', '\x2', '\x2', '\x6C3', 
		'\x6C6', '\a', '\x9E', '\x2', '\x2', '\x6C4', '\x6C6', '\a', '\x9D', '\x2', 
		'\x2', '\x6C5', '\x6AF', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6B0', 
		'\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6B1', '\x3', '\x2', '\x2', '\x2', 
		'\x6C5', '\x6B2', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6B3', '\x3', 
		'\x2', '\x2', '\x2', '\x6C5', '\x6B4', '\x3', '\x2', '\x2', '\x2', '\x6C5', 
		'\x6B5', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6B6', '\x3', '\x2', '\x2', 
		'\x2', '\x6C5', '\x6B7', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6B8', 
		'\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6B9', '\x3', '\x2', '\x2', '\x2', 
		'\x6C5', '\x6BA', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6BB', '\x3', 
		'\x2', '\x2', '\x2', '\x6C5', '\x6BC', '\x3', '\x2', '\x2', '\x2', '\x6C5', 
		'\x6BD', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6BE', '\x3', '\x2', '\x2', 
		'\x2', '\x6C5', '\x6BF', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6C0', 
		'\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6C1', '\x3', '\x2', '\x2', '\x2', 
		'\x6C5', '\x6C2', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6C3', '\x3', 
		'\x2', '\x2', '\x2', '\x6C5', '\x6C4', '\x3', '\x2', '\x2', '\x2', '\x6C6', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x6C7', '\x6C8', '\t', '\r', '\x2', 
		'\x2', '\x6C8', '\x6C9', '\a', 'G', '\x2', '\x2', '\x6C9', '\x6CA', '\x5', 
		'\x6', '\x4', '\x2', '\x6CA', '\x6CB', '\a', '\x80', '\x2', '\x2', '\x6CB', 
		'\x6CC', '\x5', '\x18E', '\xC8', '\x2', '\x6CC', '\x6CD', '\a', '\x81', 
		'\x2', '\x2', '\x6CD', '\x117', '\x3', '\x2', '\x2', '\x2', '\x6CE', '\x6CF', 
		'\a', '\x84', '\x2', '\x2', '\x6CF', '\x6D0', '\t', '\xE', '\x2', '\x2', 
		'\x6D0', '\x6D2', '\a', '\x80', '\x2', '\x2', '\x6D1', '\x6D3', '\x5', 
		'\x16', '\f', '\x2', '\x6D2', '\x6D1', '\x3', '\x2', '\x2', '\x2', '\x6D2', 
		'\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6D4', '\x3', '\x2', '\x2', 
		'\x2', '\x6D4', '\x6D5', '\a', '\x81', '\x2', '\x2', '\x6D5', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x6D6', '\x6D9', '\x5', '\x8E', 'H', '\x2', 
		'\x6D7', '\x6D9', '\a', '\x85', '\x2', '\x2', '\x6D8', '\x6D6', '\x3', 
		'\x2', '\x2', '\x2', '\x6D8', '\x6D7', '\x3', '\x2', '\x2', '\x2', '\x6D9', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x6DA', '\x6DB', '\a', '\x84', '\x2', 
		'\x2', '\x6DB', '\x6DC', '\x5', '\xCE', 'h', '\x2', '\x6DC', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x6DD', '\x6E1', '\a', '|', '\x2', '\x2', 
		'\x6DE', '\x6E0', '\x5', '\x120', '\x91', '\x2', '\x6DF', '\x6DE', '\x3', 
		'\x2', '\x2', '\x2', '\x6E0', '\x6E3', '\x3', '\x2', '\x2', '\x2', '\x6E1', 
		'\x6DF', '\x3', '\x2', '\x2', '\x2', '\x6E1', '\x6E2', '\x3', '\x2', '\x2', 
		'\x2', '\x6E2', '\x6E4', '\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6E1', 
		'\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6E5', '\a', '}', '\x2', '\x2', 
		'\x6E5', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x6E6', '\x6E8', '\x5', 
		'\x140', '\xA1', '\x2', '\x6E7', '\x6E6', '\x3', '\x2', '\x2', '\x2', 
		'\x6E7', '\x6E8', '\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6EA', '\x3', 
		'\x2', '\x2', '\x2', '\x6E9', '\x6EB', '\x5', '\xE2', 'r', '\x2', '\x6EA', 
		'\x6E9', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EB', '\x3', '\x2', '\x2', 
		'\x2', '\x6EB', '\x6F6', '\x3', '\x2', '\x2', '\x2', '\x6EC', '\x6F7', 
		'\x5', '\xE6', 't', '\x2', '\x6ED', '\x6EE', '\a', '-', '\x2', '\x2', 
		'\x6EE', '\x6F0', '\x5', '\x6', '\x4', '\x2', '\x6EF', '\x6F1', '\x5', 
		'\x154', '\xAB', '\x2', '\x6F0', '\x6EF', '\x3', '\x2', '\x2', '\x2', 
		'\x6F1', '\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F2', '\x6F0', '\x3', 
		'\x2', '\x2', '\x2', '\x6F2', '\x6F3', '\x3', '\x2', '\x2', '\x2', '\x6F3', 
		'\x6F4', '\x3', '\x2', '\x2', '\x2', '\x6F4', '\x6F5', '\a', '\x85', '\x2', 
		'\x2', '\x6F5', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x6F6', '\x6EC', 
		'\x3', '\x2', '\x2', '\x2', '\x6F6', '\x6ED', '\x3', '\x2', '\x2', '\x2', 
		'\x6F7', '\x121', '\x3', '\x2', '\x2', '\x2', '\x6F8', '\x700', '\x5', 
		'\b', '\x5', '\x2', '\x6F9', '\x6FB', '\t', '\xF', '\x2', '\x2', '\x6FA', 
		'\x6F9', '\x3', '\x2', '\x2', '\x2', '\x6FB', '\x6FE', '\x3', '\x2', '\x2', 
		'\x2', '\x6FC', '\x6FA', '\x3', '\x2', '\x2', '\x2', '\x6FC', '\x6FD', 
		'\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6FF', '\x3', '\x2', '\x2', '\x2', 
		'\x6FE', '\x6FC', '\x3', '\x2', '\x2', '\x2', '\x6FF', '\x701', '\x5', 
		'\x124', '\x93', '\x2', '\x700', '\x6FC', '\x3', '\x2', '\x2', '\x2', 
		'\x701', '\x702', '\x3', '\x2', '\x2', '\x2', '\x702', '\x700', '\x3', 
		'\x2', '\x2', '\x2', '\x702', '\x703', '\x3', '\x2', '\x2', '\x2', '\x703', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x704', '\x708', '\a', '~', '\x2', 
		'\x2', '\x705', '\x707', '\a', '\x83', '\x2', '\x2', '\x706', '\x705', 
		'\x3', '\x2', '\x2', '\x2', '\x707', '\x70A', '\x3', '\x2', '\x2', '\x2', 
		'\x708', '\x706', '\x3', '\x2', '\x2', '\x2', '\x708', '\x709', '\x3', 
		'\x2', '\x2', '\x2', '\x709', '\x70B', '\x3', '\x2', '\x2', '\x2', '\x70A', 
		'\x708', '\x3', '\x2', '\x2', '\x2', '\x70B', '\x70C', '\a', '\x7F', '\x2', 
		'\x2', '\x70C', '\x125', '\x3', '\x2', '\x2', '\x2', '\x70D', '\x719', 
		'\a', '|', '\x2', '\x2', '\x70E', '\x713', '\x5', '\xF2', 'z', '\x2', 
		'\x70F', '\x710', '\a', '\x83', '\x2', '\x2', '\x710', '\x712', '\x5', 
		'\xF2', 'z', '\x2', '\x711', '\x70F', '\x3', '\x2', '\x2', '\x2', '\x712', 
		'\x715', '\x3', '\x2', '\x2', '\x2', '\x713', '\x711', '\x3', '\x2', '\x2', 
		'\x2', '\x713', '\x714', '\x3', '\x2', '\x2', '\x2', '\x714', '\x717', 
		'\x3', '\x2', '\x2', '\x2', '\x715', '\x713', '\x3', '\x2', '\x2', '\x2', 
		'\x716', '\x718', '\a', '\x83', '\x2', '\x2', '\x717', '\x716', '\x3', 
		'\x2', '\x2', '\x2', '\x717', '\x718', '\x3', '\x2', '\x2', '\x2', '\x718', 
		'\x71A', '\x3', '\x2', '\x2', '\x2', '\x719', '\x70E', '\x3', '\x2', '\x2', 
		'\x2', '\x719', '\x71A', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x71B', 
		'\x3', '\x2', '\x2', '\x2', '\x71B', '\x71C', '\a', '}', '\x2', '\x2', 
		'\x71C', '\x127', '\x3', '\x2', '\x2', '\x2', '\x71D', '\x71E', '\a', 
		'\x91', '\x2', '\x2', '\x71E', '\x723', '\x5', '\x12A', '\x96', '\x2', 
		'\x71F', '\x720', '\a', '\x83', '\x2', '\x2', '\x720', '\x722', '\x5', 
		'\x12A', '\x96', '\x2', '\x721', '\x71F', '\x3', '\x2', '\x2', '\x2', 
		'\x722', '\x725', '\x3', '\x2', '\x2', '\x2', '\x723', '\x721', '\x3', 
		'\x2', '\x2', '\x2', '\x723', '\x724', '\x3', '\x2', '\x2', '\x2', '\x724', 
		'\x726', '\x3', '\x2', '\x2', '\x2', '\x725', '\x723', '\x3', '\x2', '\x2', 
		'\x2', '\x726', '\x727', '\a', '\x92', '\x2', '\x2', '\x727', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x728', '\x72A', '\x5', '\x140', '\xA1', 
		'\x2', '\x729', '\x728', '\x3', '\x2', '\x2', '\x2', '\x729', '\x72A', 
		'\x3', '\x2', '\x2', '\x2', '\x72A', '\x72C', '\x3', '\x2', '\x2', '\x2', 
		'\x72B', '\x72D', '\x5', '\x12C', '\x97', '\x2', '\x72C', '\x72B', '\x3', 
		'\x2', '\x2', '\x2', '\x72C', '\x72D', '\x3', '\x2', '\x2', '\x2', '\x72D', 
		'\x72E', '\x3', '\x2', '\x2', '\x2', '\x72E', '\x72F', '\x5', '\x194', 
		'\xCB', '\x2', '\x72F', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x730', 
		'\x731', '\t', '\x10', '\x2', '\x2', '\x731', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x732', '\x733', '\a', '\x84', '\x2', '\x2', '\x733', '\x734', 
		'\x5', '\xCE', 'h', '\x2', '\x734', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x735', '\x739', '\a', '|', '\x2', '\x2', '\x736', '\x738', '\x5', '\x132', 
		'\x9A', '\x2', '\x737', '\x736', '\x3', '\x2', '\x2', '\x2', '\x738', 
		'\x73B', '\x3', '\x2', '\x2', '\x2', '\x739', '\x737', '\x3', '\x2', '\x2', 
		'\x2', '\x739', '\x73A', '\x3', '\x2', '\x2', '\x2', '\x73A', '\x73C', 
		'\x3', '\x2', '\x2', '\x2', '\x73B', '\x739', '\x3', '\x2', '\x2', '\x2', 
		'\x73C', '\x73D', '\a', '}', '\x2', '\x2', '\x73D', '\x131', '\x3', '\x2', 
		'\x2', '\x2', '\x73E', '\x740', '\x5', '\x140', '\xA1', '\x2', '\x73F', 
		'\x73E', '\x3', '\x2', '\x2', '\x2', '\x73F', '\x740', '\x3', '\x2', '\x2', 
		'\x2', '\x740', '\x742', '\x3', '\x2', '\x2', '\x2', '\x741', '\x743', 
		'\a', '\x43', '\x2', '\x2', '\x742', '\x741', '\x3', '\x2', '\x2', '\x2', 
		'\x742', '\x743', '\x3', '\x2', '\x2', '\x2', '\x743', '\x77C', '\x3', 
		'\x2', '\x2', '\x2', '\x744', '\x746', '\a', 'g', '\x2', '\x2', '\x745', 
		'\x744', '\x3', '\x2', '\x2', '\x2', '\x745', '\x746', '\x3', '\x2', '\x2', 
		'\x2', '\x746', '\x747', '\x3', '\x2', '\x2', '\x2', '\x747', '\x763', 
		'\x5', '\x6', '\x4', '\x2', '\x748', '\x74A', '\x5', '\x194', '\xCB', 
		'\x2', '\x749', '\x74B', '\x5', '\xC8', '\x65', '\x2', '\x74A', '\x749', 
		'\x3', '\x2', '\x2', '\x2', '\x74A', '\x74B', '\x3', '\x2', '\x2', '\x2', 
		'\x74B', '\x74C', '\x3', '\x2', '\x2', '\x2', '\x74C', '\x74E', '\a', 
		'\x80', '\x2', '\x2', '\x74D', '\x74F', '\x5', '\xFA', '~', '\x2', '\x74E', 
		'\x74D', '\x3', '\x2', '\x2', '\x2', '\x74E', '\x74F', '\x3', '\x2', '\x2', 
		'\x2', '\x74F', '\x750', '\x3', '\x2', '\x2', '\x2', '\x750', '\x752', 
		'\a', '\x81', '\x2', '\x2', '\x751', '\x753', '\x5', '\xD0', 'i', '\x2', 
		'\x752', '\x751', '\x3', '\x2', '\x2', '\x2', '\x752', '\x753', '\x3', 
		'\x2', '\x2', '\x2', '\x753', '\x754', '\x3', '\x2', '\x2', '\x2', '\x754', 
		'\x755', '\a', '\x85', '\x2', '\x2', '\x755', '\x764', '\x3', '\x2', '\x2', 
		'\x2', '\x756', '\x757', '\x5', '\x194', '\xCB', '\x2', '\x757', '\x758', 
		'\a', '|', '\x2', '\x2', '\x758', '\x759', '\x5', '\x134', '\x9B', '\x2', 
		'\x759', '\x75A', '\a', '}', '\x2', '\x2', '\x75A', '\x764', '\x3', '\x2', 
		'\x2', '\x2', '\x75B', '\x75C', '\a', '_', '\x2', '\x2', '\x75C', '\x75D', 
		'\a', '~', '\x2', '\x2', '\x75D', '\x75E', '\x5', '\xFA', '~', '\x2', 
		'\x75E', '\x75F', '\a', '\x7F', '\x2', '\x2', '\x75F', '\x760', '\a', 
		'|', '\x2', '\x2', '\x760', '\x761', '\x5', '\x134', '\x9B', '\x2', '\x761', 
		'\x762', '\a', '}', '\x2', '\x2', '\x762', '\x764', '\x3', '\x2', '\x2', 
		'\x2', '\x763', '\x748', '\x3', '\x2', '\x2', '\x2', '\x763', '\x756', 
		'\x3', '\x2', '\x2', '\x2', '\x763', '\x75B', '\x3', '\x2', '\x2', '\x2', 
		'\x764', '\x77D', '\x3', '\x2', '\x2', '\x2', '\x765', '\x767', '\a', 
		'g', '\x2', '\x2', '\x766', '\x765', '\x3', '\x2', '\x2', '\x2', '\x766', 
		'\x767', '\x3', '\x2', '\x2', '\x2', '\x767', '\x768', '\x3', '\x2', '\x2', 
		'\x2', '\x768', '\x769', '\a', 'l', '\x2', '\x2', '\x769', '\x76B', '\x5', 
		'\x194', '\xCB', '\x2', '\x76A', '\x76C', '\x5', '\xC8', '\x65', '\x2', 
		'\x76B', '\x76A', '\x3', '\x2', '\x2', '\x2', '\x76B', '\x76C', '\x3', 
		'\x2', '\x2', '\x2', '\x76C', '\x76D', '\x3', '\x2', '\x2', '\x2', '\x76D', 
		'\x76F', '\a', '\x80', '\x2', '\x2', '\x76E', '\x770', '\x5', '\xFA', 
		'~', '\x2', '\x76F', '\x76E', '\x3', '\x2', '\x2', '\x2', '\x76F', '\x770', 
		'\x3', '\x2', '\x2', '\x2', '\x770', '\x771', '\x3', '\x2', '\x2', '\x2', 
		'\x771', '\x773', '\a', '\x81', '\x2', '\x2', '\x772', '\x774', '\x5', 
		'\xD0', 'i', '\x2', '\x773', '\x772', '\x3', '\x2', '\x2', '\x2', '\x773', 
		'\x774', '\x3', '\x2', '\x2', '\x2', '\x774', '\x775', '\x3', '\x2', '\x2', 
		'\x2', '\x775', '\x776', '\a', '\x85', '\x2', '\x2', '\x776', '\x77D', 
		'\x3', '\x2', '\x2', '\x2', '\x777', '\x778', '\a', '(', '\x2', '\x2', 
		'\x778', '\x779', '\x5', '\x6', '\x4', '\x2', '\x779', '\x77A', '\x5', 
		'\x194', '\xCB', '\x2', '\x77A', '\x77B', '\a', '\x85', '\x2', '\x2', 
		'\x77B', '\x77D', '\x3', '\x2', '\x2', '\x2', '\x77C', '\x745', '\x3', 
		'\x2', '\x2', '\x2', '\x77C', '\x766', '\x3', '\x2', '\x2', '\x2', '\x77C', 
		'\x777', '\x3', '\x2', '\x2', '\x2', '\x77D', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x77E', '\x780', '\x5', '\x140', '\xA1', '\x2', '\x77F', '\x77E', 
		'\x3', '\x2', '\x2', '\x2', '\x77F', '\x780', '\x3', '\x2', '\x2', '\x2', 
		'\x780', '\x793', '\x3', '\x2', '\x2', '\x2', '\x781', '\x782', '\a', 
		'\x32', '\x2', '\x2', '\x782', '\x788', '\a', '\x85', '\x2', '\x2', '\x783', 
		'\x785', '\x5', '\x140', '\xA1', '\x2', '\x784', '\x783', '\x3', '\x2', 
		'\x2', '\x2', '\x784', '\x785', '\x3', '\x2', '\x2', '\x2', '\x785', '\x786', 
		'\x3', '\x2', '\x2', '\x2', '\x786', '\x787', '\a', 'W', '\x2', '\x2', 
		'\x787', '\x789', '\a', '\x85', '\x2', '\x2', '\x788', '\x784', '\x3', 
		'\x2', '\x2', '\x2', '\x788', '\x789', '\x3', '\x2', '\x2', '\x2', '\x789', 
		'\x794', '\x3', '\x2', '\x2', '\x2', '\x78A', '\x78B', '\a', 'W', '\x2', 
		'\x2', '\x78B', '\x791', '\a', '\x85', '\x2', '\x2', '\x78C', '\x78E', 
		'\x5', '\x140', '\xA1', '\x2', '\x78D', '\x78C', '\x3', '\x2', '\x2', 
		'\x2', '\x78D', '\x78E', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x78F', 
		'\x3', '\x2', '\x2', '\x2', '\x78F', '\x790', '\a', '\x32', '\x2', '\x2', 
		'\x790', '\x792', '\a', '\x85', '\x2', '\x2', '\x791', '\x78D', '\x3', 
		'\x2', '\x2', '\x2', '\x791', '\x792', '\x3', '\x2', '\x2', '\x2', '\x792', 
		'\x794', '\x3', '\x2', '\x2', '\x2', '\x793', '\x781', '\x3', '\x2', '\x2', 
		'\x2', '\x793', '\x78A', '\x3', '\x2', '\x2', '\x2', '\x794', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x795', '\x796', '\a', '\x84', '\x2', '\x2', 
		'\x796', '\x797', '\x5', '\x6', '\x4', '\x2', '\x797', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x798', '\x7A4', '\a', '|', '\x2', '\x2', '\x799', 
		'\x79E', '\x5', '\x13A', '\x9E', '\x2', '\x79A', '\x79B', '\a', '\x83', 
		'\x2', '\x2', '\x79B', '\x79D', '\x5', '\x13A', '\x9E', '\x2', '\x79C', 
		'\x79A', '\x3', '\x2', '\x2', '\x2', '\x79D', '\x7A0', '\x3', '\x2', '\x2', 
		'\x2', '\x79E', '\x79C', '\x3', '\x2', '\x2', '\x2', '\x79E', '\x79F', 
		'\x3', '\x2', '\x2', '\x2', '\x79F', '\x7A2', '\x3', '\x2', '\x2', '\x2', 
		'\x7A0', '\x79E', '\x3', '\x2', '\x2', '\x2', '\x7A1', '\x7A3', '\a', 
		'\x83', '\x2', '\x2', '\x7A2', '\x7A1', '\x3', '\x2', '\x2', '\x2', '\x7A2', 
		'\x7A3', '\x3', '\x2', '\x2', '\x2', '\x7A3', '\x7A5', '\x3', '\x2', '\x2', 
		'\x2', '\x7A4', '\x799', '\x3', '\x2', '\x2', '\x2', '\x7A4', '\x7A5', 
		'\x3', '\x2', '\x2', '\x2', '\x7A5', '\x7A6', '\x3', '\x2', '\x2', '\x2', 
		'\x7A6', '\x7A7', '\a', '}', '\x2', '\x2', '\x7A7', '\x139', '\x3', '\x2', 
		'\x2', '\x2', '\x7A8', '\x7AA', '\x5', '\x140', '\xA1', '\x2', '\x7A9', 
		'\x7A8', '\x3', '\x2', '\x2', '\x2', '\x7A9', '\x7AA', '\x3', '\x2', '\x2', 
		'\x2', '\x7AA', '\x7AB', '\x3', '\x2', '\x2', '\x2', '\x7AB', '\x7AE', 
		'\x5', '\x194', '\xCB', '\x2', '\x7AC', '\x7AD', '\a', '\x90', '\x2', 
		'\x2', '\x7AD', '\x7AF', '\x5', '\x1A', '\xE', '\x2', '\x7AE', '\x7AC', 
		'\x3', '\x2', '\x2', '\x2', '\x7AE', '\x7AF', '\x3', '\x2', '\x2', '\x2', 
		'\x7AF', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x7B0', '\x7B1', '\a', 
		'~', '\x2', '\x2', '\x7B1', '\x7B2', '\x5', '\x13E', '\xA0', '\x2', '\x7B2', 
		'\x7B3', '\a', '\x84', '\x2', '\x2', '\x7B3', '\x7B5', '\x5', '\x146', 
		'\xA4', '\x2', '\x7B4', '\x7B6', '\a', '\x83', '\x2', '\x2', '\x7B5', 
		'\x7B4', '\x3', '\x2', '\x2', '\x2', '\x7B5', '\x7B6', '\x3', '\x2', '\x2', 
		'\x2', '\x7B6', '\x7B7', '\x3', '\x2', '\x2', '\x2', '\x7B7', '\x7B8', 
		'\a', '\x7F', '\x2', '\x2', '\x7B8', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'\x7B9', '\x7BC', '\x5', '\x16E', '\xB8', '\x2', '\x7BA', '\x7BC', '\x5', 
		'\x194', '\xCB', '\x2', '\x7BB', '\x7B9', '\x3', '\x2', '\x2', '\x2', 
		'\x7BB', '\x7BA', '\x3', '\x2', '\x2', '\x2', '\x7BC', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x7BD', '\x7BF', '\x5', '\x142', '\xA2', '\x2', 
		'\x7BE', '\x7BD', '\x3', '\x2', '\x2', '\x2', '\x7BF', '\x7C0', '\x3', 
		'\x2', '\x2', '\x2', '\x7C0', '\x7BE', '\x3', '\x2', '\x2', '\x2', '\x7C0', 
		'\x7C1', '\x3', '\x2', '\x2', '\x2', '\x7C1', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x7C2', '\x7C6', '\a', '~', '\x2', '\x2', '\x7C3', '\x7C4', '\x5', 
		'\x144', '\xA3', '\x2', '\x7C4', '\x7C5', '\a', '\x84', '\x2', '\x2', 
		'\x7C5', '\x7C7', '\x3', '\x2', '\x2', '\x2', '\x7C6', '\x7C3', '\x3', 
		'\x2', '\x2', '\x2', '\x7C6', '\x7C7', '\x3', '\x2', '\x2', '\x2', '\x7C7', 
		'\x7C8', '\x3', '\x2', '\x2', '\x2', '\x7C8', '\x7CA', '\x5', '\x146', 
		'\xA4', '\x2', '\x7C9', '\x7CB', '\a', '\x83', '\x2', '\x2', '\x7CA', 
		'\x7C9', '\x3', '\x2', '\x2', '\x2', '\x7CA', '\x7CB', '\x3', '\x2', '\x2', 
		'\x2', '\x7CB', '\x7CC', '\x3', '\x2', '\x2', '\x2', '\x7CC', '\x7CD', 
		'\a', '\x7F', '\x2', '\x2', '\x7CD', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x7CE', '\x7D1', '\x5', '\x16E', '\xB8', '\x2', '\x7CF', '\x7D1', '\x5', 
		'\x194', '\xCB', '\x2', '\x7D0', '\x7CE', '\x3', '\x2', '\x2', '\x2', 
		'\x7D0', '\x7CF', '\x3', '\x2', '\x2', '\x2', '\x7D1', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x7D2', '\x7D7', '\x5', '\x148', '\xA5', '\x2', 
		'\x7D3', '\x7D4', '\a', '\x83', '\x2', '\x2', '\x7D4', '\x7D6', '\x5', 
		'\x148', '\xA5', '\x2', '\x7D5', '\x7D3', '\x3', '\x2', '\x2', '\x2', 
		'\x7D6', '\x7D9', '\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7D5', '\x3', 
		'\x2', '\x2', '\x2', '\x7D7', '\x7D8', '\x3', '\x2', '\x2', '\x2', '\x7D8', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x7D9', '\x7D7', '\x3', '\x2', '\x2', 
		'\x2', '\x7DA', '\x7E7', '\x5', '\x4', '\x3', '\x2', '\x7DB', '\x7E4', 
		'\a', '\x80', '\x2', '\x2', '\x7DC', '\x7E1', '\x5', '\x14A', '\xA6', 
		'\x2', '\x7DD', '\x7DE', '\a', '\x83', '\x2', '\x2', '\x7DE', '\x7E0', 
		'\x5', '\x14A', '\xA6', '\x2', '\x7DF', '\x7DD', '\x3', '\x2', '\x2', 
		'\x2', '\x7E0', '\x7E3', '\x3', '\x2', '\x2', '\x2', '\x7E1', '\x7DF', 
		'\x3', '\x2', '\x2', '\x2', '\x7E1', '\x7E2', '\x3', '\x2', '\x2', '\x2', 
		'\x7E2', '\x7E5', '\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7E1', '\x3', 
		'\x2', '\x2', '\x2', '\x7E4', '\x7DC', '\x3', '\x2', '\x2', '\x2', '\x7E4', 
		'\x7E5', '\x3', '\x2', '\x2', '\x2', '\x7E5', '\x7E6', '\x3', '\x2', '\x2', 
		'\x2', '\x7E6', '\x7E8', '\a', '\x81', '\x2', '\x2', '\x7E7', '\x7DB', 
		'\x3', '\x2', '\x2', '\x2', '\x7E7', '\x7E8', '\x3', '\x2', '\x2', '\x2', 
		'\x7E8', '\x149', '\x3', '\x2', '\x2', '\x2', '\x7E9', '\x7EA', '\x5', 
		'\x194', '\xCB', '\x2', '\x7EA', '\x7EB', '\a', '\x84', '\x2', '\x2', 
		'\x7EB', '\x7ED', '\x3', '\x2', '\x2', '\x2', '\x7EC', '\x7E9', '\x3', 
		'\x2', '\x2', '\x2', '\x7EC', '\x7ED', '\x3', '\x2', '\x2', '\x2', '\x7ED', 
		'\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7EF', '\x5', '\x1A', 
		'\xE', '\x2', '\x7EF', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7F3', 
		'\x5', '\n', '\x6', '\x2', '\x7F1', '\x7F3', '\x5', '\x12', '\n', '\x2', 
		'\x7F2', '\x7F0', '\x3', '\x2', '\x2', '\x2', '\x7F2', '\x7F1', '\x3', 
		'\x2', '\x2', '\x2', '\x7F3', '\x7F8', '\x3', '\x2', '\x2', '\x2', '\x7F4', 
		'\x7F7', '\x5', '\x124', '\x93', '\x2', '\x7F5', '\x7F7', '\a', '\x93', 
		'\x2', '\x2', '\x7F6', '\x7F4', '\x3', '\x2', '\x2', '\x2', '\x7F6', '\x7F5', 
		'\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7FA', '\x3', '\x2', '\x2', '\x2', 
		'\x7F8', '\x7F6', '\x3', '\x2', '\x2', '\x2', '\x7F8', '\x7F9', '\x3', 
		'\x2', '\x2', '\x2', '\x7F9', '\x7FB', '\x3', '\x2', '\x2', '\x2', '\x7FA', 
		'\x7F8', '\x3', '\x2', '\x2', '\x2', '\x7FB', '\x7FC', '\a', '\x88', '\x2', 
		'\x2', '\x7FC', '\x800', '\x3', '\x2', '\x2', '\x2', '\x7FD', '\x7FE', 
		'\a', 'l', '\x2', '\x2', '\x7FE', '\x800', '\a', '\x88', '\x2', '\x2', 
		'\x7FF', '\x7F2', '\x3', '\x2', '\x2', '\x2', '\x7FF', '\x7FD', '\x3', 
		'\x2', '\x2', '\x2', '\x800', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x801', 
		'\x806', '\x5', '\x150', '\xA9', '\x2', '\x802', '\x803', '\a', '\x83', 
		'\x2', '\x2', '\x803', '\x805', '\x5', '\x150', '\xA9', '\x2', '\x804', 
		'\x802', '\x3', '\x2', '\x2', '\x2', '\x805', '\x808', '\x3', '\x2', '\x2', 
		'\x2', '\x806', '\x804', '\x3', '\x2', '\x2', '\x2', '\x806', '\x807', 
		'\x3', '\x2', '\x2', '\x2', '\x807', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x808', '\x806', '\x3', '\x2', '\x2', '\x2', '\x809', '\x80A', '\x5', 
		'\x194', '\xCB', '\x2', '\x80A', '\x80B', '\a', '\x90', '\x2', '\x2', 
		'\x80B', '\x80C', '\x5', '\x152', '\xAA', '\x2', '\x80C', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x80D', '\x80F', '\a', '\x8B', '\x2', '\x2', '\x80E', 
		'\x80D', '\x3', '\x2', '\x2', '\x2', '\x80E', '\x80F', '\x3', '\x2', '\x2', 
		'\x2', '\x80F', '\x810', '\x3', '\x2', '\x2', '\x2', '\x810', '\x813', 
		'\x5', '\x1A', '\xE', '\x2', '\x811', '\x813', '\x5', '\x156', '\xAC', 
		'\x2', '\x812', '\x80E', '\x3', '\x2', '\x2', '\x2', '\x812', '\x811', 
		'\x3', '\x2', '\x2', '\x2', '\x813', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x814', '\x815', '\x5', '\x194', '\xCB', '\x2', '\x815', '\x816', '\a', 
		'~', '\x2', '\x2', '\x816', '\x817', '\x5', '\x1A', '\xE', '\x2', '\x817', 
		'\x818', '\a', '\x7F', '\x2', '\x2', '\x818', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x819', '\x81A', '\a', 'Z', '\x2', '\x2', '\x81A', '\x81B', '\x5', 
		'\x6', '\x4', '\x2', '\x81B', '\x81C', '\a', '~', '\x2', '\x2', '\x81C', 
		'\x81D', '\x5', '\x1A', '\xE', '\x2', '\x81D', '\x81E', '\a', '\x7F', 
		'\x2', '\x2', '\x81E', '\x157', '\x3', '\x2', '\x2', '\x2', '\x81F', '\x820', 
		'\a', '\x90', '\x2', '\x2', '\x820', '\x821', '\a', '\x92', '\x2', '\x2', 
		'\x821', '\x822', '\x6', '\xAD', '\x2', '\x3', '\x822', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x823', '\x824', '\a', '\x92', '\x2', '\x2', '\x824', 
		'\x825', '\a', '\x92', '\x2', '\x2', '\x825', '\x826', '\x6', '\xAE', 
		'\x3', '\x3', '\x826', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x827', '\x828', 
		'\a', '\x92', '\x2', '\x2', '\x828', '\x829', '\a', '\x9E', '\x2', '\x2', 
		'\x829', '\x82A', '\x6', '\xAF', '\x4', '\x3', '\x82A', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x82B', '\x833', '\x5', '\x160', '\xB1', '\x2', 
		'\x82C', '\x833', '\x5', '\x162', '\xB2', '\x2', '\x82D', '\x833', '\a', 
		't', '\x2', '\x2', '\x82E', '\x833', '\a', 'u', '\x2', '\x2', '\x82F', 
		'\x833', '\a', 'v', '\x2', '\x2', '\x830', '\x833', '\a', 'w', '\x2', 
		'\x2', '\x831', '\x833', '\a', '\x44', '\x2', '\x2', '\x832', '\x82B', 
		'\x3', '\x2', '\x2', '\x2', '\x832', '\x82C', '\x3', '\x2', '\x2', '\x2', 
		'\x832', '\x82D', '\x3', '\x2', '\x2', '\x2', '\x832', '\x82E', '\x3', 
		'\x2', '\x2', '\x2', '\x832', '\x82F', '\x3', '\x2', '\x2', '\x2', '\x832', 
		'\x830', '\x3', '\x2', '\x2', '\x2', '\x832', '\x831', '\x3', '\x2', '\x2', 
		'\x2', '\x833', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x834', '\x835', 
		'\t', '\x11', '\x2', '\x2', '\x835', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x836', '\x83B', '\x5', '\x164', '\xB3', '\x2', '\x837', '\x83B', '\x5', 
		'\x166', '\xB4', '\x2', '\x838', '\x83B', '\a', 'x', '\x2', '\x2', '\x839', 
		'\x83B', '\a', 'y', '\x2', '\x2', '\x83A', '\x836', '\x3', '\x2', '\x2', 
		'\x2', '\x83A', '\x837', '\x3', '\x2', '\x2', '\x2', '\x83A', '\x838', 
		'\x3', '\x2', '\x2', '\x2', '\x83A', '\x839', '\x3', '\x2', '\x2', '\x2', 
		'\x83B', '\x163', '\x3', '\x2', '\x2', '\x2', '\x83C', '\x840', '\a', 
		'z', '\x2', '\x2', '\x83D', '\x83F', '\x5', '\x168', '\xB5', '\x2', '\x83E', 
		'\x83D', '\x3', '\x2', '\x2', '\x2', '\x83F', '\x842', '\x3', '\x2', '\x2', 
		'\x2', '\x840', '\x83E', '\x3', '\x2', '\x2', '\x2', '\x840', '\x841', 
		'\x3', '\x2', '\x2', '\x2', '\x841', '\x843', '\x3', '\x2', '\x2', '\x2', 
		'\x842', '\x840', '\x3', '\x2', '\x2', '\x2', '\x843', '\x844', '\a', 
		'\xAD', '\x2', '\x2', '\x844', '\x165', '\x3', '\x2', '\x2', '\x2', '\x845', 
		'\x849', '\a', '{', '\x2', '\x2', '\x846', '\x848', '\x5', '\x16A', '\xB6', 
		'\x2', '\x847', '\x846', '\x3', '\x2', '\x2', '\x2', '\x848', '\x84B', 
		'\x3', '\x2', '\x2', '\x2', '\x849', '\x847', '\x3', '\x2', '\x2', '\x2', 
		'\x849', '\x84A', '\x3', '\x2', '\x2', '\x2', '\x84A', '\x84C', '\x3', 
		'\x2', '\x2', '\x2', '\x84B', '\x849', '\x3', '\x2', '\x2', '\x2', '\x84C', 
		'\x84D', '\a', '\xAD', '\x2', '\x2', '\x84D', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x84E', '\x853', '\x5', '\x16C', '\xB7', '\x2', '\x84F', '\x853', 
		'\a', '\xA9', '\x2', '\x2', '\x850', '\x853', '\a', '\xAB', '\x2', '\x2', 
		'\x851', '\x853', '\a', '\xAE', '\x2', '\x2', '\x852', '\x84E', '\x3', 
		'\x2', '\x2', '\x2', '\x852', '\x84F', '\x3', '\x2', '\x2', '\x2', '\x852', 
		'\x850', '\x3', '\x2', '\x2', '\x2', '\x852', '\x851', '\x3', '\x2', '\x2', 
		'\x2', '\x853', '\x169', '\x3', '\x2', '\x2', '\x2', '\x854', '\x859', 
		'\x5', '\x16C', '\xB7', '\x2', '\x855', '\x859', '\a', '\xA9', '\x2', 
		'\x2', '\x856', '\x859', '\a', '\xAC', '\x2', '\x2', '\x857', '\x859', 
		'\a', '\xAF', '\x2', '\x2', '\x858', '\x854', '\x3', '\x2', '\x2', '\x2', 
		'\x858', '\x855', '\x3', '\x2', '\x2', '\x2', '\x858', '\x856', '\x3', 
		'\x2', '\x2', '\x2', '\x858', '\x857', '\x3', '\x2', '\x2', '\x2', '\x859', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x85A', '\x85F', '\x5', '\x1A', 
		'\xE', '\x2', '\x85B', '\x85C', '\a', '\x83', '\x2', '\x2', '\x85C', '\x85E', 
		'\x5', '\x1A', '\xE', '\x2', '\x85D', '\x85B', '\x3', '\x2', '\x2', '\x2', 
		'\x85E', '\x861', '\x3', '\x2', '\x2', '\x2', '\x85F', '\x85D', '\x3', 
		'\x2', '\x2', '\x2', '\x85F', '\x860', '\x3', '\x2', '\x2', '\x2', '\x860', 
		'\x868', '\x3', '\x2', '\x2', '\x2', '\x861', '\x85F', '\x3', '\x2', '\x2', 
		'\x2', '\x862', '\x864', '\a', '\x84', '\x2', '\x2', '\x863', '\x865', 
		'\a', '\xB1', '\x2', '\x2', '\x864', '\x863', '\x3', '\x2', '\x2', '\x2', 
		'\x865', '\x866', '\x3', '\x2', '\x2', '\x2', '\x866', '\x864', '\x3', 
		'\x2', '\x2', '\x2', '\x866', '\x867', '\x3', '\x2', '\x2', '\x2', '\x867', 
		'\x869', '\x3', '\x2', '\x2', '\x2', '\x868', '\x862', '\x3', '\x2', '\x2', 
		'\x2', '\x868', '\x869', '\x3', '\x2', '\x2', '\x2', '\x869', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x86A', '\x86B', '\t', '\x12', '\x2', '\x2', 
		'\x86B', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x86C', '\x86D', '\a', 
		'\x1B', '\x2', '\x2', '\x86D', '\x86F', '\x5', '\x194', '\xCB', '\x2', 
		'\x86E', '\x870', '\x5', '\xC8', '\x65', '\x2', '\x86F', '\x86E', '\x3', 
		'\x2', '\x2', '\x2', '\x86F', '\x870', '\x3', '\x2', '\x2', '\x2', '\x870', 
		'\x872', '\x3', '\x2', '\x2', '\x2', '\x871', '\x873', '\x5', '\xCC', 
		'g', '\x2', '\x872', '\x871', '\x3', '\x2', '\x2', '\x2', '\x872', '\x873', 
		'\x3', '\x2', '\x2', '\x2', '\x873', '\x875', '\x3', '\x2', '\x2', '\x2', 
		'\x874', '\x876', '\x5', '\xD0', 'i', '\x2', '\x875', '\x874', '\x3', 
		'\x2', '\x2', '\x2', '\x875', '\x876', '\x3', '\x2', '\x2', '\x2', '\x876', 
		'\x877', '\x3', '\x2', '\x2', '\x2', '\x877', '\x879', '\x5', '\xDC', 
		'o', '\x2', '\x878', '\x87A', '\a', '\x85', '\x2', '\x2', '\x879', '\x878', 
		'\x3', '\x2', '\x2', '\x2', '\x879', '\x87A', '\x3', '\x2', '\x2', '\x2', 
		'\x87A', '\x171', '\x3', '\x2', '\x2', '\x2', '\x87B', '\x87C', '\a', 
		']', '\x2', '\x2', '\x87C', '\x87E', '\x5', '\x194', '\xCB', '\x2', '\x87D', 
		'\x87F', '\x5', '\xC8', '\x65', '\x2', '\x87E', '\x87D', '\x3', '\x2', 
		'\x2', '\x2', '\x87E', '\x87F', '\x3', '\x2', '\x2', '\x2', '\x87F', '\x881', 
		'\x3', '\x2', '\x2', '\x2', '\x880', '\x882', '\x5', '\x11C', '\x8F', 
		'\x2', '\x881', '\x880', '\x3', '\x2', '\x2', '\x2', '\x881', '\x882', 
		'\x3', '\x2', '\x2', '\x2', '\x882', '\x884', '\x3', '\x2', '\x2', '\x2', 
		'\x883', '\x885', '\x5', '\xD0', 'i', '\x2', '\x884', '\x883', '\x3', 
		'\x2', '\x2', '\x2', '\x884', '\x885', '\x3', '\x2', '\x2', '\x2', '\x885', 
		'\x886', '\x3', '\x2', '\x2', '\x2', '\x886', '\x888', '\x5', '\x11E', 
		'\x90', '\x2', '\x887', '\x889', '\a', '\x85', '\x2', '\x2', '\x888', 
		'\x887', '\x3', '\x2', '\x2', '\x2', '\x888', '\x889', '\x3', '\x2', '\x2', 
		'\x2', '\x889', '\x173', '\x3', '\x2', '\x2', '\x2', '\x88A', '\x88B', 
		'\a', '\x39', '\x2', '\x2', '\x88B', '\x88D', '\x5', '\x194', '\xCB', 
		'\x2', '\x88C', '\x88E', '\x5', '\x128', '\x95', '\x2', '\x88D', '\x88C', 
		'\x3', '\x2', '\x2', '\x2', '\x88D', '\x88E', '\x3', '\x2', '\x2', '\x2', 
		'\x88E', '\x890', '\x3', '\x2', '\x2', '\x2', '\x88F', '\x891', '\x5', 
		'\x12E', '\x98', '\x2', '\x890', '\x88F', '\x3', '\x2', '\x2', '\x2', 
		'\x890', '\x891', '\x3', '\x2', '\x2', '\x2', '\x891', '\x893', '\x3', 
		'\x2', '\x2', '\x2', '\x892', '\x894', '\x5', '\xD0', 'i', '\x2', '\x893', 
		'\x892', '\x3', '\x2', '\x2', '\x2', '\x893', '\x894', '\x3', '\x2', '\x2', 
		'\x2', '\x894', '\x895', '\x3', '\x2', '\x2', '\x2', '\x895', '\x897', 
		'\x5', '\x130', '\x99', '\x2', '\x896', '\x898', '\a', '\x85', '\x2', 
		'\x2', '\x897', '\x896', '\x3', '\x2', '\x2', '\x2', '\x897', '\x898', 
		'\x3', '\x2', '\x2', '\x2', '\x898', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x899', '\x89A', '\a', '&', '\x2', '\x2', '\x89A', '\x89C', '\x5', '\x194', 
		'\xCB', '\x2', '\x89B', '\x89D', '\x5', '\x136', '\x9C', '\x2', '\x89C', 
		'\x89B', '\x3', '\x2', '\x2', '\x2', '\x89C', '\x89D', '\x3', '\x2', '\x2', 
		'\x2', '\x89D', '\x89E', '\x3', '\x2', '\x2', '\x2', '\x89E', '\x8A0', 
		'\x5', '\x138', '\x9D', '\x2', '\x89F', '\x8A1', '\a', '\x85', '\x2', 
		'\x2', '\x8A0', '\x89F', '\x3', '\x2', '\x2', '\x2', '\x8A0', '\x8A1', 
		'\x3', '\x2', '\x2', '\x2', '\x8A1', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x8A2', '\x8A3', '\a', ' ', '\x2', '\x2', '\x8A3', '\x8A4', '\x5', '\xF4', 
		'{', '\x2', '\x8A4', '\x8A6', '\x5', '\x194', '\xCB', '\x2', '\x8A5', 
		'\x8A7', '\x5', '\x128', '\x95', '\x2', '\x8A6', '\x8A5', '\x3', '\x2', 
		'\x2', '\x2', '\x8A6', '\x8A7', '\x3', '\x2', '\x2', '\x2', '\x8A7', '\x8A8', 
		'\x3', '\x2', '\x2', '\x2', '\x8A8', '\x8AA', '\a', '\x80', '\x2', '\x2', 
		'\x8A9', '\x8AB', '\x5', '\xFA', '~', '\x2', '\x8AA', '\x8A9', '\x3', 
		'\x2', '\x2', '\x2', '\x8AA', '\x8AB', '\x3', '\x2', '\x2', '\x2', '\x8AB', 
		'\x8AC', '\x3', '\x2', '\x2', '\x2', '\x8AC', '\x8AE', '\a', '\x81', '\x2', 
		'\x2', '\x8AD', '\x8AF', '\x5', '\xD0', 'i', '\x2', '\x8AE', '\x8AD', 
		'\x3', '\x2', '\x2', '\x2', '\x8AE', '\x8AF', '\x3', '\x2', '\x2', '\x2', 
		'\x8AF', '\x8B0', '\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8B1', '\a', 
		'\x85', '\x2', '\x2', '\x8B1', '\x179', '\x3', '\x2', '\x2', '\x2', '\x8B2', 
		'\x8B3', '\a', '(', '\x2', '\x2', '\x8B3', '\x8BC', '\x5', '\x6', '\x4', 
		'\x2', '\x8B4', '\x8B5', '\x5', '\xEE', 'x', '\x2', '\x8B5', '\x8B6', 
		'\a', '\x85', '\x2', '\x2', '\x8B6', '\x8BD', '\x3', '\x2', '\x2', '\x2', 
		'\x8B7', '\x8B8', '\x5', '\xF6', '|', '\x2', '\x8B8', '\x8B9', '\a', '|', 
		'\x2', '\x2', '\x8B9', '\x8BA', '\x5', '\x10E', '\x88', '\x2', '\x8BA', 
		'\x8BB', '\a', '}', '\x2', '\x2', '\x8BB', '\x8BD', '\x3', '\x2', '\x2', 
		'\x2', '\x8BC', '\x8B4', '\x3', '\x2', '\x2', '\x2', '\x8BC', '\x8B7', 
		'\x3', '\x2', '\x2', '\x2', '\x8BD', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x8BE', '\x8BF', '\x5', '\xEE', 'x', '\x2', '\x8BF', '\x8C0', '\a', '\x85', 
		'\x2', '\x2', '\x8C0', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x8C1', '\x8CF', 
		'\x5', '\xF6', '|', '\x2', '\x8C2', '\x8C3', '\a', '|', '\x2', '\x2', 
		'\x8C3', '\x8C4', '\x5', '\x104', '\x83', '\x2', '\x8C4', '\x8C9', '\a', 
		'}', '\x2', '\x2', '\x8C5', '\x8C6', '\a', '\x90', '\x2', '\x2', '\x8C6', 
		'\x8C7', '\x5', '\xF2', 'z', '\x2', '\x8C7', '\x8C8', '\a', '\x85', '\x2', 
		'\x2', '\x8C8', '\x8CA', '\x3', '\x2', '\x2', '\x2', '\x8C9', '\x8C5', 
		'\x3', '\x2', '\x2', '\x2', '\x8C9', '\x8CA', '\x3', '\x2', '\x2', '\x2', 
		'\x8CA', '\x8D0', '\x3', '\x2', '\x2', '\x2', '\x8CB', '\x8CC', '\x5', 
		'\x158', '\xAD', '\x2', '\x8CC', '\x8CD', '\x5', '\x1A', '\xE', '\x2', 
		'\x8CD', '\x8CE', '\a', '\x85', '\x2', '\x2', '\x8CE', '\x8D0', '\x3', 
		'\x2', '\x2', '\x2', '\x8CF', '\x8C2', '\x3', '\x2', '\x2', '\x2', '\x8CF', 
		'\x8CB', '\x3', '\x2', '\x2', '\x2', '\x8D0', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x8D1', '\x8D2', '\a', '\x1C', '\x2', '\x2', '\x8D2', '\x8D3', 
		'\x5', '\x6', '\x4', '\x2', '\x8D3', '\x8D4', '\x5', '\xEA', 'v', '\x2', 
		'\x8D4', '\x8D5', '\a', '\x85', '\x2', '\x2', '\x8D5', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x8D6', '\x8D7', '\a', '_', '\x2', '\x2', '\x8D7', 
		'\x8D8', '\a', '~', '\x2', '\x2', '\x8D8', '\x8D9', '\x5', '\xFA', '~', 
		'\x2', '\x8D9', '\x8E2', '\a', '\x7F', '\x2', '\x2', '\x8DA', '\x8DB', 
		'\a', '|', '\x2', '\x2', '\x8DB', '\x8DC', '\x5', '\x104', '\x83', '\x2', 
		'\x8DC', '\x8DD', '\a', '}', '\x2', '\x2', '\x8DD', '\x8E3', '\x3', '\x2', 
		'\x2', '\x2', '\x8DE', '\x8DF', '\x5', '\x158', '\xAD', '\x2', '\x8DF', 
		'\x8E0', '\x5', '\x1A', '\xE', '\x2', '\x8E0', '\x8E1', '\a', '\x85', 
		'\x2', '\x2', '\x8E1', '\x8E3', '\x3', '\x2', '\x2', '\x2', '\x8E2', '\x8DA', 
		'\x3', '\x2', '\x2', '\x2', '\x8E2', '\x8DE', '\x3', '\x2', '\x2', '\x2', 
		'\x8E3', '\x183', '\x3', '\x2', '\x2', '\x2', '\x8E4', '\x8E5', '\a', 
		'\x8F', '\x2', '\x2', '\x8E5', '\x8E6', '\x5', '\x194', '\xCB', '\x2', 
		'\x8E6', '\x8E7', '\a', '\x80', '\x2', '\x2', '\x8E7', '\x8E8', '\a', 
		'\x81', '\x2', '\x2', '\x8E8', '\x8E9', '\x5', '\x11A', '\x8E', '\x2', 
		'\x8E9', '\x185', '\x3', '\x2', '\x2', '\x2', '\x8EA', '\x8EB', '\x5', 
		'\x194', '\xCB', '\x2', '\x8EB', '\x8ED', '\a', '\x80', '\x2', '\x2', 
		'\x8EC', '\x8EE', '\x5', '\xFA', '~', '\x2', '\x8ED', '\x8EC', '\x3', 
		'\x2', '\x2', '\x2', '\x8ED', '\x8EE', '\x3', '\x2', '\x2', '\x2', '\x8EE', 
		'\x8EF', '\x3', '\x2', '\x2', '\x2', '\x8EF', '\x8F1', '\a', '\x81', '\x2', 
		'\x2', '\x8F0', '\x8F2', '\x5', '\x118', '\x8D', '\x2', '\x8F1', '\x8F0', 
		'\x3', '\x2', '\x2', '\x2', '\x8F1', '\x8F2', '\x3', '\x2', '\x2', '\x2', 
		'\x8F2', '\x8F3', '\x3', '\x2', '\x2', '\x2', '\x8F3', '\x8F4', '\x5', 
		'\x11A', '\x8E', '\x2', '\x8F4', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x8F5', '\x8F7', '\x5', '\x18A', '\xC6', '\x2', '\x8F6', '\x8F8', '\x5', 
		'\xC8', '\x65', '\x2', '\x8F7', '\x8F6', '\x3', '\x2', '\x2', '\x2', '\x8F7', 
		'\x8F8', '\x3', '\x2', '\x2', '\x2', '\x8F8', '\x8F9', '\x3', '\x2', '\x2', 
		'\x2', '\x8F9', '\x8FB', '\a', '\x80', '\x2', '\x2', '\x8FA', '\x8FC', 
		'\x5', '\xFA', '~', '\x2', '\x8FB', '\x8FA', '\x3', '\x2', '\x2', '\x2', 
		'\x8FB', '\x8FC', '\x3', '\x2', '\x2', '\x2', '\x8FC', '\x8FD', '\x3', 
		'\x2', '\x2', '\x2', '\x8FD', '\x8FF', '\a', '\x81', '\x2', '\x2', '\x8FE', 
		'\x900', '\x5', '\xD0', 'i', '\x2', '\x8FF', '\x8FE', '\x3', '\x2', '\x2', 
		'\x2', '\x8FF', '\x900', '\x3', '\x2', '\x2', '\x2', '\x900', '\x906', 
		'\x3', '\x2', '\x2', '\x2', '\x901', '\x907', '\x5', '\xF8', '}', '\x2', 
		'\x902', '\x903', '\x5', '\x158', '\xAD', '\x2', '\x903', '\x904', '\x5', 
		'\x1A', '\xE', '\x2', '\x904', '\x905', '\a', '\x85', '\x2', '\x2', '\x905', 
		'\x907', '\x3', '\x2', '\x2', '\x2', '\x906', '\x901', '\x3', '\x2', '\x2', 
		'\x2', '\x906', '\x902', '\x3', '\x2', '\x2', '\x2', '\x907', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x908', '\x90E', '\x5', '\x194', '\xCB', 
		'\x2', '\x909', '\x90A', '\x5', '\x194', '\xCB', '\x2', '\x90A', '\x90B', 
		'\a', '\x94', '\x2', '\x2', '\x90B', '\x90C', '\x5', '\x194', '\xCB', 
		'\x2', '\x90C', '\x90E', '\x3', '\x2', '\x2', '\x2', '\x90D', '\x908', 
		'\x3', '\x2', '\x2', '\x2', '\x90D', '\x909', '\x3', '\x2', '\x2', '\x2', 
		'\x90E', '\x916', '\x3', '\x2', '\x2', '\x2', '\x90F', '\x911', '\x5', 
		'\x14', '\v', '\x2', '\x910', '\x90F', '\x3', '\x2', '\x2', '\x2', '\x910', 
		'\x911', '\x3', '\x2', '\x2', '\x2', '\x911', '\x912', '\x3', '\x2', '\x2', 
		'\x2', '\x912', '\x913', '\a', '\x82', '\x2', '\x2', '\x913', '\x915', 
		'\x5', '\x194', '\xCB', '\x2', '\x914', '\x910', '\x3', '\x2', '\x2', 
		'\x2', '\x915', '\x918', '\x3', '\x2', '\x2', '\x2', '\x916', '\x914', 
		'\x3', '\x2', '\x2', '\x2', '\x916', '\x917', '\x3', '\x2', '\x2', '\x2', 
		'\x917', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x918', '\x916', '\x3', 
		'\x2', '\x2', '\x2', '\x919', '\x91A', '\a', 'G', '\x2', '\x2', '\x91A', 
		'\x91B', '\x5', '\x114', '\x8B', '\x2', '\x91B', '\x91C', '\a', '\x80', 
		'\x2', '\x2', '\x91C', '\x91F', '\x5', '\x18E', '\xC8', '\x2', '\x91D', 
		'\x91E', '\a', '\x83', '\x2', '\x2', '\x91E', '\x920', '\x5', '\x18E', 
		'\xC8', '\x2', '\x91F', '\x91D', '\x3', '\x2', '\x2', '\x2', '\x91F', 
		'\x920', '\x3', '\x2', '\x2', '\x2', '\x920', '\x921', '\x3', '\x2', '\x2', 
		'\x2', '\x921', '\x927', '\a', '\x81', '\x2', '\x2', '\x922', '\x928', 
		'\x5', '\x11A', '\x8E', '\x2', '\x923', '\x924', '\x5', '\x158', '\xAD', 
		'\x2', '\x924', '\x925', '\x5', '\x1A', '\xE', '\x2', '\x925', '\x926', 
		'\a', '\x85', '\x2', '\x2', '\x926', '\x928', '\x3', '\x2', '\x2', '\x2', 
		'\x927', '\x922', '\x3', '\x2', '\x2', '\x2', '\x927', '\x923', '\x3', 
		'\x2', '\x2', '\x2', '\x928', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x929', 
		'\x92A', '\x5', '\x6', '\x4', '\x2', '\x92A', '\x92D', '\x5', '\x194', 
		'\xCB', '\x2', '\x92B', '\x92C', '\a', '\x90', '\x2', '\x2', '\x92C', 
		'\x92E', '\x5', '\x1A', '\xE', '\x2', '\x92D', '\x92B', '\x3', '\x2', 
		'\x2', '\x2', '\x92D', '\x92E', '\x3', '\x2', '\x2', '\x2', '\x92E', '\x18F', 
		'\x3', '\x2', '\x2', '\x2', '\x92F', '\x931', '\a', '\x80', '\x2', '\x2', 
		'\x930', '\x932', '\x5', '\x16', '\f', '\x2', '\x931', '\x930', '\x3', 
		'\x2', '\x2', '\x2', '\x931', '\x932', '\x3', '\x2', '\x2', '\x2', '\x932', 
		'\x933', '\x3', '\x2', '\x2', '\x2', '\x933', '\x934', '\a', '\x81', '\x2', 
		'\x2', '\x934', '\x191', '\x3', '\x2', '\x2', '\x2', '\x935', '\x937', 
		'\a', '\x80', '\x2', '\x2', '\x936', '\x938', '\x5', '\x16', '\f', '\x2', 
		'\x937', '\x936', '\x3', '\x2', '\x2', '\x2', '\x937', '\x938', '\x3', 
		'\x2', '\x2', '\x2', '\x938', '\x939', '\x3', '\x2', '\x2', '\x2', '\x939', 
		'\x93B', '\a', '\x81', '\x2', '\x2', '\x93A', '\x93C', '\x5', 'J', '&', 
		'\x2', '\x93B', '\x93A', '\x3', '\x2', '\x2', '\x2', '\x93B', '\x93C', 
		'\x3', '\x2', '\x2', '\x2', '\x93C', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x93D', '\x93E', '\t', '\x13', '\x2', '\x2', '\x93E', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x197', '\x19A', '\x19D', '\x1A2', '\x1A6', 
		'\x1AC', '\x1AF', '\x1B4', '\x1B8', '\x1BF', '\x1C1', '\x1C8', '\x1CC', 
		'\x1D1', '\x1DB', '\x1E3', '\x1ED', '\x1F3', '\x1F6', '\x1FC', '\x201', 
		'\x212', '\x21A', '\x21F', '\x226', '\x22E', '\x236', '\x23E', '\x246', 
		'\x24E', '\x258', '\x25A', '\x260', '\x265', '\x26D', '\x275', '\x290', 
		'\x296', '\x29F', '\x2A4', '\x2A9', '\x2AF', '\x2BD', '\x2C3', '\x2CF', 
		'\x2D3', '\x2D8', '\x2DC', '\x2E2', '\x2E9', '\x2FC', '\x301', '\x304', 
		'\x313', '\x319', '\x31C', '\x321', '\x324', '\x32C', '\x334', '\x33F', 
		'\x344', '\x349', '\x34B', '\x354', '\x35C', '\x363', '\x36B', '\x36F', 
		'\x378', '\x37D', '\x37F', '\x388', '\x390', '\x394', '\x399', '\x39B', 
		'\x3A0', '\x3A4', '\x3AB', '\x3B3', '\x3B5', '\x3B9', '\x3BC', '\x3CD', 
		'\x3D4', '\x3D8', '\x3E2', '\x3E7', '\x3EE', '\x3F7', '\x3FC', '\x403', 
		'\x40F', '\x41A', '\x422', '\x427', '\x430', '\x439', '\x43E', '\x446', 
		'\x453', '\x45D', '\x473', '\x477', '\x47B', '\x491', '\x496', '\x49B', 
		'\x4A2', '\x4A5', '\x4BB', '\x4C7', '\x4CB', '\x4D5', '\x4DA', '\x4DF', 
		'\x4E4', '\x4EC', '\x4F1', '\x4FB', '\x500', '\x508', '\x50B', '\x512', 
		'\x519', '\x51D', '\x520', '\x526', '\x52A', '\x530', '\x53E', '\x544', 
		'\x54B', '\x550', '\x553', '\x556', '\x55D', '\x567', '\x578', '\x57D', 
		'\x581', '\x584', '\x587', '\x58E', '\x594', '\x59C', '\x5A2', '\x5AC', 
		'\x5B4', '\x5BA', '\x5C5', '\x5C9', '\x5CB', '\x5D0', '\x5D7', '\x5E0', 
		'\x5E7', '\x5EA', '\x5ED', '\x5F1', '\x5F6', '\x603', '\x60D', '\x619', 
		'\x620', '\x62C', '\x632', '\x636', '\x63A', '\x640', '\x646', '\x648', 
		'\x64F', '\x653', '\x656', '\x65A', '\x65F', '\x666', '\x669', '\x66E', 
		'\x673', '\x675', '\x678', '\x67B', '\x681', '\x684', '\x690', '\x694', 
		'\x697', '\x6A1', '\x6A4', '\x6AA', '\x6C5', '\x6D2', '\x6D8', '\x6E1', 
		'\x6E7', '\x6EA', '\x6F2', '\x6F6', '\x6FC', '\x702', '\x708', '\x713', 
		'\x717', '\x719', '\x723', '\x729', '\x72C', '\x739', '\x73F', '\x742', 
		'\x745', '\x74A', '\x74E', '\x752', '\x763', '\x766', '\x76B', '\x76F', 
		'\x773', '\x77C', '\x77F', '\x784', '\x788', '\x78D', '\x791', '\x793', 
		'\x79E', '\x7A2', '\x7A4', '\x7A9', '\x7AE', '\x7B5', '\x7BB', '\x7C0', 
		'\x7C6', '\x7CA', '\x7D0', '\x7D7', '\x7E1', '\x7E4', '\x7E7', '\x7EC', 
		'\x7F2', '\x7F6', '\x7F8', '\x7FF', '\x806', '\x80E', '\x812', '\x832', 
		'\x83A', '\x840', '\x849', '\x852', '\x858', '\x85F', '\x866', '\x868', 
		'\x86F', '\x872', '\x875', '\x879', '\x87E', '\x881', '\x884', '\x888', 
		'\x88D', '\x890', '\x893', '\x897', '\x89C', '\x8A0', '\x8A6', '\x8AA', 
		'\x8AE', '\x8BC', '\x8C9', '\x8CF', '\x8E2', '\x8ED', '\x8F1', '\x8F7', 
		'\x8FB', '\x8FF', '\x906', '\x90D', '\x910', '\x916', '\x91F', '\x927', 
		'\x92D', '\x931', '\x937', '\x93B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
